apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    component: {{ .Values.plugin.name }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    component: {{ .Values.plugin.name }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "create"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    component: {{ .Values.plugin.name }}
subjects:
- kind: ServiceAccount
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ template "csi-vault.plugin" . }}
  apiGroup: rbac.authorization.k8s.io
---
# to read the config for terminating authentication
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ template "csi-vault.plugin" . }}-extension-server-authentication-reader
  namespace: kube-system
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    component: {{ .Values.plugin.name }}
roleRef:
  kind: Role
  apiGroup: rbac.authorization.k8s.io
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
---
# to delegate authentication and authorization
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ template "csi-vault.plugin" . }}-auth-delegator
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    component: {{ .Values.plugin.name }}
roleRef:
  kind: ClusterRole
  apiGroup: rbac.authorization.k8s.io
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    component: {{ .Values.plugin.name }}
  {{- if and (eq .Values.monitoring.agent "prometheus.io/builtin") .Values.monitoring.plugin }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8443"
    prometheus.io/scheme: "https"
  {{- end }}
spec:
  selector:
    app: {{ template "csi-vault.name" . }}
    component: {{ .Values.plugin.name }}
    release: "{{ .Release.Name }}"
  clusterIP: None
  ports:
  - name: api
    port: 443
    targetPort: 8443
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ template "csi-vault.plugin" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    component: {{ .Values.plugin.name }}
spec:
  selector:
    matchLabels:
      app: {{ template "csi-vault.name" . }}
      component: {{ .Values.plugin.name }}
      release: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        {{- include "csi-vault.labels" . | nindent 8}}
        component: {{ .Values.plugin.name }}
    spec:
      serviceAccount: {{ template "csi-vault.plugin" . }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 6 }}
      {{- end }}
      hostNetwork: true
      containers:
      - name: driver-registrar
        image: {{ .Values.registrar.registry }}/{{ .Values.registrar.repository }}:{{ .Values.registrar.tag }}
        args:
        - --v={{ .Values.logLevel }}
        - --csi-address=$(ADDRESS)
        - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
        env:
        - name: ADDRESS
          value: /csi/csi.sock
        - name: DRIVER_REG_SOCK_PATH
          value: /var/lib/kubelet/plugins/{{ .Values.driverName }}/csi.sock
        - name: KUBE_NODE_NAME
          {{- include "csi-vault.node" . | nindent 10 }}
        imagePullPolicy: {{ .Values.registrar.pullPolicy }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi/
        - name: registration-dir
          mountPath: /registration
      - name: csi-vaultplugin
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        image: {{ .Values.plugin.registry }}/{{ .Values.plugin.repository }}:{{ .Values.plugin.tag }}
        args :
        - run
        - "--endpoint=$(CSI_ENDPOINT)"
        - "--node=$(NODE_NAME)"
        - "--v={{ .Values.logLevel }}"
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks={{ .Values.apiserver.useKubeapiserverFqdnForAks }}
        - --enable-analytics={{ .Values.enableAnalytics }}
        ports:
        - containerPort: 8443
        env:
        - name: CSI_ENDPOINT
          value: unix:///csi/csi.sock
        - name: NODE_NAME
          {{- include "csi-vault.node" . | nindent 10 }}
        imagePullPolicy: {{ .Values.plugin.pullPolicy }}
{{- if .Values.apiserver.healthcheck.enabled }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: pods-mount-dir
          mountPath: /var/lib/kubelet
          # needed so that any mounts setup inside this container are
          # propagated back to the host machine.
          mountPropagation: "Bidirectional"
        - mountPath: /dev
          name: device-dir
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      # TODO(arslan): the registar is not implemented yet
      #- name: registrar-socket-dir
      #  hostPath:
      #    path: /var/lib/kubelet/device-plugins/
      #    type: DirectoryOrCreate
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/{{ .Values.driverName }}
          type: DirectoryOrCreate
      - name: pods-mount-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins/
          type: Directory
      - name: device-dir
        hostPath:
          path: /dev
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: {{ template "csi-vault.fullname" . }}-apiserver-cert
{{- if or .Values.tolerations (and .Values.criticalAddon (eq .Release.Namespace "kube-system")) }}
      tolerations:
{{- if .Values.tolerations }}
{{ toYaml .Values.tolerations | indent 8 }}
{{- end -}}
{{- if and .Values.criticalAddon (eq .Release.Namespace "kube-system") }}
      - key: CriticalAddonsOnly
        operator: Exists
{{- end -}}
{{- end -}}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end -}}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end -}}
{{- if and .Values.criticalAddon (eq .Release.Namespace "kube-system") }}
      priorityClassName: system-cluster-critical
{{- end -}}
