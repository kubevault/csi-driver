kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: csi-vault-controller
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: controller
spec:
  serviceName: csi-vault-controller
  replicas: 1
  selector:
    matchLabels:
      app: csi-vault
      component: controller
  template:
    metadata:
      labels:
        app: csi-vault
        component: controller
    spec:
      priorityClassName: system-cluster-critical
      serviceAccount: csi-vault-controller
      containers:
      - name: csi-provisioner
        image: ${CSI_PROVISIONER_DOCKER_REGISTRY}/${CSI_PROVISIONER_DOCKER_REPOSITORY}:${CSI_PROVISIONER_IMAGE_TAG}
        args:
        - --provisioner=${CSI_VAULT_DRIVER_NAME}
        - "--csi-address=$(ADDRESS)"
        - "--v=3"
        env:
        - name: ADDRESS
          value: /var/lib/csi/sockets/pluginproxy/csi.sock
        imagePullPolicy: ${CSI_PROVISIONER_IMAGE_PULL_POLICY}
        volumeMounts:
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
      - name: csi-attacher
        image: ${CSI_ATTACHER_DOCKER_REGISTRY}/${CSI_ATTACHER_DOCKER_REPOSITORY}:${CSI_ATTACHER_IMAGE_TAG}
        args:
        - "--v=3"
        - "--csi-address=$(ADDRESS)"
        env:
        - name: ADDRESS
          value: /var/lib/csi/sockets/pluginproxy/csi.sock
        imagePullPolicy: ${CSI_ATTACHER_IMAGE_PULL_POLICY}
        volumeMounts:
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
      - name: csi-vault-plugin
        image: ${CSI_VAULT_DOCKER_REGISTRY}/${CSI_VAULT_DOCKER_REPOSITORY}:${CSI_VAULT_IMAGE_TAG}
        args :
        - run
        - "--endpoint=$(CSI_ENDPOINT)"
        - "--node=$(NODE_NAME)"
        - "--v=3"
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=${CSI_VAULT_USE_KUBEAPISERVER_FQDN_FOR_AKS}
        - --enable-analytics=${CSI_VAULT_ENABLE_ANALYTICS}
        ports:
          - containerPort: 8443
        env:
        - name: CSI_ENDPOINT
          value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: ${CSI_VAULT_IMAGE_PULL_POLICY}
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        volumeMounts:
        - name: socket-dir
          mountPath: /var/lib/csi/sockets/pluginproxy/
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: socket-dir
        emptyDir: {}
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: csi-vault-apiserver-cert
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      priorityClassName: ${CSI_VAULT_PRIORITY_CLASS}
---

# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: csi-vault-controller
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: controller
spec:
  selector:
    app: csi-vault
    component: controller
  ports:
  - name: api
    port: 443
    targetPort: 8443
---

kind: ServiceAccount
apiVersion: v1
metadata:
  name: csi-vault-controller
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: controller

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-controller
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: controller
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["storageclasses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch", "create", "update", "patch"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshots"]
  verbs: ["get", "list"]
- apiGroups: ["snapshot.storage.k8s.io"]
  resources: ["volumesnapshotcontents"]
  verbs: ["get", "list"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-controller
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: controller
subjects:
- kind: ServiceAccount
  name: csi-vault-controller
  namespace: ${CSI_VAULT_NAMESPACE}
roleRef:
  kind: ClusterRole
  name: csi-vault-controller
  apiGroup: rbac.authorization.k8s.io

---
# Attacher must be able to work with PVs, nodes and VolumeAttachments
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-attacher
  labels:
    app: csi-vault
    component: controller
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create", "list", "watch", "delete"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-attacher
  labels:
    app: csi-vault
    component: controller
subjects:
- kind: ServiceAccount
  name: csi-vault-controller
  namespace: ${CSI_VAULT_NAMESPACE}
roleRef:
  kind: ClusterRole
  name: csi-vault-attacher
  apiGroup: rbac.authorization.k8s.io
