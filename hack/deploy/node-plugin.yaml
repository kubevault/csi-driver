# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: csi-vault-node
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: node
spec:
  selector:
    app: csi-vault
    component: node
  clusterIP: None
  ports:
  - name: api
    port: 443
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-vault-node
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: controller
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-node
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: node
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-node
subjects:
- kind: ServiceAccount
  name: csi-vault-node
  namespace: ${CSI_VAULT_NAMESPACE}
roleRef:
  kind: ClusterRole
  name: csi-vault-node
  apiGroup: rbac.authorization.k8s.io
---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-plugin
  namespace: ${CSI_VAULT_NAMESPACE}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "create"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-vault-plugin
subjects:
- kind: ServiceAccount
  name: csi-vault-node
  namespace: ${CSI_VAULT_NAMESPACE}
roleRef:
  kind: ClusterRole
  name: csi-vault-plugin
  apiGroup: rbac.authorization.k8s.io
---

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-vault-node
  namespace: ${CSI_VAULT_NAMESPACE}
  labels:
    app: csi-vault
    component: node
spec:
  selector:
    matchLabels:
      app: csi-vault
      component: node
  template:
    metadata:
      labels:
        app: csi-vault
        component: node
    spec:
      priorityClassName: system-node-critical
      serviceAccount: csi-vault-node
      containers:
      - name: node-driver-registrar
        image: ${CSI_NODE_REGISTRAR_DOCKER_REGISTRY}/${CSI_NODE_REGISTRAR_DOCKER_REPOSITORY}:${CSI_NODE_REGISTRAR_IMAGE_TAG}
        args:
        - "--v=3"
        - "--csi-address=$(ADDRESS)"
        - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
        env:
        - name: ADDRESS
          value: /csi/csi.sock
        - name: DRIVER_REG_SOCK_PATH
          value: /var/lib/kubelet/plugins/${CSI_VAULT_DRIVER_NAME}/csi.sock
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: ${CSI_NODE_REGISTRAR_IMAGE_PULL_POLICY}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi/
        - name: registration-dir
          mountPath: /registration/
      - name: csi-vault-plugin
        image: ${CSI_VAULT_DOCKER_REGISTRY}/${CSI_VAULT_DOCKER_REPOSITORY}:${CSI_VAULT_IMAGE_TAG}
        args :
        - run
        - "--csi-address=$(CSI_ENDPOINT)"
        - "--node=$(NODE_NAME)"
        - "--v=3"
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks=${CSI_VAULT_USE_KUBEAPISERVER_FQDN_FOR_AKS}
        - --enable-analytics=${CSI_VAULT_ENABLE_ANALYTICS}
        ports:
        - containerPort: 8443
        env:
        - name: CSI_ENDPOINT
          value: unix:///csi/csi.sock
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: ${CSI_VAULT_IMAGE_PULL_POLICY}
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: pods-mount-dir
          mountPath: /var/lib/kubelet
          # needed so that any mounts setup inside this container are
          # propagated back to the host machine.
          mountPropagation: "Bidirectional"
        - name: device-dir
          mountPath: /dev
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/${CSI_VAULT_DRIVER_NAME}
          type: DirectoryOrCreate
      - name: pods-mount-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: device-dir
        hostPath:
          path: /dev
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: csi-vault-apiserver-cert
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      priorityClassName: ${CSI_VAULT_PRIORITY_CLASS}
