/*
Copyright The KubeVault Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kubevault.dev/operator/apis/kubevault/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	github_com_appscode_go_encoding_json_types "github.com/appscode/go/encoding/json/types"
	proto "github.com/gogo/protobuf/proto"
	v12 "k8s.io/api/core/v1"
	v14 "kmodules.xyz/client-go/api/v1"
	v13 "kmodules.xyz/monitoring-agent-api/api/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func (m *AuthConfig) Reset()      { *m = AuthConfig{} }
func (*AuthConfig) ProtoMessage() {}
func (*AuthConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{0}
}
func (m *AuthConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthConfig.Merge(m, src)
}
func (m *AuthConfig) XXX_Size() int {
	return m.Size()
}
func (m *AuthConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AuthConfig proto.InternalMessageInfo

func (m *AuthMethod) Reset()      { *m = AuthMethod{} }
func (*AuthMethod) ProtoMessage() {}
func (*AuthMethod) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{1}
}
func (m *AuthMethod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMethod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthMethod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMethod.Merge(m, src)
}
func (m *AuthMethod) XXX_Size() int {
	return m.Size()
}
func (m *AuthMethod) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMethod.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMethod proto.InternalMessageInfo

func (m *AuthMethodStatus) Reset()      { *m = AuthMethodStatus{} }
func (*AuthMethodStatus) ProtoMessage() {}
func (*AuthMethodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{2}
}
func (m *AuthMethodStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthMethodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AuthMethodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthMethodStatus.Merge(m, src)
}
func (m *AuthMethodStatus) XXX_Size() int {
	return m.Size()
}
func (m *AuthMethodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthMethodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AuthMethodStatus proto.InternalMessageInfo

func (m *AwsKmsSsmSpec) Reset()      { *m = AwsKmsSsmSpec{} }
func (*AwsKmsSsmSpec) ProtoMessage() {}
func (*AwsKmsSsmSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{3}
}
func (m *AwsKmsSsmSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AwsKmsSsmSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AwsKmsSsmSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AwsKmsSsmSpec.Merge(m, src)
}
func (m *AwsKmsSsmSpec) XXX_Size() int {
	return m.Size()
}
func (m *AwsKmsSsmSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AwsKmsSsmSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AwsKmsSsmSpec proto.InternalMessageInfo

func (m *AzureKeyVault) Reset()      { *m = AzureKeyVault{} }
func (*AzureKeyVault) ProtoMessage() {}
func (*AzureKeyVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{4}
}
func (m *AzureKeyVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureKeyVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureKeyVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureKeyVault.Merge(m, src)
}
func (m *AzureKeyVault) XXX_Size() int {
	return m.Size()
}
func (m *AzureKeyVault) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureKeyVault.DiscardUnknown(m)
}

var xxx_messageInfo_AzureKeyVault proto.InternalMessageInfo

func (m *AzureSpec) Reset()      { *m = AzureSpec{} }
func (*AzureSpec) ProtoMessage() {}
func (*AzureSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{5}
}
func (m *AzureSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AzureSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AzureSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AzureSpec.Merge(m, src)
}
func (m *AzureSpec) XXX_Size() int {
	return m.Size()
}
func (m *AzureSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_AzureSpec.DiscardUnknown(m)
}

var xxx_messageInfo_AzureSpec proto.InternalMessageInfo

func (m *BackendStorageSpec) Reset()      { *m = BackendStorageSpec{} }
func (*BackendStorageSpec) ProtoMessage() {}
func (*BackendStorageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{6}
}
func (m *BackendStorageSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BackendStorageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BackendStorageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackendStorageSpec.Merge(m, src)
}
func (m *BackendStorageSpec) XXX_Size() int {
	return m.Size()
}
func (m *BackendStorageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_BackendStorageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_BackendStorageSpec proto.InternalMessageInfo

func (m *ConsulSpec) Reset()      { *m = ConsulSpec{} }
func (*ConsulSpec) ProtoMessage() {}
func (*ConsulSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{7}
}
func (m *ConsulSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsulSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsulSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsulSpec.Merge(m, src)
}
func (m *ConsulSpec) XXX_Size() int {
	return m.Size()
}
func (m *ConsulSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsulSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ConsulSpec proto.InternalMessageInfo

func (m *DynamoDBSpec) Reset()      { *m = DynamoDBSpec{} }
func (*DynamoDBSpec) ProtoMessage() {}
func (*DynamoDBSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{8}
}
func (m *DynamoDBSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DynamoDBSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DynamoDBSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamoDBSpec.Merge(m, src)
}
func (m *DynamoDBSpec) XXX_Size() int {
	return m.Size()
}
func (m *DynamoDBSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamoDBSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DynamoDBSpec proto.InternalMessageInfo

func (m *EtcdSpec) Reset()      { *m = EtcdSpec{} }
func (*EtcdSpec) ProtoMessage() {}
func (*EtcdSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{9}
}
func (m *EtcdSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EtcdSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *EtcdSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EtcdSpec.Merge(m, src)
}
func (m *EtcdSpec) XXX_Size() int {
	return m.Size()
}
func (m *EtcdSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_EtcdSpec.DiscardUnknown(m)
}

var xxx_messageInfo_EtcdSpec proto.InternalMessageInfo

func (m *FileSpec) Reset()      { *m = FileSpec{} }
func (*FileSpec) ProtoMessage() {}
func (*FileSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{10}
}
func (m *FileSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FileSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSpec.Merge(m, src)
}
func (m *FileSpec) XXX_Size() int {
	return m.Size()
}
func (m *FileSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSpec.DiscardUnknown(m)
}

var xxx_messageInfo_FileSpec proto.InternalMessageInfo

func (m *GcsSpec) Reset()      { *m = GcsSpec{} }
func (*GcsSpec) ProtoMessage() {}
func (*GcsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{11}
}
func (m *GcsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GcsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GcsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GcsSpec.Merge(m, src)
}
func (m *GcsSpec) XXX_Size() int {
	return m.Size()
}
func (m *GcsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GcsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GcsSpec proto.InternalMessageInfo

func (m *GoogleKmsGcsSpec) Reset()      { *m = GoogleKmsGcsSpec{} }
func (*GoogleKmsGcsSpec) ProtoMessage() {}
func (*GoogleKmsGcsSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{12}
}
func (m *GoogleKmsGcsSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GoogleKmsGcsSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *GoogleKmsGcsSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GoogleKmsGcsSpec.Merge(m, src)
}
func (m *GoogleKmsGcsSpec) XXX_Size() int {
	return m.Size()
}
func (m *GoogleKmsGcsSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_GoogleKmsGcsSpec.DiscardUnknown(m)
}

var xxx_messageInfo_GoogleKmsGcsSpec proto.InternalMessageInfo

func (m *InmemSpec) Reset()      { *m = InmemSpec{} }
func (*InmemSpec) ProtoMessage() {}
func (*InmemSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{13}
}
func (m *InmemSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InmemSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *InmemSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InmemSpec.Merge(m, src)
}
func (m *InmemSpec) XXX_Size() int {
	return m.Size()
}
func (m *InmemSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_InmemSpec.DiscardUnknown(m)
}

var xxx_messageInfo_InmemSpec proto.InternalMessageInfo

func (m *KubernetesSecretSpec) Reset()      { *m = KubernetesSecretSpec{} }
func (*KubernetesSecretSpec) ProtoMessage() {}
func (*KubernetesSecretSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{14}
}
func (m *KubernetesSecretSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesSecretSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubernetesSecretSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesSecretSpec.Merge(m, src)
}
func (m *KubernetesSecretSpec) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesSecretSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesSecretSpec.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesSecretSpec proto.InternalMessageInfo

func (m *ModeSpec) Reset()      { *m = ModeSpec{} }
func (*ModeSpec) ProtoMessage() {}
func (*ModeSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{15}
}
func (m *ModeSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModeSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ModeSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModeSpec.Merge(m, src)
}
func (m *ModeSpec) XXX_Size() int {
	return m.Size()
}
func (m *ModeSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ModeSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ModeSpec proto.InternalMessageInfo

func (m *MySQLSpec) Reset()      { *m = MySQLSpec{} }
func (*MySQLSpec) ProtoMessage() {}
func (*MySQLSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{16}
}
func (m *MySQLSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MySQLSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MySQLSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MySQLSpec.Merge(m, src)
}
func (m *MySQLSpec) XXX_Size() int {
	return m.Size()
}
func (m *MySQLSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MySQLSpec.DiscardUnknown(m)
}

var xxx_messageInfo_MySQLSpec proto.InternalMessageInfo

func (m *PostgreSQLSpec) Reset()      { *m = PostgreSQLSpec{} }
func (*PostgreSQLSpec) ProtoMessage() {}
func (*PostgreSQLSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{17}
}
func (m *PostgreSQLSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PostgreSQLSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PostgreSQLSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PostgreSQLSpec.Merge(m, src)
}
func (m *PostgreSQLSpec) XXX_Size() int {
	return m.Size()
}
func (m *PostgreSQLSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_PostgreSQLSpec.DiscardUnknown(m)
}

var xxx_messageInfo_PostgreSQLSpec proto.InternalMessageInfo

func (m *S3Spec) Reset()      { *m = S3Spec{} }
func (*S3Spec) ProtoMessage() {}
func (*S3Spec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{18}
}
func (m *S3Spec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *S3Spec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *S3Spec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3Spec.Merge(m, src)
}
func (m *S3Spec) XXX_Size() int {
	return m.Size()
}
func (m *S3Spec) XXX_DiscardUnknown() {
	xxx_messageInfo_S3Spec.DiscardUnknown(m)
}

var xxx_messageInfo_S3Spec proto.InternalMessageInfo

func (m *SwiftSpec) Reset()      { *m = SwiftSpec{} }
func (*SwiftSpec) ProtoMessage() {}
func (*SwiftSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{19}
}
func (m *SwiftSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwiftSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SwiftSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwiftSpec.Merge(m, src)
}
func (m *SwiftSpec) XXX_Size() int {
	return m.Size()
}
func (m *SwiftSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SwiftSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SwiftSpec proto.InternalMessageInfo

func (m *TLSPolicy) Reset()      { *m = TLSPolicy{} }
func (*TLSPolicy) ProtoMessage() {}
func (*TLSPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{20}
}
func (m *TLSPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLSPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TLSPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLSPolicy.Merge(m, src)
}
func (m *TLSPolicy) XXX_Size() int {
	return m.Size()
}
func (m *TLSPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_TLSPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_TLSPolicy proto.InternalMessageInfo

func (m *UnsealerSpec) Reset()      { *m = UnsealerSpec{} }
func (*UnsealerSpec) ProtoMessage() {}
func (*UnsealerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{21}
}
func (m *UnsealerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsealerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *UnsealerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsealerSpec.Merge(m, src)
}
func (m *UnsealerSpec) XXX_Size() int {
	return m.Size()
}
func (m *UnsealerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsealerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_UnsealerSpec proto.InternalMessageInfo

func (m *VaultServer) Reset()      { *m = VaultServer{} }
func (*VaultServer) ProtoMessage() {}
func (*VaultServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{22}
}
func (m *VaultServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultServer.Merge(m, src)
}
func (m *VaultServer) XXX_Size() int {
	return m.Size()
}
func (m *VaultServer) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultServer.DiscardUnknown(m)
}

var xxx_messageInfo_VaultServer proto.InternalMessageInfo

func (m *VaultServerList) Reset()      { *m = VaultServerList{} }
func (*VaultServerList) ProtoMessage() {}
func (*VaultServerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{23}
}
func (m *VaultServerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultServerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultServerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultServerList.Merge(m, src)
}
func (m *VaultServerList) XXX_Size() int {
	return m.Size()
}
func (m *VaultServerList) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultServerList.DiscardUnknown(m)
}

var xxx_messageInfo_VaultServerList proto.InternalMessageInfo

func (m *VaultServerSpec) Reset()      { *m = VaultServerSpec{} }
func (*VaultServerSpec) ProtoMessage() {}
func (*VaultServerSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{24}
}
func (m *VaultServerSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultServerSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultServerSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultServerSpec.Merge(m, src)
}
func (m *VaultServerSpec) XXX_Size() int {
	return m.Size()
}
func (m *VaultServerSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultServerSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VaultServerSpec proto.InternalMessageInfo

func (m *VaultServerStatus) Reset()      { *m = VaultServerStatus{} }
func (*VaultServerStatus) ProtoMessage() {}
func (*VaultServerStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{25}
}
func (m *VaultServerStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultServerStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultServerStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultServerStatus.Merge(m, src)
}
func (m *VaultServerStatus) XXX_Size() int {
	return m.Size()
}
func (m *VaultServerStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultServerStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VaultServerStatus proto.InternalMessageInfo

func (m *VaultStatus) Reset()      { *m = VaultStatus{} }
func (*VaultStatus) ProtoMessage() {}
func (*VaultStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_3197b9e32c83b8f1, []int{26}
}
func (m *VaultStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultStatus.Merge(m, src)
}
func (m *VaultStatus) XXX_Size() int {
	return m.Size()
}
func (m *VaultStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VaultStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AuthConfig)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.AuthConfig")
	proto.RegisterType((*AuthMethod)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.AuthMethod")
	proto.RegisterType((*AuthMethodStatus)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.AuthMethodStatus")
	proto.RegisterType((*AwsKmsSsmSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.AwsKmsSsmSpec")
	proto.RegisterType((*AzureKeyVault)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.AzureKeyVault")
	proto.RegisterType((*AzureSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.AzureSpec")
	proto.RegisterType((*BackendStorageSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.BackendStorageSpec")
	proto.RegisterType((*ConsulSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.ConsulSpec")
	proto.RegisterType((*DynamoDBSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.DynamoDBSpec")
	proto.RegisterType((*EtcdSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.EtcdSpec")
	proto.RegisterType((*FileSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.FileSpec")
	proto.RegisterType((*GcsSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.GcsSpec")
	proto.RegisterType((*GoogleKmsGcsSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.GoogleKmsGcsSpec")
	proto.RegisterType((*InmemSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.InmemSpec")
	proto.RegisterType((*KubernetesSecretSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.KubernetesSecretSpec")
	proto.RegisterType((*ModeSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.ModeSpec")
	proto.RegisterType((*MySQLSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.MySQLSpec")
	proto.RegisterType((*PostgreSQLSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.PostgreSQLSpec")
	proto.RegisterType((*S3Spec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.S3Spec")
	proto.RegisterType((*SwiftSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.SwiftSpec")
	proto.RegisterType((*TLSPolicy)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.TLSPolicy")
	proto.RegisterType((*UnsealerSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.UnsealerSpec")
	proto.RegisterType((*VaultServer)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.VaultServer")
	proto.RegisterType((*VaultServerList)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.VaultServerList")
	proto.RegisterType((*VaultServerSpec)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.VaultServerSpec")
	proto.RegisterType((*VaultServerStatus)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.VaultServerStatus")
	proto.RegisterType((*VaultStatus)(nil), "kubevault.dev.operator.apis.kubevault.v1alpha1.VaultStatus")
}

func init() {
	proto.RegisterFile("kubevault.dev/operator/apis/kubevault/v1alpha1/generated.proto", fileDescriptor_3197b9e32c83b8f1)
}

var fileDescriptor_3197b9e32c83b8f1 = []byte{
	// 3476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xcd, 0x73, 0x23, 0xc7,
	0x75, 0x5f, 0x10, 0x04, 0x08, 0x34, 0xc8, 0x5d, 0xee, 0x68, 0x13, 0x41, 0xb2, 0x45, 0x6e, 0x21,
	0x15, 0xd5, 0xba, 0x62, 0x01, 0x12, 0xd7, 0xb2, 0x37, 0x71, 0xac, 0x18, 0x1f, 0xeb, 0xd5, 0x8a,
	0xa4, 0xc4, 0xbc, 0xc1, 0x52, 0x89, 0xec, 0x44, 0x6e, 0xce, 0x34, 0x81, 0x11, 0x06, 0xd3, 0xd0,
	0x74, 0x0f, 0xb5, 0xd8, 0x53, 0x4e, 0x3e, 0x2b, 0x95, 0x43, 0x0e, 0xf9, 0x0f, 0x92, 0x73, 0x4e,
	0xa9, 0x54, 0xa5, 0x2a, 0x07, 0x2b, 0x87, 0x54, 0x39, 0x37, 0xe7, 0xc2, 0x8a, 0x98, 0x53, 0x4e,
	0x49, 0xae, 0x7b, 0x4a, 0xf5, 0xc7, 0xf4, 0xf4, 0x0c, 0xc0, 0x5d, 0x82, 0x56, 0xe5, 0x04, 0x4c,
	0xbf, 0xdf, 0x7b, 0xdd, 0xfd, 0xfa, 0xf5, 0x7b, 0xaf, 0x5f, 0x37, 0x7a, 0x6f, 0x92, 0x9c, 0x90,
	0x33, 0x9c, 0x84, 0xbc, 0xed, 0x93, 0xb3, 0x0e, 0x9d, 0x91, 0x18, 0x73, 0x1a, 0x77, 0xf0, 0x2c,
	0x60, 0x1d, 0x43, 0xeb, 0x9c, 0xbd, 0x83, 0xc3, 0xd9, 0x18, 0xbf, 0xd3, 0x19, 0x91, 0x48, 0x20,
	0x88, 0xdf, 0x9e, 0xc5, 0x94, 0x53, 0xa7, 0x9d, 0xe3, 0x6f, 0xa7, 0xfc, 0x6d, 0xc1, 0x6f, 0xd1,
	0x52, 0xfe, 0xd7, 0xdf, 0x1a, 0x05, 0x7c, 0x9c, 0x9c, 0xb4, 0x3d, 0x3a, 0xed, 0x8c, 0xe8, 0x88,
	0x76, 0xa4, 0x98, 0x93, 0xe4, 0x54, 0x7e, 0xc9, 0x0f, 0xf9, 0x4f, 0x89, 0x7f, 0xbd, 0x35, 0x79,
	0xc0, 0xda, 0x01, 0x15, 0xc3, 0xe9, 0x78, 0x34, 0x26, 0x9d, 0xb3, 0x85, 0x21, 0xbc, 0xfe, 0xbd,
	0x0c, 0x33, 0xc5, 0xde, 0x38, 0x88, 0x48, 0x3c, 0xef, 0xcc, 0x26, 0x23, 0x35, 0x87, 0x29, 0xe1,
	0x78, 0x19, 0x57, 0xe7, 0x32, 0xae, 0x38, 0x89, 0x78, 0x30, 0x25, 0x0b, 0x0c, 0xdf, 0x7f, 0x19,
	0x03, 0xf3, 0xc6, 0x64, 0x8a, 0x17, 0xf8, 0xde, 0x9a, 0x4c, 0xa9, 0x9f, 0x84, 0x84, 0xb5, 0x9f,
	0xce, 0x9f, 0x75, 0xbc, 0x30, 0x20, 0x11, 0x7f, 0x6b, 0xa4, 0xa6, 0xb4, 0x64, 0x5c, 0x0f, 0x72,
	0xf0, 0x29, 0x8d, 0x02, 0x4e, 0xe3, 0x20, 0x1a, 0xbd, 0x85, 0x47, 0x82, 0x51, 0x70, 0x5d, 0xc2,
	0xf9, 0x76, 0x8e, 0x93, 0x9e, 0x9e, 0xb2, 0x31, 0xa5, 0x2f, 0xe2, 0x68, 0xfd, 0xe5, 0x3a, 0x42,
	0xdd, 0x84, 0x8f, 0xfb, 0x34, 0x3a, 0x0d, 0x46, 0x4e, 0x17, 0xdd, 0xf2, 0xc9, 0xa9, 0x58, 0xaf,
	0x03, 0x82, 0x19, 0x19, 0x0e, 0x0f, 0x9a, 0xa5, 0xbb, 0xa5, 0x7b, 0xf5, 0xde, 0xab, 0x5f, 0x9d,
	0xef, 0xde, 0xb8, 0x38, 0xdf, 0xbd, 0x35, 0xc8, 0x93, 0xa1, 0x88, 0x77, 0xde, 0x45, 0x8d, 0x29,
	0x7e, 0x6a, 0xd8, 0xd7, 0x24, 0xfb, 0x2b, 0x9a, 0xbd, 0x71, 0x98, 0x91, 0xc0, 0xc6, 0x39, 0x7b,
	0x08, 0xcd, 0xc2, 0x64, 0x14, 0x44, 0x1f, 0xe2, 0x29, 0x69, 0x96, 0x25, 0x97, 0xa3, 0xb9, 0xd0,
	0x91, 0xa1, 0x80, 0x85, 0x72, 0x9e, 0xa0, 0x57, 0x71, 0xe2, 0x07, 0xfc, 0x43, 0x1a, 0xbd, 0x7f,
	0xd8, 0xed, 0x03, 0xf9, 0x3c, 0x21, 0x8c, 0xef, 0x93, 0x39, 0x6b, 0xae, 0xdf, 0x2d, 0xdf, 0xab,
	0xf7, 0xbe, 0x75, 0x71, 0xbe, 0xfb, 0x6a, 0x77, 0x39, 0x04, 0x2e, 0xe3, 0x75, 0xfe, 0x04, 0x35,
	0xf3, 0x24, 0x36, 0xa3, 0x11, 0x23, 0x52, 0x6e, 0x45, 0xca, 0xfd, 0xf6, 0xc5, 0xf9, 0x6e, 0xb3,
	0x7b, 0x09, 0x06, 0x2e, 0xe5, 0x76, 0x1e, 0xa1, 0xdb, 0x61, 0xc0, 0x78, 0x10, 0x8d, 0x8e, 0x03,
	0x16, 0x9c, 0x04, 0x61, 0xc0, 0xe7, 0xcd, 0xaa, 0x9c, 0xeb, 0x6b, 0x7a, 0xae, 0xb7, 0x0f, 0x8a,
	0x00, 0x58, 0xe4, 0x71, 0x7e, 0x8a, 0x5e, 0x9b, 0x61, 0xc6, 0xf8, 0x38, 0xa6, 0xc9, 0x68, 0xac,
	0x07, 0xff, 0x3e, 0xc1, 0x3e, 0x89, 0x59, 0x73, 0x43, 0x8e, 0xf1, 0x8d, 0x8b, 0xf3, 0xdd, 0xd7,
	0x8e, 0x2e, 0x03, 0xc1, 0xe5, 0xfc, 0xad, 0x7f, 0x5a, 0x53, 0x36, 0x71, 0x48, 0xf8, 0x98, 0xfa,
	0xce, 0x5d, 0xb4, 0xce, 0xe7, 0x33, 0xa2, 0x0d, 0x61, 0x53, 0x8f, 0x73, 0x7d, 0x38, 0x9f, 0x11,
	0x90, 0x14, 0x81, 0x98, 0x61, 0x3e, 0xd6, 0x6b, 0x6d, 0x10, 0x47, 0x98, 0x8f, 0x41, 0x52, 0x84,
	0x51, 0xf8, 0x84, 0x79, 0x71, 0x30, 0xe3, 0x01, 0x8d, 0xf4, 0xf2, 0x1a, 0xa3, 0x18, 0x64, 0x24,
	0xb0, 0x71, 0xce, 0x9f, 0xa3, 0xaa, 0x27, 0x0d, 0xb3, 0xb9, 0x7e, 0xb7, 0x74, 0xaf, 0xb1, 0xf7,
	0x07, 0x2b, 0xfa, 0x9a, 0x76, 0x66, 0xda, 0x3d, 0x74, 0x71, 0xbe, 0x5b, 0x55, 0xff, 0x41, 0x4b,
	0x2d, 0x18, 0x5d, 0xe5, 0x4a, 0x46, 0xf7, 0x3b, 0xa8, 0x12, 0x52, 0x0f, 0x87, 0x72, 0xdd, 0x6a,
	0xbd, 0x2d, 0x0d, 0xaf, 0x1c, 0x88, 0x46, 0x50, 0xb4, 0xd6, 0x2f, 0x4b, 0x68, 0x3b, 0x53, 0xa1,
	0xcb, 0x31, 0x4f, 0xd8, 0x37, 0xa2, 0xc8, 0x47, 0xa8, 0xca, 0xa4, 0x34, 0xad, 0xc3, 0x8e, 0xc6,
	0x54, 0x55, 0x1f, 0xcf, 0xcf, 0x77, 0xdf, 0xc8, 0xfa, 0x7d, 0x18, 0xe1, 0x93, 0x90, 0x0c, 0x02,
	0x26, 0x7e, 0x14, 0x00, 0x34, 0xbb, 0xf3, 0x26, 0xaa, 0xc6, 0x04, 0x33, 0x1a, 0x49, 0xd5, 0xd6,
	0x7b, 0x37, 0x53, 0x41, 0x20, 0x5b, 0x41, 0x53, 0x5b, 0x7f, 0xb5, 0x86, 0xb6, 0xba, 0x5f, 0xb0,
	0xfd, 0x29, 0x73, 0xd9, 0xd4, 0x9d, 0x11, 0xcf, 0xf9, 0x2e, 0xaa, 0x4d, 0xa6, 0x6c, 0x9f, 0xcc,
	0x1f, 0x0f, 0xf4, 0x54, 0xb6, 0x35, 0x6f, 0x6d, 0x5f, 0xb7, 0x83, 0x41, 0x38, 0x0f, 0xd0, 0x26,
	0x63, 0xd3, 0x7d, 0x32, 0x3f, 0x8a, 0xc9, 0x69, 0xf0, 0x54, 0x4f, 0xed, 0x8e, 0xe6, 0xd8, 0x74,
	0x2d, 0x1a, 0xe4, 0x90, 0x6a, 0x84, 0xa3, 0xcc, 0x5c, 0xac, 0x11, 0x8a, 0x56, 0xd0, 0x54, 0x67,
	0x80, 0xb6, 0xbd, 0x98, 0xf8, 0x24, 0xe2, 0x01, 0x0e, 0x5d, 0xe2, 0xc5, 0x84, 0xeb, 0x39, 0x35,
	0x35, 0xc7, 0x76, 0xbf, 0x40, 0x87, 0x05, 0x0e, 0x31, 0x2b, 0x12, 0xf9, 0x33, 0x1a, 0x44, 0x5c,
	0x1b, 0x82, 0x99, 0xd5, 0x43, 0xdd, 0x0e, 0x06, 0xd1, 0xfa, 0x5f, 0xa1, 0x95, 0x67, 0x49, 0x2c,
	0xb6, 0xf5, 0xb1, 0x30, 0x39, 0x31, 0x4f, 0x69, 0x7b, 0x3d, 0xcc, 0xc8, 0x13, 0x48, 0xdd, 0xa6,
	0x99, 0xe7, 0xb1, 0x45, 0x83, 0x1c, 0x52, 0x18, 0x94, 0x17, 0xd2, 0xc4, 0xd7, 0xaa, 0x31, 0x06,
	0xd5, 0x17, 0x8d, 0xa0, 0x68, 0x62, 0x78, 0x9c, 0x44, 0x38, 0xe2, 0x8f, 0x07, 0x5a, 0x1d, 0x66,
	0x78, 0x43, 0xdd, 0x0e, 0x06, 0x21, 0x55, 0x22, 0xa3, 0x4c, 0x9f, 0xc4, 0xfc, 0x12, 0x95, 0x14,
	0xe8, 0xb0, 0xc0, 0x21, 0x82, 0x01, 0xc6, 0xbe, 0x02, 0x6a, 0x21, 0x95, 0x7c, 0x30, 0xe8, 0x76,
	0x07, 0x36, 0x19, 0x8a, 0x78, 0xe7, 0x03, 0xe4, 0x24, 0x8c, 0x1c, 0xe2, 0x08, 0x8f, 0x88, 0xff,
	0x58, 0x6a, 0x5c, 0x7b, 0xbc, 0x5a, 0xef, 0x75, 0x2d, 0xc5, 0x79, 0xb2, 0x80, 0x80, 0x25, 0x5c,
	0xad, 0xff, 0x29, 0xa1, 0xba, 0xd4, 0xb9, 0xb4, 0xc2, 0x77, 0x51, 0x03, 0x7b, 0x1e, 0x4d, 0x22,
	0x2e, 0xf7, 0x6e, 0x29, 0xef, 0x51, 0xba, 0x19, 0x09, 0x6c, 0x9c, 0xd0, 0x8c, 0xfe, 0xdc, 0x27,
	0x73, 0x3d, 0xa9, 0xb5, 0xbc, 0x66, 0xba, 0x05, 0x3a, 0x2c, 0x70, 0x38, 0x1d, 0x54, 0xf7, 0x68,
	0xc4, 0xb1, 0xc8, 0x00, 0xf4, 0x72, 0xdc, 0xd6, 0xec, 0xf5, 0x7e, 0x4a, 0x80, 0x0c, 0xa3, 0x83,
	0xe2, 0x11, 0x8e, 0x71, 0x18, 0x92, 0x50, 0xae, 0x45, 0x39, 0x17, 0x14, 0x53, 0x12, 0xd8, 0xb8,
	0xd6, 0x97, 0x35, 0xe4, 0xf4, 0xb0, 0x37, 0x21, 0x91, 0xef, 0x72, 0x1a, 0xe3, 0x91, 0x9a, 0xfb,
	0x27, 0xa8, 0x12, 0x44, 0x53, 0x32, 0x95, 0xb3, 0x6e, 0xec, 0xfd, 0xfe, 0xaa, 0x5e, 0xf1, 0xb1,
	0x60, 0x16, 0x92, 0x7a, 0x75, 0x61, 0x68, 0xf2, 0x13, 0x94, 0x48, 0xe7, 0x18, 0xad, 0x13, 0xee,
	0x29, 0x63, 0x6c, 0xec, 0x3d, 0x58, 0x55, 0xf4, 0x43, 0xee, 0xf9, 0x52, 0x72, 0x4d, 0x38, 0x2e,
	0xf1, 0x05, 0x52, 0x9e, 0x03, 0xa8, 0x3c, 0xf2, 0x94, 0xd7, 0x6a, 0xec, 0xfd, 0x60, 0x55, 0xb1,
	0x8f, 0x3c, 0x26, 0xa5, 0x6e, 0x5c, 0x9c, 0xef, 0x96, 0x1f, 0x79, 0x0c, 0x84, 0x30, 0xe7, 0x43,
	0xb4, 0xc6, 0xee, 0xeb, 0xd0, 0xf0, 0xfd, 0x55, 0x45, 0xba, 0xf7, 0xa5, 0xc4, 0xea, 0xc5, 0xf9,
	0xee, 0x9a, 0x7b, 0x1f, 0xd6, 0xd8, 0x7d, 0xa1, 0x57, 0x2c, 0x0c, 0x4c, 0x9a, 0xf9, 0x35, 0xf4,
	0x6a, 0xac, 0x53, 0xe9, 0x55, 0x7e, 0x82, 0x12, 0xe9, 0x44, 0x08, 0xcd, 0x28, 0xe3, 0xa3, 0x98,
	0xb0, 0xcf, 0x55, 0xec, 0x68, 0xec, 0xbd, 0xb7, 0x6a, 0x07, 0x47, 0x4a, 0x82, 0xfb, 0xc7, 0x07,
	0xb2, 0x97, 0x9b, 0x32, 0x4c, 0x99, 0x36, 0xb0, 0x7a, 0x10, 0x73, 0x99, 0xce, 0x45, 0x57, 0x1b,
	0xd7, 0x9b, 0xcb, 0xe1, 0x3c, 0xed, 0x45, 0xce, 0x45, 0x7e, 0x82, 0x12, 0x29, 0x6c, 0xe4, 0x34,
	0x08, 0x49, 0xb3, 0x76, 0x3d, 0x1b, 0xf9, 0x49, 0x10, 0x92, 0xcc, 0x46, 0xc4, 0x17, 0x48, 0x79,
	0xce, 0x29, 0xaa, 0xf9, 0xf3, 0x08, 0x4f, 0xa9, 0x7f, 0xd2, 0xac, 0x4b, 0xd9, 0x7f, 0xb8, 0xaa,
	0xec, 0x81, 0xe4, 0x1f, 0xf4, 0xa4, 0xfc, 0x4d, 0xe1, 0x1e, 0xd3, 0x16, 0x30, 0xb2, 0x85, 0x6e,
	0xd8, 0x17, 0xc1, 0x29, 0x6f, 0xa2, 0xeb, 0xe9, 0xc6, 0x15, 0xcc, 0x99, 0x6e, 0xe4, 0x27, 0x28,
	0x91, 0x3a, 0x65, 0x61, 0x49, 0xd8, 0x6c, 0x5c, 0x2f, 0x65, 0xe9, 0x4b, 0x6e, 0x29, 0x3d, 0x4d,
	0x59, 0x58, 0x12, 0x82, 0x96, 0xda, 0xfa, 0xeb, 0x0d, 0x84, 0x32, 0x88, 0xf3, 0x1d, 0xb4, 0x81,
	0x7d, 0x3f, 0x26, 0x8c, 0x69, 0x17, 0x78, 0x4b, 0x3b, 0x95, 0x8d, 0xae, 0x6a, 0x86, 0x94, 0x2e,
	0x22, 0x94, 0x37, 0x26, 0xde, 0x64, 0x18, 0x4c, 0x09, 0x4d, 0x78, 0x31, 0x12, 0xf7, 0x2d, 0x1a,
	0xe4, 0x90, 0x22, 0x10, 0x88, 0xde, 0x03, 0xc6, 0x49, 0xe4, 0xcd, 0x0f, 0xa9, 0x9f, 0x26, 0xe8,
	0x26, 0x10, 0xf4, 0xf3, 0x64, 0x28, 0xe2, 0x9d, 0x43, 0xf4, 0x8a, 0xaf, 0xf2, 0x10, 0x11, 0xbd,
	0x19, 0x8f, 0xb1, 0x4c, 0x04, 0x55, 0x50, 0xfa, 0x96, 0x16, 0xf3, 0xca, 0x60, 0x11, 0x02, 0xcb,
	0xf8, 0x8a, 0xfe, 0xb4, 0xb2, 0x70, 0xc8, 0x58, 0xea, 0x4f, 0x4d, 0x7e, 0x55, 0xbd, 0x34, 0xbf,
	0x7a, 0x13, 0x55, 0xe5, 0x21, 0x8e, 0xc8, 0x7d, 0x63, 0x25, 0x1d, 0xae, 0x6c, 0x05, 0x4d, 0x15,
	0x7a, 0x67, 0x24, 0x3e, 0x0b, 0x3c, 0xb5, 0x0b, 0x2c, 0xbd, 0xbb, 0xaa, 0x19, 0x52, 0xba, 0x18,
	0xab, 0xfe, 0x3b, 0xc4, 0x23, 0x26, 0x0d, 0xdb, 0x1a, 0xab, 0x9b, 0x91, 0xc0, 0xc6, 0x39, 0xef,
	0xa1, 0x9b, 0xfa, 0x53, 0xaf, 0xa4, 0xb4, 0xd6, 0x7a, 0xef, 0xb7, 0x35, 0xe7, 0x4d, 0x37, 0x47,
	0x85, 0x02, 0x5a, 0x84, 0x5e, 0xec, 0x85, 0x43, 0x3a, 0x21, 0x91, 0x8a, 0x5a, 0x32, 0x4e, 0x36,
	0xa4, 0x0c, 0x13, 0x7a, 0xbb, 0xfd, 0x83, 0x02, 0x02, 0x96, 0x70, 0x89, 0x3c, 0x99, 0x11, 0xc6,
	0x02, 0x1a, 0x89, 0x23, 0xdd, 0x66, 0x3e, 0x4f, 0x76, 0x0d, 0x05, 0x2c, 0x94, 0x30, 0xb7, 0x90,
	0x7a, 0x93, 0x8f, 0x71, 0xc0, 0x85, 0x1d, 0x35, 0xb7, 0xf2, 0xe6, 0x76, 0x60, 0xd1, 0x20, 0x87,
	0x74, 0x7e, 0x88, 0xb6, 0x78, 0xc8, 0xac, 0x41, 0xdf, 0x94, 0xac, 0xbf, 0xa5, 0x59, 0xb7, 0x86,
	0x07, 0xae, 0x35, 0xde, 0x3c, 0x56, 0x33, 0x1f, 0x06, 0xd1, 0x31, 0x89, 0xc5, 0x50, 0x9a, 0xb7,
	0x16, 0x98, 0x33, 0x22, 0xe4, 0xb1, 0x69, 0xcf, 0x93, 0x60, 0x76, 0x4c, 0xe2, 0xe0, 0x74, 0xde,
	0xdc, 0x96, 0x99, 0x4a, 0xae, 0x67, 0x43, 0x84, 0x3c, 0xb6, 0xf5, 0xbc, 0x8c, 0x36, 0x6d, 0xf7,
	0x93, 0x4b, 0x29, 0x4b, 0x2f, 0x4b, 0x29, 0xad, 0x74, 0x77, 0xed, 0x85, 0xe9, 0x6e, 0x07, 0xd5,
	0xc7, 0x58, 0x65, 0xf6, 0xbe, 0xdc, 0x86, 0xb5, 0x2c, 0xf7, 0x78, 0x3f, 0x25, 0x40, 0x86, 0x11,
	0x0b, 0x11, 0x13, 0xec, 0xf7, 0xf1, 0x0c, 0x7b, 0x22, 0xfb, 0x52, 0xc9, 0x87, 0x59, 0x08, 0xb0,
	0x68, 0x90, 0x43, 0x0a, 0x75, 0x7c, 0x11, 0x07, 0x9c, 0x18, 0xd6, 0x8a, 0x64, 0x35, 0xea, 0xf8,
	0xd8, 0x26, 0x42, 0x1e, 0x2b, 0xd2, 0x5a, 0x2e, 0x06, 0xa0, 0x37, 0x9b, 0x49, 0x6b, 0x87, 0x72,
	0x33, 0x2b, 0xda, 0xd2, 0xdc, 0x7d, 0x63, 0xe5, 0xdc, 0xfd, 0x03, 0xe4, 0xa4, 0x86, 0x97, 0x19,
	0xae, 0xde, 0x97, 0xc6, 0xd4, 0xdd, 0x05, 0x04, 0x2c, 0xe1, 0x2a, 0x7a, 0x96, 0xfa, 0x15, 0x33,
	0xb5, 0xbf, 0x29, 0xa3, 0x5a, 0x9a, 0xfb, 0xac, 0xe2, 0x94, 0xbf, 0x83, 0x36, 0x44, 0x7a, 0xd4,
	0x9d, 0x05, 0x7a, 0xd9, 0x0d, 0xf4, 0xa1, 0x6a, 0x86, 0x94, 0x2e, 0xcc, 0x29, 0x5d, 0x54, 0xbd,
	0xee, 0xc6, 0x9c, 0xde, 0xef, 0xaa, 0x76, 0x30, 0x08, 0xe3, 0xea, 0xd6, 0x2f, 0x75, 0x75, 0x77,
	0xd1, 0x3a, 0x9b, 0x47, 0x9e, 0x5c, 0xd4, 0x5a, 0x86, 0x70, 0xe7, 0x91, 0x07, 0x92, 0x22, 0x2c,
	0xc7, 0x0f, 0x98, 0x47, 0xcf, 0x48, 0x3c, 0x77, 0xe3, 0x33, 0xbd, 0x92, 0xc6, 0x72, 0x06, 0x16,
	0x0d, 0x72, 0x48, 0xe7, 0x08, 0xdd, 0x29, 0xae, 0x92, 0xdc, 0xc9, 0x6a, 0x6d, 0xbf, 0xad, 0x25,
	0xdc, 0xe9, 0x2f, 0xc1, 0xc0, 0x52, 0xce, 0x45, 0xa7, 0x50, 0xbb, 0xba, 0x53, 0x68, 0xfd, 0x7d,
	0x09, 0xd5, 0xd2, 0xac, 0xc3, 0x68, 0xa6, 0x74, 0xa9, 0x66, 0x7e, 0x51, 0x42, 0xaf, 0x9c, 0xd1,
	0x30, 0x99, 0x92, 0x7e, 0x88, 0x83, 0xe9, 0x90, 0x4c, 0x67, 0x21, 0xe6, 0x44, 0xe7, 0xc4, 0x3f,
	0x68, 0xdb, 0x55, 0xb6, 0x76, 0x5a, 0x65, 0xfb, 0x14, 0xcf, 0x02, 0x11, 0xd4, 0xdb, 0x67, 0xef,
	0xb4, 0x8f, 0x84, 0x3f, 0x11, 0xd1, 0x8f, 0x1f, 0x67, 0x62, 0xb2, 0x30, 0x77, 0xbc, 0x28, 0x1b,
	0x96, 0x75, 0xd8, 0xfa, 0x72, 0x0d, 0x6d, 0xe8, 0xd4, 0x57, 0xf8, 0x87, 0x93, 0xc4, 0x9b, 0x90,
	0xd4, 0x97, 0x18, 0xff, 0xd0, 0x93, 0xad, 0xa0, 0xa9, 0xf2, 0x6c, 0x32, 0x4e, 0xa2, 0x89, 0x1b,
	0x3c, 0x23, 0xda, 0xa6, 0xb2, 0xb3, 0x49, 0x4a, 0x80, 0x0c, 0x53, 0xb4, 0xf8, 0xf2, 0xd5, 0x2c,
	0x3e, 0xef, 0x87, 0xd6, 0x0b, 0x7e, 0xa8, 0xbb, 0xc4, 0x0f, 0x2d, 0xdb, 0xeb, 0x95, 0x55, 0xf7,
	0x7a, 0xeb, 0xdf, 0xd7, 0xd0, 0xf6, 0x23, 0x4a, 0x47, 0x21, 0xd9, 0x9f, 0xb2, 0x54, 0x37, 0x0f,
	0xd0, 0xe6, 0x64, 0xca, 0xfa, 0xf1, 0x7c, 0xc6, 0xe9, 0x3e, 0x99, 0x17, 0x0f, 0xdf, 0xfb, 0x16,
	0x0d, 0x72, 0x48, 0x11, 0xd9, 0x54, 0xa9, 0x02, 0x82, 0x68, 0xa4, 0xd5, 0x65, 0x22, 0xdb, 0xbe,
	0xa1, 0x80, 0x85, 0x12, 0x0a, 0x9b, 0x4c, 0xd9, 0x01, 0xf5, 0xf0, 0xb2, 0x62, 0xd6, 0x7e, 0x46,
	0x02, 0x1b, 0xa7, 0xbb, 0x3a, 0x8a, 0xe9, 0x67, 0xc4, 0x4b, 0x8f, 0xe3, 0x76, 0x57, 0x9a, 0x02,
	0x16, 0xca, 0x5a, 0xf4, 0xca, 0x0b, 0x17, 0x7d, 0x99, 0x6e, 0xab, 0x2b, 0xeb, 0xb6, 0x81, 0xea,
	0xe6, 0x68, 0xd8, 0xfa, 0x00, 0xdd, 0xd9, 0x4f, 0x4e, 0x48, 0x1c, 0x11, 0x4e, 0xf4, 0x5e, 0x92,
	0xba, 0x96, 0xb9, 0x80, 0xd9, 0x85, 0xa5, 0x62, 0x2e, 0x60, 0xb6, 0xa0, 0x85, 0x6a, 0xfd, 0x77,
	0x19, 0xd5, 0x44, 0x1a, 0x28, 0x05, 0xfc, 0xa2, 0x84, 0xb6, 0x27, 0x05, 0xc9, 0xfa, 0x24, 0x3b,
	0x58, 0x35, 0x59, 0x5e, 0x36, 0xc2, 0xde, 0x1d, 0x31, 0xdd, 0x22, 0x05, 0x16, 0xfa, 0x74, 0xce,
	0xd0, 0xe6, 0xc8, 0xb2, 0x24, 0xbd, 0xbd, 0x7f, 0xbc, 0xf2, 0xd9, 0xb4, 0x60, 0x8d, 0xbd, 0x6d,
	0x61, 0x73, 0x76, 0x2b, 0xe4, 0xfa, 0x71, 0x3e, 0x43, 0x75, 0x9c, 0x56, 0xd4, 0xf4, 0x81, 0xf8,
	0x47, 0x2b, 0x1f, 0x35, 0xed, 0x92, 0x5c, 0x6f, 0x4b, 0x6c, 0x3a, 0xd3, 0x04, 0x99, 0x78, 0xe7,
	0x0c, 0x6d, 0x61, 0xbb, 0x4e, 0xa5, 0x4f, 0xcb, 0x3f, 0xba, 0xd6, 0xd1, 0x36, 0x15, 0xd2, 0xbb,
	0x2d, 0x3c, 0x6e, 0xae, 0x09, 0xf2, 0xdd, 0xb4, 0xfe, 0x65, 0x0d, 0xd5, 0xcd, 0x11, 0x72, 0x95,
	0x80, 0xf8, 0x5d, 0x54, 0xf3, 0x31, 0xc7, 0x27, 0x98, 0xa5, 0xde, 0xcb, 0x44, 0xb9, 0x81, 0x6e,
	0x07, 0x83, 0xc8, 0x92, 0x8c, 0xf2, 0x0b, 0x92, 0x8c, 0x23, 0x74, 0x27, 0x61, 0x24, 0xee, 0x2f,
	0x2f, 0x12, 0x9a, 0x60, 0xf4, 0x64, 0x09, 0x06, 0x96, 0x72, 0x0a, 0x0f, 0xc0, 0x43, 0xd6, 0xef,
	0xe6, 0xbc, 0x98, 0xf1, 0x00, 0xc3, 0x03, 0x37, 0x25, 0x81, 0x8d, 0x2b, 0x7a, 0xda, 0xea, 0x15,
	0x73, 0x8b, 0x7f, 0x28, 0xa1, 0x9b, 0xf9, 0x93, 0xbf, 0x38, 0x4e, 0x79, 0x34, 0x8a, 0x88, 0x27,
	0x3c, 0xcb, 0x13, 0x38, 0xb0, 0x76, 0x91, 0x75, 0x9c, 0xea, 0x2f, 0x42, 0x60, 0x19, 0x5f, 0xa6,
	0xc6, 0xb5, 0x17, 0xa8, 0xf1, 0x7a, 0x71, 0xa2, 0xf5, 0xcf, 0x65, 0x54, 0x55, 0xb5, 0x96, 0x2b,
	0x87, 0x30, 0x3b, 0x71, 0x5e, 0x5b, 0x21, 0x71, 0xfe, 0xff, 0xa8, 0x13, 0x2f, 0xcf, 0x35, 0x2b,
	0xdf, 0x44, 0xae, 0x79, 0x45, 0x7b, 0x10, 0x27, 0xc3, 0x53, 0x1a, 0x7b, 0x44, 0x64, 0x2c, 0x2e,
	0x9f, 0x87, 0x2a, 0xad, 0xaa, 0x65, 0x27, 0xc3, 0x9f, 0xe4, 0xa8, 0x50, 0x40, 0x0b, 0x0f, 0xae,
	0xcf, 0xd4, 0xae, 0x7b, 0x20, 0xf3, 0xa8, 0x5a, 0xe6, 0xc1, 0x07, 0x86, 0x02, 0x16, 0xaa, 0xf5,
	0x5f, 0xeb, 0xa8, 0x6e, 0xca, 0x1e, 0x72, 0x3f, 0x27, 0x7c, 0x9c, 0xd5, 0xb9, 0xb3, 0xfd, 0xac,
	0x9a, 0x21, 0xa5, 0xe7, 0x4b, 0xa5, 0x6b, 0x57, 0x28, 0x95, 0x2e, 0x5b, 0xa6, 0xf2, 0xca, 0xcb,
	0xf4, 0x26, 0xaa, 0xaa, 0x6a, 0x78, 0xf1, 0x7a, 0x43, 0x55, 0xcb, 0x41, 0x53, 0x2d, 0xe3, 0xa9,
	0xbc, 0xd0, 0x78, 0xec, 0xfa, 0x7b, 0xf5, 0xa5, 0xf5, 0xf7, 0x37, 0x51, 0xd5, 0xa7, 0x53, 0x1c,
	0x44, 0xc5, 0x2a, 0xc2, 0x40, 0xb6, 0x82, 0xa6, 0x8a, 0xa4, 0x76, 0xa6, 0x22, 0xbd, 0x22, 0x14,
	0x93, 0xda, 0x23, 0x9b, 0x08, 0x79, 0xac, 0x58, 0x04, 0x1e, 0x27, 0x4c, 0x8c, 0xa8, 0x9e, 0x5f,
	0x84, 0xa1, 0x6a, 0x86, 0x94, 0x2e, 0x63, 0xb6, 0xaa, 0x1f, 0x8b, 0x25, 0x43, 0x85, 0x98, 0x6d,
	0x28, 0x60, 0xa1, 0x64, 0xf5, 0x3f, 0xe1, 0x63, 0xdb, 0xca, 0x1b, 0x85, 0xea, 0x7f, 0x9e, 0x0c,
	0x45, 0x7c, 0xd1, 0xbe, 0x37, 0xaf, 0xe8, 0x31, 0x4e, 0x51, 0x7d, 0x78, 0xe0, 0x1e, 0xd1, 0x30,
	0xf0, 0xe6, 0xc2, 0x7e, 0x4c, 0x2e, 0xaf, 0x8d, 0xcd, 0xd8, 0x8f, 0xc9, 0xf9, 0x21, 0xc3, 0x38,
	0xf7, 0x50, 0xcd, 0xc3, 0xbd, 0x24, 0xf2, 0xb5, 0x3b, 0xdb, 0x54, 0x65, 0xc0, 0x7e, 0x57, 0xb5,
	0x81, 0xa1, 0xb6, 0xfe, 0xb5, 0x8c, 0x36, 0x9f, 0x44, 0x8c, 0xe0, 0x90, 0xc4, 0x69, 0x1a, 0xa9,
	0x92, 0x16, 0x77, 0x8c, 0x63, 0xa2, 0x62, 0x95, 0x75, 0x52, 0x76, 0x2d, 0x1a, 0xe4, 0x90, 0x42,
	0x59, 0xea, 0x7b, 0x38, 0x8e, 0x09, 0x1b, 0xd3, 0x50, 0x15, 0xd0, 0xcb, 0x99, 0xb2, 0xdc, 0x3c,
	0x19, 0x8a, 0x78, 0xe7, 0xa7, 0xc8, 0x89, 0x09, 0x8f, 0xe7, 0x47, 0x24, 0x0e, 0xa8, 0xef, 0x12,
	0x8f, 0x46, 0x3e, 0xd3, 0x5e, 0xf6, 0xf7, 0x52, 0xc7, 0x02, 0x0b, 0x88, 0xe7, 0xe7, 0xbb, 0x5b,
	0x3c, 0x98, 0x92, 0xf6, 0x20, 0xd1, 0x05, 0xb3, 0x25, 0x62, 0x9c, 0x47, 0xe8, 0xb6, 0x38, 0x9b,
	0xc9, 0x13, 0xfa, 0xc3, 0xa7, 0xea, 0x3a, 0x59, 0x27, 0xed, 0xe6, 0xe2, 0xf9, 0xa3, 0x22, 0x00,
	0x16, 0x79, 0x64, 0x55, 0x8a, 0xd3, 0x98, 0x00, 0xa5, 0x5c, 0x2e, 0xb5, 0x3e, 0x3e, 0x66, 0x55,
	0xa9, 0x1c, 0x15, 0x0a, 0x68, 0xe7, 0x13, 0xb4, 0x3e, 0xa5, 0x3e, 0xd1, 0x05, 0xf0, 0x95, 0x4b,
	0xc7, 0x69, 0x12, 0x99, 0x1d, 0xdb, 0x64, 0xb9, 0x51, 0xca, 0x6c, 0xfd, 0xe3, 0x1a, 0x6a, 0xc8,
	0xec, 0xc3, 0x25, 0xf1, 0x19, 0x89, 0x9d, 0x9f, 0xa3, 0xda, 0x94, 0x70, 0x2c, 0x92, 0x05, 0x9d,
	0x5f, 0xbe, 0xdd, 0x56, 0x2f, 0x38, 0xda, 0xf6, 0x0b, 0x8e, 0xf6, 0x6c, 0x32, 0x52, 0x1d, 0x0a,
	0xb4, 0x38, 0xbe, 0x7d, 0x74, 0x22, 0xb6, 0xd9, 0x21, 0xe1, 0x38, 0xdb, 0x25, 0x59, 0x1b, 0x18,
	0xa9, 0x0e, 0x46, 0xeb, 0x6c, 0x46, 0x3c, 0x9d, 0x39, 0xfe, 0xd1, 0xaa, 0xb3, 0xb1, 0x06, 0x9b,
	0x9f, 0x94, 0xf8, 0x02, 0x29, 0xda, 0x09, 0x72, 0x17, 0xbe, 0x8d, 0xbd, 0xee, 0x6f, 0xd2, 0x89,
	0x14, 0x64, 0xd5, 0x34, 0x73, 0x57, 0xc2, 0xad, 0x7f, 0x2b, 0xa1, 0x5b, 0x16, 0xfa, 0x20, 0x60,
	0xdc, 0xf9, 0xd9, 0x82, 0x0e, 0xdb, 0x57, 0xd3, 0xa1, 0xe0, 0x96, 0x1a, 0x34, 0x7e, 0x32, 0x6d,
	0xb1, 0xf4, 0xf7, 0x73, 0x54, 0x09, 0x38, 0x99, 0x8a, 0xd4, 0xbb, 0x7c, 0xaf, 0xb1, 0xf7, 0xc3,
	0xdf, 0x60, 0x6e, 0x59, 0xd2, 0xf2, 0x58, 0x48, 0x04, 0x25, 0xb8, 0xf5, 0x77, 0xb5, 0xdc, 0x9c,
	0xe4, 0x36, 0xbf, 0x87, 0x6a, 0x31, 0x99, 0x85, 0x81, 0x87, 0xd5, 0x16, 0xaf, 0x28, 0x0f, 0x01,
	0xba, 0x0d, 0x0c, 0xd5, 0xf9, 0x33, 0xb4, 0x71, 0xa6, 0xcb, 0x88, 0x2a, 0x74, 0xf5, 0x53, 0x17,
	0xab, 0x2b, 0x86, 0xcf, 0xcf, 0x77, 0xdf, 0xb6, 0x9e, 0x33, 0xe1, 0xd9, 0x8c, 0x79, 0xd4, 0x27,
	0x9d, 0x11, 0xed, 0x90, 0xc8, 0xa3, 0x7e, 0x10, 0x8d, 0x3a, 0x9f, 0x31, 0x1a, 0x75, 0xf8, 0x7c,
	0x46, 0x58, 0xdb, 0xe5, 0xf1, 0x9f, 0x52, 0x48, 0x65, 0x3a, 0xc7, 0x68, 0x53, 0x3d, 0x44, 0x70,
	0x69, 0x12, 0x7b, 0x44, 0xaf, 0xf0, 0x5d, 0x4b, 0xc1, 0x6d, 0x8f, 0xc6, 0x44, 0xa8, 0x53, 0x95,
	0x0c, 0x14, 0x4e, 0x1d, 0x30, 0xfa, 0x16, 0x27, 0xe4, 0xe4, 0x38, 0x1f, 0xa3, 0x86, 0x50, 0xaf,
	0xfa, 0x52, 0x6f, 0x61, 0xae, 0x22, 0x36, 0x7b, 0x8f, 0x91, 0x31, 0x83, 0x2d, 0xc9, 0x19, 0xa2,
	0x32, 0x0f, 0xd9, 0x75, 0xaf, 0xc7, 0x8c, 0x53, 0x57, 0xd7, 0x78, 0xc3, 0x03, 0x17, 0x84, 0x38,
	0x67, 0x8a, 0x36, 0x4e, 0xd4, 0x25, 0xa7, 0x76, 0x0b, 0xbd, 0x55, 0x25, 0x2f, 0xde, 0x91, 0x66,
	0xc1, 0x50, 0xd3, 0x20, 0xed, 0xc3, 0x39, 0x45, 0xb5, 0x44, 0x7b, 0x7d, 0x7d, 0x39, 0xb6, 0xf2,
	0x2d, 0x93, 0x1d, 0x35, 0x94, 0xf1, 0xa4, 0x2d, 0x60, 0x64, 0x3b, 0x9f, 0xa3, 0x06, 0x36, 0x4f,
	0x31, 0x58, 0xb3, 0x26, 0x57, 0xe1, 0x5a, 0x2f, 0x58, 0x94, 0x08, 0xeb, 0x76, 0x3b, 0x13, 0x0b,
	0x76, 0x1f, 0xce, 0x27, 0x68, 0x43, 0x3f, 0x17, 0xd3, 0xf7, 0x67, 0xf7, 0xf3, 0xb5, 0xaa, 0xec,
	0x2d, 0xd9, 0xa7, 0xf2, 0x2d, 0x99, 0x5d, 0xb3, 0xea, 0x8a, 0x06, 0x39, 0xa1, 0x86, 0x50, 0xdb,
	0xa1, 0x82, 0x42, 0x2a, 0xd0, 0x19, 0xa3, 0xc6, 0x8c, 0xfa, 0xa6, 0x16, 0xa6, 0xae, 0xce, 0xde,
	0xb9, 0x42, 0x2d, 0x2c, 0x63, 0x92, 0xd2, 0xcd, 0x2c, 0x2c, 0x02, 0xd8, 0xa2, 0x9d, 0xa7, 0x22,
	0x98, 0xaa, 0x8b, 0x90, 0xb4, 0x37, 0x75, 0x97, 0xf6, 0xee, 0xcb, 0x7b, 0x73, 0xf3, 0x8c, 0xb2,
	0x47, 0x2b, 0x06, 0xe7, 0x88, 0x50, 0xec, 0xa6, 0xf5, 0xcb, 0x0a, 0xba, 0xbd, 0xe0, 0x2f, 0x45,
	0xca, 0x4f, 0x4f, 0x04, 0x94, 0xf8, 0x8f, 0xd4, 0xf3, 0x39, 0xe1, 0x10, 0x54, 0x72, 0x60, 0x52,
	0xfe, 0x8f, 0x16, 0x10, 0xb0, 0x84, 0xcb, 0xb9, 0x8f, 0x2a, 0xb3, 0x71, 0x76, 0xb6, 0x7d, 0x23,
	0x75, 0x5a, 0x47, 0xa2, 0xf1, 0xb9, 0xd8, 0xd6, 0x61, 0xc2, 0x38, 0x89, 0xe5, 0x37, 0x28, 0xac,
	0xc8, 0xa3, 0x82, 0x28, 0x10, 0xd9, 0x6d, 0xf0, 0xcc, 0x14, 0xfd, 0x8d, 0x1e, 0x1f, 0x67, 0x24,
	0xb0, 0x71, 0xd6, 0xc5, 0x93, 0x2c, 0xd5, 0xac, 0x2f, 0xbd, 0x78, 0x52, 0x4f, 0x24, 0x2c, 0x9c,
	0x48, 0x16, 0xd5, 0x53, 0x90, 0x23, 0x1a, 0x73, 0x5d, 0xf2, 0x37, 0x61, 0xb0, 0x6f, 0x28, 0x60,
	0xa1, 0x9c, 0x18, 0x35, 0xa4, 0xdd, 0x2a, 0x8d, 0xe9, 0x6d, 0x7c, 0x4d, 0x77, 0xae, 0x82, 0x94,
	0x19, 0xa7, 0xd5, 0x08, 0x76, 0x27, 0xce, 0xf7, 0xd0, 0x66, 0x32, 0xf3, 0x31, 0x27, 0xfe, 0x87,
	0xd4, 0x27, 0xe9, 0xb3, 0x37, 0xe9, 0x1b, 0x9f, 0x58, 0xed, 0x90, 0x43, 0x39, 0x3f, 0x43, 0x48,
	0xa4, 0x44, 0x81, 0x58, 0x8d, 0x74, 0x53, 0xde, 0xcb, 0xdb, 0x95, 0x9a, 0xd7, 0xa7, 0x23, 0x9a,
	0x1a, 0x55, 0x3f, 0x65, 0xb0, 0xf4, 0x60, 0x64, 0x80, 0x25, 0x4f, 0xd6, 0xb6, 0x70, 0xe1, 0xdd,
	0x57, 0xb3, 0x2e, 0x3b, 0xf9, 0xf1, 0xf5, 0x77, 0xbe, 0x56, 0x49, 0xf6, 0x42, 0xa5, 0x40, 0x81,
	0x85, 0x3e, 0x5b, 0x7f, 0x5b, 0x42, 0xb6, 0xe6, 0xc4, 0x89, 0x04, 0x7b, 0x3c, 0x38, 0x23, 0xc5,
	0xa3, 0x77, 0x57, 0xb6, 0x82, 0xa6, 0x3a, 0xbf, 0x8b, 0x36, 0x18, 0xc7, 0x91, 0x7f, 0x32, 0x97,
	0x31, 0xb9, 0xae, 0x9c, 0x81, 0xab, 0x9a, 0x20, 0xa5, 0x39, 0x2d, 0x54, 0x95, 0x5e, 0x4e, 0x18,
	0xa3, 0x40, 0xc9, 0x9b, 0x6a, 0x57, 0xb6, 0x80, 0xa6, 0x88, 0x30, 0xab, 0x7d, 0xa1, 0xaf, 0x9f,
	0x63, 0xda, 0x9e, 0xd2, 0x37, 0x9e, 0xd2, 0xef, 0xb5, 0xbf, 0xfa, 0x7a, 0xe7, 0xc6, 0xaf, 0xbe,
	0xde, 0xb9, 0xf1, 0xeb, 0xaf, 0x77, 0x6e, 0xfc, 0xc5, 0xc5, 0x4e, 0xe9, 0xab, 0x8b, 0x9d, 0xd2,
	0xaf, 0x2e, 0x76, 0x4a, 0xbf, 0xbe, 0xd8, 0x29, 0xfd, 0xc7, 0xc5, 0x4e, 0xe9, 0xcb, 0xff, 0xdc,
	0xb9, 0xf1, 0x49, 0x2d, 0xd5, 0xcc, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x11, 0x01, 0xed, 0x82,
	0xb2, 0x2c, 0x00, 0x00,
}

func (m *AuthConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PassthroughRequestHeaders) > 0 {
		for iNdEx := len(m.PassthroughRequestHeaders) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PassthroughRequestHeaders[iNdEx])
			copy(dAtA[i:], m.PassthroughRequestHeaders[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.PassthroughRequestHeaders[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	i -= len(m.ListingVisibility)
	copy(dAtA[i:], m.ListingVisibility)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ListingVisibility)))
	i--
	dAtA[i] = 0x32
	if len(m.AuditNonHMACResponseKeys) > 0 {
		for iNdEx := len(m.AuditNonHMACResponseKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuditNonHMACResponseKeys[iNdEx])
			copy(dAtA[i:], m.AuditNonHMACResponseKeys[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.AuditNonHMACResponseKeys[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AuditNonHMACRequestKeys) > 0 {
		for iNdEx := len(m.AuditNonHMACRequestKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuditNonHMACRequestKeys[iNdEx])
			copy(dAtA[i:], m.AuditNonHMACRequestKeys[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.AuditNonHMACRequestKeys[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.PluginName)
	copy(dAtA[i:], m.PluginName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PluginName)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.MaxLeaseTTL)
	copy(dAtA[i:], m.MaxLeaseTTL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MaxLeaseTTL)))
	i--
	dAtA[i] = 0x12
	i -= len(m.DefaultLeaseTTL)
	copy(dAtA[i:], m.DefaultLeaseTTL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DefaultLeaseTTL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AuthMethod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMethod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMethod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Local {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i -= len(m.PluginName)
	copy(dAtA[i:], m.PluginName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PluginName)))
	i--
	dAtA[i] = 0x2a
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.Description)
	copy(dAtA[i:], m.Description)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Description)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AuthMethodStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthMethodStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthMethodStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Reason)
	copy(dAtA[i:], m.Reason)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Reason)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Status)
	copy(dAtA[i:], m.Status)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Status)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Type)
	copy(dAtA[i:], m.Type)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Type)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AwsKmsSsmSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwsKmsSsmSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AwsKmsSsmSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Endpoint)
	copy(dAtA[i:], m.Endpoint)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Endpoint)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.CredentialSecret)
	copy(dAtA[i:], m.CredentialSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialSecret)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.SsmKeyPrefix)
	copy(dAtA[i:], m.SsmKeyPrefix)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SsmKeyPrefix)))
	i--
	dAtA[i] = 0x12
	i -= len(m.KmsKeyID)
	copy(dAtA[i:], m.KmsKeyID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KmsKeyID)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AzureKeyVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureKeyVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureKeyVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.UseManagedIdentity {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x30
	i -= len(m.AADClientSecret)
	copy(dAtA[i:], m.AADClientSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AADClientSecret)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.ClientCertSecret)
	copy(dAtA[i:], m.ClientCertSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ClientCertSecret)))
	i--
	dAtA[i] = 0x22
	i -= len(m.TenantID)
	copy(dAtA[i:], m.TenantID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TenantID)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Cloud)
	copy(dAtA[i:], m.Cloud)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Cloud)))
	i--
	dAtA[i] = 0x12
	i -= len(m.VaultBaseURL)
	copy(dAtA[i:], m.VaultBaseURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VaultBaseURL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AzureSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AzureSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AzureSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxParallel))
	i--
	dAtA[i] = 0x20
	i -= len(m.Container)
	copy(dAtA[i:], m.Container)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Container)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.AccountKeySecret)
	copy(dAtA[i:], m.AccountKeySecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AccountKeySecret)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AccountName)
	copy(dAtA[i:], m.AccountName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AccountName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BackendStorageSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackendStorageSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BackendStorageSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Consul != nil {
		{
			size, err := m.Consul.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Swift != nil {
		{
			size, err := m.Swift.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.DynamoDB != nil {
		{
			size, err := m.DynamoDB.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MySQL != nil {
		{
			size, err := m.MySQL.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.PostgreSQL != nil {
		{
			size, err := m.PostgreSQL.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Azure != nil {
		{
			size, err := m.Azure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.S3 != nil {
		{
			size, err := m.S3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Gcs != nil {
		{
			size, err := m.Gcs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Etcd != nil {
		{
			size, err := m.Etcd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Inmem != nil {
		{
			size, err := m.Inmem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsulSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsulSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsulSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.TLSSkipVerify {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x80
	i -= len(m.TLSMinVersion)
	copy(dAtA[i:], m.TLSMinVersion)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSMinVersion)))
	i--
	dAtA[i] = 0x7a
	i -= len(m.TLSSecretName)
	copy(dAtA[i:], m.TLSSecretName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSSecretName)))
	i--
	dAtA[i] = 0x72
	i -= len(m.LockWaitTime)
	copy(dAtA[i:], m.LockWaitTime)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.LockWaitTime)))
	i--
	dAtA[i] = 0x6a
	i -= len(m.SessionTTL)
	copy(dAtA[i:], m.SessionTTL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionTTL)))
	i--
	dAtA[i] = 0x62
	i -= len(m.ACLTokenSecretName)
	copy(dAtA[i:], m.ACLTokenSecretName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ACLTokenSecretName)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.ServiceAddress)
	copy(dAtA[i:], m.ServiceAddress)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceAddress)))
	i--
	dAtA[i] = 0x52
	i -= len(m.ServiceTags)
	copy(dAtA[i:], m.ServiceTags)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceTags)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.Service)
	copy(dAtA[i:], m.Service)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Service)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Scheme)
	copy(dAtA[i:], m.Scheme)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Scheme)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x32
	i -= len(m.MaxParallel)
	copy(dAtA[i:], m.MaxParallel)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MaxParallel)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.DisableRegistration)
	copy(dAtA[i:], m.DisableRegistration)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DisableRegistration)))
	i--
	dAtA[i] = 0x22
	i -= len(m.ConsistencyMode)
	copy(dAtA[i:], m.ConsistencyMode)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConsistencyMode)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.CheckTimeout)
	copy(dAtA[i:], m.CheckTimeout)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CheckTimeout)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Address)
	copy(dAtA[i:], m.Address)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Address)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DynamoDBSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DynamoDBSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DynamoDBSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxParallel))
	i--
	dAtA[i] = 0x48
	i -= len(m.SessionTokenSecret)
	copy(dAtA[i:], m.SessionTokenSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionTokenSecret)))
	i--
	dAtA[i] = 0x42
	i -= len(m.CredentialSecret)
	copy(dAtA[i:], m.CredentialSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialSecret)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.WriteCapacity))
	i--
	dAtA[i] = 0x28
	i = encodeVarintGenerated(dAtA, i, uint64(m.ReadCapacity))
	i--
	dAtA[i] = 0x20
	i--
	if m.HaEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Endpoint)
	copy(dAtA[i:], m.Endpoint)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Endpoint)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EtcdSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EtcdSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EtcdSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TLSSecretName)
	copy(dAtA[i:], m.TLSSecretName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSSecretName)))
	i--
	dAtA[i] = 0x42
	i -= len(m.CredentialSecretName)
	copy(dAtA[i:], m.CredentialSecretName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialSecretName)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.DiscoverySrv)
	copy(dAtA[i:], m.DiscoverySrv)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.DiscoverySrv)))
	i--
	dAtA[i] = 0x32
	i--
	if m.Sync {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0x22
	i--
	if m.HAEnable {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.EtcdApi)
	copy(dAtA[i:], m.EtcdApi)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.EtcdApi)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Address)
	copy(dAtA[i:], m.Address)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Address)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FileSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VolumeClaimTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GcsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GcsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GcsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.CredentialSecret)
	copy(dAtA[i:], m.CredentialSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialSecret)))
	i--
	dAtA[i] = 0x2a
	i--
	if m.HAEnabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxParallel))
	i--
	dAtA[i] = 0x18
	i -= len(m.ChunkSize)
	copy(dAtA[i:], m.ChunkSize)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ChunkSize)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Bucket)
	copy(dAtA[i:], m.Bucket)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Bucket)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GoogleKmsGcsSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GoogleKmsGcsSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GoogleKmsGcsSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.CredentialSecret)
	copy(dAtA[i:], m.CredentialSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialSecret)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Bucket)
	copy(dAtA[i:], m.Bucket)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Bucket)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.KmsProject)
	copy(dAtA[i:], m.KmsProject)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KmsProject)))
	i--
	dAtA[i] = 0x22
	i -= len(m.KmsLocation)
	copy(dAtA[i:], m.KmsLocation)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KmsLocation)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.KmsKeyRing)
	copy(dAtA[i:], m.KmsKeyRing)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KmsKeyRing)))
	i--
	dAtA[i] = 0x12
	i -= len(m.KmsCryptoKey)
	copy(dAtA[i:], m.KmsCryptoKey)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.KmsCryptoKey)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InmemSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InmemSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InmemSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *KubernetesSecretSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesSecretSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesSecretSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.SecretName)
	copy(dAtA[i:], m.SecretName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecretName)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ModeSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModeSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModeSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AzureKeyVault != nil {
		{
			size, err := m.AzureKeyVault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AwsKmsSsm != nil {
		{
			size, err := m.AwsKmsSsm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.GoogleKmsGcs != nil {
		{
			size, err := m.GoogleKmsGcs.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.KubernetesSecret != nil {
		{
			size, err := m.KubernetesSecret.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MySQLSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MySQLSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MySQLSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxParallel))
	i--
	dAtA[i] = 0x30
	i -= len(m.TLSCASecret)
	copy(dAtA[i:], m.TLSCASecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSCASecret)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.UserCredentialSecret)
	copy(dAtA[i:], m.UserCredentialSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserCredentialSecret)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Database)
	copy(dAtA[i:], m.Database)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Database)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Address)
	copy(dAtA[i:], m.Address)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Address)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PostgreSQLSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostgreSQLSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PostgreSQLSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxParallel))
	i--
	dAtA[i] = 0x18
	i -= len(m.Table)
	copy(dAtA[i:], m.Table)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Table)))
	i--
	dAtA[i] = 0x12
	i -= len(m.ConnectionURLSecret)
	copy(dAtA[i:], m.ConnectionURLSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ConnectionURLSecret)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *S3Spec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S3Spec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *S3Spec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.DisableSSL {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x40
	i--
	if m.ForcePathStyle {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxParallel))
	i--
	dAtA[i] = 0x30
	i -= len(m.SessionTokenSecret)
	copy(dAtA[i:], m.SessionTokenSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SessionTokenSecret)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.CredentialSecret)
	copy(dAtA[i:], m.CredentialSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialSecret)))
	i--
	dAtA[i] = 0x22
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Endpoint)
	copy(dAtA[i:], m.Endpoint)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Endpoint)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Bucket)
	copy(dAtA[i:], m.Bucket)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Bucket)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SwiftSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwiftSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwiftSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintGenerated(dAtA, i, uint64(m.MaxParallel))
	i--
	dAtA[i] = 0x60
	i -= len(m.AuthTokenSecret)
	copy(dAtA[i:], m.AuthTokenSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AuthTokenSecret)))
	i--
	dAtA[i] = 0x5a
	i -= len(m.StorageURL)
	copy(dAtA[i:], m.StorageURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.StorageURL)))
	i--
	dAtA[i] = 0x52
	i -= len(m.TrustID)
	copy(dAtA[i:], m.TrustID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TrustID)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.ProjectDomain)
	copy(dAtA[i:], m.ProjectDomain)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ProjectDomain)))
	i--
	dAtA[i] = 0x42
	i -= len(m.Domain)
	copy(dAtA[i:], m.Domain)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Domain)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.TenantID)
	copy(dAtA[i:], m.TenantID)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TenantID)))
	i--
	dAtA[i] = 0x32
	i -= len(m.Region)
	copy(dAtA[i:], m.Region)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Region)))
	i--
	dAtA[i] = 0x2a
	i -= len(m.Tenant)
	copy(dAtA[i:], m.Tenant)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Tenant)))
	i--
	dAtA[i] = 0x22
	i -= len(m.CredentialSecret)
	copy(dAtA[i:], m.CredentialSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.CredentialSecret)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Container)
	copy(dAtA[i:], m.Container)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Container)))
	i--
	dAtA[i] = 0x12
	i -= len(m.AuthURL)
	copy(dAtA[i:], m.AuthURL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.AuthURL)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TLSPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLSPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLSPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CABundle != nil {
		i -= len(m.CABundle)
		copy(dAtA[i:], m.CABundle)
		i = encodeVarintGenerated(dAtA, i, uint64(len(m.CABundle)))
		i--
		dAtA[i] = 0x12
	}
	i -= len(m.TLSSecret)
	copy(dAtA[i:], m.TLSSecret)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TLSSecret)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UnsealerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsealerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnsealerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Mode.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	i--
	if m.StoreRootToken {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i--
	if m.OverwriteExisting {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i = encodeVarintGenerated(dAtA, i, uint64(m.RetryPeriodSeconds))
	i--
	dAtA[i] = 0x18
	i = encodeVarintGenerated(dAtA, i, uint64(m.SecretThreshold))
	i--
	dAtA[i] = 0x10
	i = encodeVarintGenerated(dAtA, i, uint64(m.SecretShares))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *VaultServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultServerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultServerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultServerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultServerSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultServerSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultServerSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ServiceTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.PodTemplate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Monitor != nil {
		{
			size, err := m.Monitor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AuthMethods) > 0 {
		for iNdEx := len(m.AuthMethods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthMethods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Unsealer != nil {
		{
			size, err := m.Unsealer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Backend.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.TLS != nil {
		{
			size, err := m.TLS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DataSources) > 0 {
		for iNdEx := len(m.DataSources) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataSources[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ConfigSource != nil {
		{
			size, err := m.ConfigSource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	i -= len(m.Version)
	copy(dAtA[i:], m.Version)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Version)))
	i--
	dAtA[i] = 0x12
	if m.Replicas != nil {
		i = encodeVarintGenerated(dAtA, i, uint64(*m.Replicas))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VaultServerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultServerStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultServerStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthMethodStatus) > 0 {
		for iNdEx := len(m.AuthMethodStatus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuthMethodStatus[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.UpdatedNodes) > 0 {
		for iNdEx := len(m.UpdatedNodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdatedNodes[iNdEx])
			copy(dAtA[i:], m.UpdatedNodes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.UpdatedNodes[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.VaultStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.ClientPort))
	i--
	dAtA[i] = 0x28
	i -= len(m.ServiceName)
	copy(dAtA[i:], m.ServiceName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceName)))
	i--
	dAtA[i] = 0x22
	i--
	if m.Initialized {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *VaultStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unsealed) > 0 {
		for iNdEx := len(m.Unsealed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Unsealed[iNdEx])
			copy(dAtA[i:], m.Unsealed[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Unsealed[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Sealed) > 0 {
		for iNdEx := len(m.Sealed) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Sealed[iNdEx])
			copy(dAtA[i:], m.Sealed[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Sealed[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Standby) > 0 {
		for iNdEx := len(m.Standby) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Standby[iNdEx])
			copy(dAtA[i:], m.Standby[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Standby[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	i -= len(m.Active)
	copy(dAtA[i:], m.Active)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Active)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DefaultLeaseTTL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MaxLeaseTTL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PluginName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.AuditNonHMACRequestKeys) > 0 {
		for _, s := range m.AuditNonHMACRequestKeys {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.AuditNonHMACResponseKeys) > 0 {
		for _, s := range m.AuditNonHMACResponseKeys {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.ListingVisibility)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.PassthroughRequestHeaders) > 0 {
		for _, s := range m.PassthroughRequestHeaders {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *AuthMethod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Description)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = len(m.PluginName)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *AuthMethodStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Status)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Reason)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AwsKmsSsmSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KmsKeyID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SsmKeyPrefix)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CredentialSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Endpoint)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *AzureKeyVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultBaseURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Cloud)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TenantID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ClientCertSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AADClientSecret)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	return n
}

func (m *AzureSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccountName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AccountKeySecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Container)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxParallel))
	return n
}

func (m *BackendStorageSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inmem != nil {
		l = m.Inmem.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Etcd != nil {
		l = m.Etcd.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Gcs != nil {
		l = m.Gcs.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.S3 != nil {
		l = m.S3.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Azure != nil {
		l = m.Azure.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.PostgreSQL != nil {
		l = m.PostgreSQL.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.MySQL != nil {
		l = m.MySQL.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.DynamoDB != nil {
		l = m.DynamoDB.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Swift != nil {
		l = m.Swift.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.Consul != nil {
		l = m.Consul.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *ConsulSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CheckTimeout)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ConsistencyMode)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.DisableRegistration)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MaxParallel)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Scheme)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Service)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceTags)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ServiceAddress)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ACLTokenSecretName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SessionTTL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.LockWaitTime)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TLSSecretName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TLSMinVersion)
	n += 1 + l + sovGenerated(uint64(l))
	n += 3
	return n
}

func (m *DynamoDBSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 1 + sovGenerated(uint64(m.ReadCapacity))
	n += 1 + sovGenerated(uint64(m.WriteCapacity))
	l = len(m.Table)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CredentialSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SessionTokenSecret)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxParallel))
	return n
}

func (m *EtcdSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.EtcdApi)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.DiscoverySrv)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CredentialSecretName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TLSSecretName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *FileSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = m.VolumeClaimTemplate.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GcsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ChunkSize)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxParallel))
	n += 2
	l = len(m.CredentialSecret)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *GoogleKmsGcsSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KmsCryptoKey)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KmsKeyRing)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KmsLocation)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.KmsProject)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Bucket)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CredentialSecret)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *InmemSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *KubernetesSecretSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SecretName)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ModeSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KubernetesSecret != nil {
		l = m.KubernetesSecret.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.GoogleKmsGcs != nil {
		l = m.GoogleKmsGcs.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AwsKmsSsm != nil {
		l = m.AwsKmsSsm.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AzureKeyVault != nil {
		l = m.AzureKeyVault.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *MySQLSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Database)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Table)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.UserCredentialSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TLSCASecret)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxParallel))
	return n
}

func (m *PostgreSQLSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionURLSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Table)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxParallel))
	return n
}

func (m *S3Spec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Endpoint)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CredentialSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.SessionTokenSecret)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxParallel))
	n += 2
	n += 2
	return n
}

func (m *SwiftSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Container)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.CredentialSecret)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Tenant)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Region)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TenantID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Domain)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.ProjectDomain)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.TrustID)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.StorageURL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.AuthTokenSecret)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.MaxParallel))
	return n
}

func (m *TLSPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TLSSecret)
	n += 1 + l + sovGenerated(uint64(l))
	if m.CABundle != nil {
		l = len(m.CABundle)
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *UnsealerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.SecretShares))
	n += 1 + sovGenerated(uint64(m.SecretThreshold))
	n += 1 + sovGenerated(uint64(m.RetryPeriodSeconds))
	n += 2
	n += 2
	l = m.Mode.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VaultServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VaultServerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VaultServerSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Replicas != nil {
		n += 1 + sovGenerated(uint64(*m.Replicas))
	}
	l = len(m.Version)
	n += 1 + l + sovGenerated(uint64(l))
	if m.ConfigSource != nil {
		l = m.ConfigSource.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.DataSources) > 0 {
		for _, e := range m.DataSources {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.TLS != nil {
		l = m.TLS.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.Backend.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if m.Unsealer != nil {
		l = m.Unsealer.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if len(m.AuthMethods) > 0 {
		for _, e := range m.AuthMethods {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if m.Monitor != nil {
		l = m.Monitor.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	l = m.PodTemplate.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.ServiceTemplate.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VaultServerStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	l = len(m.ServiceName)
	n += 1 + l + sovGenerated(uint64(l))
	n += 1 + sovGenerated(uint64(m.ClientPort))
	l = m.VaultStatus.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.UpdatedNodes) > 0 {
		for _, s := range m.UpdatedNodes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.AuthMethodStatus) > 0 {
		for _, e := range m.AuthMethodStatus {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VaultStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Active)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Standby) > 0 {
		for _, s := range m.Standby {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Sealed) > 0 {
		for _, s := range m.Sealed {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Unsealed) > 0 {
		for _, s := range m.Unsealed {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AuthConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthConfig{`,
		`DefaultLeaseTTL:` + fmt.Sprintf("%v", this.DefaultLeaseTTL) + `,`,
		`MaxLeaseTTL:` + fmt.Sprintf("%v", this.MaxLeaseTTL) + `,`,
		`PluginName:` + fmt.Sprintf("%v", this.PluginName) + `,`,
		`AuditNonHMACRequestKeys:` + fmt.Sprintf("%v", this.AuditNonHMACRequestKeys) + `,`,
		`AuditNonHMACResponseKeys:` + fmt.Sprintf("%v", this.AuditNonHMACResponseKeys) + `,`,
		`ListingVisibility:` + fmt.Sprintf("%v", this.ListingVisibility) + `,`,
		`PassthroughRequestHeaders:` + fmt.Sprintf("%v", this.PassthroughRequestHeaders) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMethod) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMethod{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Config:` + strings.Replace(this.Config.String(), "AuthConfig", "AuthConfig", 1) + `,`,
		`PluginName:` + fmt.Sprintf("%v", this.PluginName) + `,`,
		`Local:` + fmt.Sprintf("%v", this.Local) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AuthMethodStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AuthMethodStatus{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AwsKmsSsmSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AwsKmsSsmSpec{`,
		`KmsKeyID:` + fmt.Sprintf("%v", this.KmsKeyID) + `,`,
		`SsmKeyPrefix:` + fmt.Sprintf("%v", this.SsmKeyPrefix) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`CredentialSecret:` + fmt.Sprintf("%v", this.CredentialSecret) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureKeyVault) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureKeyVault{`,
		`VaultBaseURL:` + fmt.Sprintf("%v", this.VaultBaseURL) + `,`,
		`Cloud:` + fmt.Sprintf("%v", this.Cloud) + `,`,
		`TenantID:` + fmt.Sprintf("%v", this.TenantID) + `,`,
		`ClientCertSecret:` + fmt.Sprintf("%v", this.ClientCertSecret) + `,`,
		`AADClientSecret:` + fmt.Sprintf("%v", this.AADClientSecret) + `,`,
		`UseManagedIdentity:` + fmt.Sprintf("%v", this.UseManagedIdentity) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AzureSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AzureSpec{`,
		`AccountName:` + fmt.Sprintf("%v", this.AccountName) + `,`,
		`AccountKeySecret:` + fmt.Sprintf("%v", this.AccountKeySecret) + `,`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BackendStorageSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BackendStorageSpec{`,
		`Inmem:` + strings.Replace(this.Inmem.String(), "InmemSpec", "InmemSpec", 1) + `,`,
		`Etcd:` + strings.Replace(this.Etcd.String(), "EtcdSpec", "EtcdSpec", 1) + `,`,
		`Gcs:` + strings.Replace(this.Gcs.String(), "GcsSpec", "GcsSpec", 1) + `,`,
		`S3:` + strings.Replace(this.S3.String(), "S3Spec", "S3Spec", 1) + `,`,
		`Azure:` + strings.Replace(this.Azure.String(), "AzureSpec", "AzureSpec", 1) + `,`,
		`PostgreSQL:` + strings.Replace(this.PostgreSQL.String(), "PostgreSQLSpec", "PostgreSQLSpec", 1) + `,`,
		`MySQL:` + strings.Replace(this.MySQL.String(), "MySQLSpec", "MySQLSpec", 1) + `,`,
		`File:` + strings.Replace(this.File.String(), "FileSpec", "FileSpec", 1) + `,`,
		`DynamoDB:` + strings.Replace(this.DynamoDB.String(), "DynamoDBSpec", "DynamoDBSpec", 1) + `,`,
		`Swift:` + strings.Replace(this.Swift.String(), "SwiftSpec", "SwiftSpec", 1) + `,`,
		`Consul:` + strings.Replace(this.Consul.String(), "ConsulSpec", "ConsulSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConsulSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConsulSpec{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`CheckTimeout:` + fmt.Sprintf("%v", this.CheckTimeout) + `,`,
		`ConsistencyMode:` + fmt.Sprintf("%v", this.ConsistencyMode) + `,`,
		`DisableRegistration:` + fmt.Sprintf("%v", this.DisableRegistration) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Scheme:` + fmt.Sprintf("%v", this.Scheme) + `,`,
		`Service:` + fmt.Sprintf("%v", this.Service) + `,`,
		`ServiceTags:` + fmt.Sprintf("%v", this.ServiceTags) + `,`,
		`ServiceAddress:` + fmt.Sprintf("%v", this.ServiceAddress) + `,`,
		`ACLTokenSecretName:` + fmt.Sprintf("%v", this.ACLTokenSecretName) + `,`,
		`SessionTTL:` + fmt.Sprintf("%v", this.SessionTTL) + `,`,
		`LockWaitTime:` + fmt.Sprintf("%v", this.LockWaitTime) + `,`,
		`TLSSecretName:` + fmt.Sprintf("%v", this.TLSSecretName) + `,`,
		`TLSMinVersion:` + fmt.Sprintf("%v", this.TLSMinVersion) + `,`,
		`TLSSkipVerify:` + fmt.Sprintf("%v", this.TLSSkipVerify) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DynamoDBSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DynamoDBSpec{`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`HaEnabled:` + fmt.Sprintf("%v", this.HaEnabled) + `,`,
		`ReadCapacity:` + fmt.Sprintf("%v", this.ReadCapacity) + `,`,
		`WriteCapacity:` + fmt.Sprintf("%v", this.WriteCapacity) + `,`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`CredentialSecret:` + fmt.Sprintf("%v", this.CredentialSecret) + `,`,
		`SessionTokenSecret:` + fmt.Sprintf("%v", this.SessionTokenSecret) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EtcdSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EtcdSpec{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`EtcdApi:` + fmt.Sprintf("%v", this.EtcdApi) + `,`,
		`HAEnable:` + fmt.Sprintf("%v", this.HAEnable) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Sync:` + fmt.Sprintf("%v", this.Sync) + `,`,
		`DiscoverySrv:` + fmt.Sprintf("%v", this.DiscoverySrv) + `,`,
		`CredentialSecretName:` + fmt.Sprintf("%v", this.CredentialSecretName) + `,`,
		`TLSSecretName:` + fmt.Sprintf("%v", this.TLSSecretName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileSpec{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`VolumeClaimTemplate:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.VolumeClaimTemplate), "PersistentVolumeClaim", "v1.PersistentVolumeClaim", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GcsSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GcsSpec{`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`ChunkSize:` + fmt.Sprintf("%v", this.ChunkSize) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`HAEnabled:` + fmt.Sprintf("%v", this.HAEnabled) + `,`,
		`CredentialSecret:` + fmt.Sprintf("%v", this.CredentialSecret) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GoogleKmsGcsSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GoogleKmsGcsSpec{`,
		`KmsCryptoKey:` + fmt.Sprintf("%v", this.KmsCryptoKey) + `,`,
		`KmsKeyRing:` + fmt.Sprintf("%v", this.KmsKeyRing) + `,`,
		`KmsLocation:` + fmt.Sprintf("%v", this.KmsLocation) + `,`,
		`KmsProject:` + fmt.Sprintf("%v", this.KmsProject) + `,`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`CredentialSecret:` + fmt.Sprintf("%v", this.CredentialSecret) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InmemSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InmemSpec{`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesSecretSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesSecretSpec{`,
		`SecretName:` + fmt.Sprintf("%v", this.SecretName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ModeSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ModeSpec{`,
		`KubernetesSecret:` + strings.Replace(this.KubernetesSecret.String(), "KubernetesSecretSpec", "KubernetesSecretSpec", 1) + `,`,
		`GoogleKmsGcs:` + strings.Replace(this.GoogleKmsGcs.String(), "GoogleKmsGcsSpec", "GoogleKmsGcsSpec", 1) + `,`,
		`AwsKmsSsm:` + strings.Replace(this.AwsKmsSsm.String(), "AwsKmsSsmSpec", "AwsKmsSsmSpec", 1) + `,`,
		`AzureKeyVault:` + strings.Replace(this.AzureKeyVault.String(), "AzureKeyVault", "AzureKeyVault", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MySQLSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MySQLSpec{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Database:` + fmt.Sprintf("%v", this.Database) + `,`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`UserCredentialSecret:` + fmt.Sprintf("%v", this.UserCredentialSecret) + `,`,
		`TLSCASecret:` + fmt.Sprintf("%v", this.TLSCASecret) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PostgreSQLSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PostgreSQLSpec{`,
		`ConnectionURLSecret:` + fmt.Sprintf("%v", this.ConnectionURLSecret) + `,`,
		`Table:` + fmt.Sprintf("%v", this.Table) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *S3Spec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&S3Spec{`,
		`Bucket:` + fmt.Sprintf("%v", this.Bucket) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`CredentialSecret:` + fmt.Sprintf("%v", this.CredentialSecret) + `,`,
		`SessionTokenSecret:` + fmt.Sprintf("%v", this.SessionTokenSecret) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`ForcePathStyle:` + fmt.Sprintf("%v", this.ForcePathStyle) + `,`,
		`DisableSSL:` + fmt.Sprintf("%v", this.DisableSSL) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SwiftSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SwiftSpec{`,
		`AuthURL:` + fmt.Sprintf("%v", this.AuthURL) + `,`,
		`Container:` + fmt.Sprintf("%v", this.Container) + `,`,
		`CredentialSecret:` + fmt.Sprintf("%v", this.CredentialSecret) + `,`,
		`Tenant:` + fmt.Sprintf("%v", this.Tenant) + `,`,
		`Region:` + fmt.Sprintf("%v", this.Region) + `,`,
		`TenantID:` + fmt.Sprintf("%v", this.TenantID) + `,`,
		`Domain:` + fmt.Sprintf("%v", this.Domain) + `,`,
		`ProjectDomain:` + fmt.Sprintf("%v", this.ProjectDomain) + `,`,
		`TrustID:` + fmt.Sprintf("%v", this.TrustID) + `,`,
		`StorageURL:` + fmt.Sprintf("%v", this.StorageURL) + `,`,
		`AuthTokenSecret:` + fmt.Sprintf("%v", this.AuthTokenSecret) + `,`,
		`MaxParallel:` + fmt.Sprintf("%v", this.MaxParallel) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TLSPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TLSPolicy{`,
		`TLSSecret:` + fmt.Sprintf("%v", this.TLSSecret) + `,`,
		`CABundle:` + valueToStringGenerated(this.CABundle) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UnsealerSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UnsealerSpec{`,
		`SecretShares:` + fmt.Sprintf("%v", this.SecretShares) + `,`,
		`SecretThreshold:` + fmt.Sprintf("%v", this.SecretThreshold) + `,`,
		`RetryPeriodSeconds:` + fmt.Sprintf("%v", this.RetryPeriodSeconds) + `,`,
		`OverwriteExisting:` + fmt.Sprintf("%v", this.OverwriteExisting) + `,`,
		`StoreRootToken:` + fmt.Sprintf("%v", this.StoreRootToken) + `,`,
		`Mode:` + strings.Replace(strings.Replace(this.Mode.String(), "ModeSpec", "ModeSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultServer) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VaultServer{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v11.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "VaultServerSpec", "VaultServerSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "VaultServerStatus", "VaultServerStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultServerList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]VaultServer{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "VaultServer", "VaultServer", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&VaultServerList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v11.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultServerSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDataSources := "[]VolumeSource{"
	for _, f := range this.DataSources {
		repeatedStringForDataSources += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForDataSources += "}"
	repeatedStringForAuthMethods := "[]AuthMethod{"
	for _, f := range this.AuthMethods {
		repeatedStringForAuthMethods += strings.Replace(strings.Replace(f.String(), "AuthMethod", "AuthMethod", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAuthMethods += "}"
	s := strings.Join([]string{`&VaultServerSpec{`,
		`Replicas:` + valueToStringGenerated(this.Replicas) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`ConfigSource:` + strings.Replace(fmt.Sprintf("%v", this.ConfigSource), "VolumeSource", "v12.VolumeSource", 1) + `,`,
		`DataSources:` + repeatedStringForDataSources + `,`,
		`TLS:` + strings.Replace(this.TLS.String(), "TLSPolicy", "TLSPolicy", 1) + `,`,
		`Backend:` + strings.Replace(strings.Replace(this.Backend.String(), "BackendStorageSpec", "BackendStorageSpec", 1), `&`, ``, 1) + `,`,
		`Unsealer:` + strings.Replace(this.Unsealer.String(), "UnsealerSpec", "UnsealerSpec", 1) + `,`,
		`AuthMethods:` + repeatedStringForAuthMethods + `,`,
		`Monitor:` + strings.Replace(fmt.Sprintf("%v", this.Monitor), "AgentSpec", "v13.AgentSpec", 1) + `,`,
		`PodTemplate:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.PodTemplate), "PodTemplateSpec", "v1.PodTemplateSpec", 1), `&`, ``, 1) + `,`,
		`ServiceTemplate:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ServiceTemplate), "ServiceTemplateSpec", "v1.ServiceTemplateSpec", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultServerStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	repeatedStringForAuthMethodStatus := "[]AuthMethodStatus{"
	for _, f := range this.AuthMethodStatus {
		repeatedStringForAuthMethodStatus += strings.Replace(strings.Replace(f.String(), "AuthMethodStatus", "AuthMethodStatus", 1), `&`, ``, 1) + ","
	}
	repeatedStringForAuthMethodStatus += "}"
	s := strings.Join([]string{`&VaultServerStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Initialized:` + fmt.Sprintf("%v", this.Initialized) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`ClientPort:` + fmt.Sprintf("%v", this.ClientPort) + `,`,
		`VaultStatus:` + strings.Replace(strings.Replace(this.VaultStatus.String(), "VaultStatus", "VaultStatus", 1), `&`, ``, 1) + `,`,
		`UpdatedNodes:` + fmt.Sprintf("%v", this.UpdatedNodes) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`AuthMethodStatus:` + repeatedStringForAuthMethodStatus + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VaultStatus{`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`Standby:` + fmt.Sprintf("%v", this.Standby) + `,`,
		`Sealed:` + fmt.Sprintf("%v", this.Sealed) + `,`,
		`Unsealed:` + fmt.Sprintf("%v", this.Unsealed) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AuthConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLeaseTTL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultLeaseTTL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeaseTTL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxLeaseTTL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditNonHMACRequestKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditNonHMACRequestKeys = append(m.AuditNonHMACRequestKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditNonHMACResponseKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuditNonHMACResponseKeys = append(m.AuditNonHMACResponseKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListingVisibility", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListingVisibility = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassthroughRequestHeaders", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassthroughRequestHeaders = append(m.PassthroughRequestHeaders, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMethod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthMethod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthMethod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AuthConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PluginName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PluginName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Local = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthMethodStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthMethodStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthMethodStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = AuthMethodEnableDisableStatus(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwsKmsSsmSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwsKmsSsmSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwsKmsSsmSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsKeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsKeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SsmKeyPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SsmKeyPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureKeyVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureKeyVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureKeyVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultBaseURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultBaseURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloud", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloud = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCertSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientCertSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AADClientSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AADClientSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseManagedIdentity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseManagedIdentity = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AzureSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AzureSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AzureSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountKeySecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountKeySecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackendStorageSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackendStorageSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackendStorageSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inmem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inmem == nil {
				m.Inmem = &InmemSpec{}
			}
			if err := m.Inmem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etcd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Etcd == nil {
				m.Etcd = &EtcdSpec{}
			}
			if err := m.Etcd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gcs == nil {
				m.Gcs = &GcsSpec{}
			}
			if err := m.Gcs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S3 == nil {
				m.S3 = &S3Spec{}
			}
			if err := m.S3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Azure == nil {
				m.Azure = &AzureSpec{}
			}
			if err := m.Azure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostgreSQL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PostgreSQL == nil {
				m.PostgreSQL = &PostgreSQLSpec{}
			}
			if err := m.PostgreSQL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MySQL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MySQL == nil {
				m.MySQL = &MySQLSpec{}
			}
			if err := m.MySQL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &FileSpec{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamoDB", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DynamoDB == nil {
				m.DynamoDB = &DynamoDBSpec{}
			}
			if err := m.DynamoDB.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Swift == nil {
				m.Swift = &SwiftSpec{}
			}
			if err := m.Swift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consul", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Consul == nil {
				m.Consul = &ConsulSpec{}
			}
			if err := m.Consul.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsulSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsulSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsulSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckTimeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckTimeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsistencyMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsistencyMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableRegistration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisableRegistration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxParallel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scheme", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scheme = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceTags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ACLTokenSecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ACLTokenSecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTTL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionTTL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockWaitTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockWaitTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSSecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSSecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSMinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSMinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSSkipVerify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TLSSkipVerify = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DynamoDBSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DynamoDBSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DynamoDBSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadCapacity", wireType)
			}
			m.ReadCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadCapacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteCapacity", wireType)
			}
			m.WriteCapacity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WriteCapacity |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTokenSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionTokenSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EtcdSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EtcdSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EtcdSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EtcdApi", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EtcdApi = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HAEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HAEnable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sync", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sync = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscoverySrv", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DiscoverySrv = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSSecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSSecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VolumeClaimTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VolumeClaimTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GcsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GcsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GcsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChunkSize = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HAEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HAEnabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GoogleKmsGcsSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoogleKmsGcsSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoogleKmsGcsSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsCryptoKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsCryptoKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsKeyRing", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsKeyRing = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KmsProject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KmsProject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InmemSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InmemSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InmemSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesSecretSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesSecretSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesSecretSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KubernetesSecret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KubernetesSecret == nil {
				m.KubernetesSecret = &KubernetesSecretSpec{}
			}
			if err := m.KubernetesSecret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleKmsGcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoogleKmsGcs == nil {
				m.GoogleKmsGcs = &GoogleKmsGcsSpec{}
			}
			if err := m.GoogleKmsGcs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwsKmsSsm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwsKmsSsm == nil {
				m.AwsKmsSsm = &AwsKmsSsmSpec{}
			}
			if err := m.AwsKmsSsm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureKeyVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AzureKeyVault == nil {
				m.AzureKeyVault = &AzureKeyVault{}
			}
			if err := m.AzureKeyVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MySQLSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MySQLSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MySQLSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCredentialSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCredentialSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSCASecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSCASecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostgreSQLSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostgreSQLSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostgreSQLSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionURLSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionURLSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S3Spec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3Spec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3Spec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionTokenSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionTokenSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcePathStyle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcePathStyle = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSSL", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableSSL = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwiftSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwiftSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwiftSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrustID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrustID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthTokenSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthTokenSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxParallel", wireType)
			}
			m.MaxParallel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxParallel |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLSPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLSPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLSPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLSSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TLSSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CABundle", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CABundle = append(m.CABundle[:0], dAtA[iNdEx:postIndex]...)
			if m.CABundle == nil {
				m.CABundle = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsealerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsealerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsealerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretShares", wireType)
			}
			m.SecretShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretThreshold", wireType)
			}
			m.SecretThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryPeriodSeconds", wireType)
			}
			m.RetryPeriodSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryPeriodSeconds |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverwriteExisting", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OverwriteExisting = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRootToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StoreRootToken = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Mode.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultServerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultServerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultServerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, VaultServer{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultServerSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultServerSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultServerSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Replicas = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = github_com_appscode_go_encoding_json_types.StrYo(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigSource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConfigSource == nil {
				m.ConfigSource = &v12.VolumeSource{}
			}
			if err := m.ConfigSource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataSources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataSources = append(m.DataSources, v12.VolumeSource{})
			if err := m.DataSources[len(m.DataSources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TLS == nil {
				m.TLS = &TLSPolicy{}
			}
			if err := m.TLS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Backend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsealer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unsealer == nil {
				m.Unsealer = &UnsealerSpec{}
			}
			if err := m.Unsealer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMethods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthMethods = append(m.AuthMethods, AuthMethod{})
			if err := m.AuthMethods[len(m.AuthMethods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monitor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monitor == nil {
				m.Monitor = &v13.AgentSpec{}
			}
			if err := m.Monitor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PodTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceTemplate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceTemplate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultServerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultServerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultServerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = ClusterPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initialized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initialized = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientPort", wireType)
			}
			m.ClientPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientPort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedNodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedNodes = append(m.UpdatedNodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v14.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthMethodStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthMethodStatus = append(m.AuthMethodStatus, AuthMethodStatus{})
			if err := m.AuthMethodStatus[len(m.AuthMethodStatus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Standby", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Standby = append(m.Standby, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sealed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sealed = append(m.Sealed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsealed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unsealed = append(m.Unsealed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGenerated
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)
