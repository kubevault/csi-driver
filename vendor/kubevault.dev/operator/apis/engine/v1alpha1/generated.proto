/*
Copyright The KubeVault Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubevault.dev.operator.apis.engine.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/api/rbac/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/custom-resources/apis/appcatalog/v1alpha1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=awsaccesskeyrequests,singular=awsaccesskeyrequest,categories={vault,appscode,all}
// +kubebuilder:subresource:status
message AWSAccessKeyRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AWSAccessKeyRequestSpec spec = 2;

  optional AWSAccessKeyRequestStatus status = 3;
}

message AWSAccessKeyRequestCondition {
  // request approval state, currently Approved or Denied.
  optional string type = 1;

  // brief reason for the request state
  // +optional
  optional string reason = 2;

  // human readable message with details about the request state
  // +optional
  optional string message = 3;

  // timestamp for the last update to this condition
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;
}

message AWSAccessKeyRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of AWSAccessKeyRequest objects
  repeated AWSAccessKeyRequest items = 2;
}

// https://www.vaultproject.io/api/secret/aws/index.html#parameters-6
// AWSAccessKeyRequestSpec contains information to request for vault aws credential
message AWSAccessKeyRequestSpec {
  // Contains vault aws role info
  optional RoleRef roleRef = 1;

  repeated k8s.io.api.rbac.v1.Subject subjects = 2;

  // The ARN of the role to assume if credential_type on the Vault role is assumed_role.
  // Must match one of the allowed role ARNs in the Vault role. Optional if the Vault role
  // only allows a single AWS role ARN; required otherwise.
  optional string roleARN = 3;

  // Specifies the TTL for the use of the STS token. This is specified as a string with a duration suffix.
  // Valid only when credential_type is assumed_role or federation_token. When not specified,
  // the default_sts_ttl set for the role will be used. If that is also not set, then the default value of
  // 3600s will be used. AWS places limits on the maximum TTL allowed. See the AWS documentation on the
  // DurationSeconds parameter for AssumeRole (for assumed_role credential types) and
  // GetFederationToken (for federation_token credential types) for more details.
  optional string ttl = 4;

  // If true, '/aws/sts' endpoint will be used to retrieve credential
  // Otherwise, '/aws/creds' endpoint will be used to retrieve credential
  optional bool useSTS = 5;
}

message AWSAccessKeyRequestStatus {
  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated AWSAccessKeyRequestCondition conditions = 1;

  // Name of the secret containing AWSCredential AWSCredentials
  optional k8s.io.api.core.v1.LocalObjectReference secret = 2;

  // Contains lease info
  optional Lease lease = 3;
}

// https://www.vaultproject.io/api/secret/aws/index.html#configure-root-iam-credentials
// AWSConfiguration contains information to communicate with AWS
message AWSConfiguration {
  // Specifies the secret containing AWS access key ID and secret access key
  // secret.Data:
  // 	- access_key=<value>
  //  - secret_key=<value>
  optional string credentialSecret = 1;

  // Specifies the AWS region
  optional string region = 2;

  // Specifies a custom HTTP IAM enminidpoint to use
  optional string iamEndpoint = 3;

  // Specifies a custom HTTP STS endpoint to use
  optional string stsEndpoint = 4;

  // Number of max retries the client should use for recoverable errors.
  // The default (-1) falls back to the AWS SDK's default behavior
  optional int64 maxRetries = 5;

  optional LeaseConfig leaseConfig = 6;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=awsroles,singular=awsrole,categories={vault,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
message AWSRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AWSRoleSpec spec = 2;

  optional AWSRoleStatus status = 3;
}

// AWSRoleCondition describes the state of a AWSRole at a certain point.
message AWSRoleCondition {
  // Type of AWSRole condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The reason for the condition's.
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  optional string message = 4;
}

message AWSRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of AWSRole objects
  repeated AWSRole items = 2;
}

// AWSRoleSpec contains connection information, AWS role info, etc
// More info: https://www.vaultproject.io/api/secret/aws/index.html#parameters-3
message AWSRoleSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // Path defines the path of the AWS secret engine
  // default: aws
  // More info: https://www.vaultproject.io/docs/auth/aws.html#via-the-cli
  // +optional
  optional string path = 2;

  // Specifies the type of credential to be used when retrieving credentials from the role
  optional string credentialType = 3;

  // Specifies the ARNs of the AWS roles this Vault role is allowed to assume.
  // Required when credential_type is assumed_role and prohibited otherwise
  repeated string roleARNs = 4;

  // Specifies the ARNs of the AWS managed policies to be attached to IAM users when they are requested.
  // Valid only when credential_type is iam_user. When credential_type is iam_user,
  // at least one of policy_arns or policy_document must be specified.
  repeated string policyARNs = 5;

  // The IAM policy document for the role. The behavior depends on the credential type.
  // With iam_user, the policy document will be attached to the IAM user generated and
  // augment the permissions the IAM user has. With assumed_role and federation_token,
  // the policy document will act as a filter on what the credentials can do.
  // +optional
  optional string policyDocument = 6;

  // Specifies the IAM policy in JSON format.
  // +optional
  // +kubebuilder:validation:EmbeddedResource
  // +kubebuilder:pruning:PreserveUnknownFields
  optional k8s.io.apimachinery.pkg.runtime.RawExtension policy = 7;

  // The default TTL for STS credentials. When a TTL is not specified when STS credentials are requested,
  // and a default TTL is specified on the role, then this default TTL will be used.
  // Valid only when credential_type is one of assumed_role or federation_token
  optional string defaultSTSTTL = 8;

  // The max allowed TTL for STS credentials (credentials TTL are capped to max_sts_ttl).
  // Valid only when credential_type is one of assumed_role or federation_token
  optional string maxSTSTTL = 9;
}

message AWSRoleStatus {
  optional string phase = 1;

  // ObservedGeneration is the most recent generation observed for this AWSRole. It corresponds to the
  // AWSRole's generation, which is updated on mutation by the API Server.
  optional int64 observedGeneration = 2;

  // Represents the latest available observations of a AWSRole current state.
  repeated AWSRoleCondition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=azureaccesskeyrequests,singular=azureaccesskeyrequest,categories={vault,appscode,all}
// +kubebuilder:subresource:status
message AzureAccessKeyRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AzureAccessKeyRequestSpec spec = 2;

  optional AzureAccessKeyRequestStatus status = 3;
}

message AzureAccessKeyRequestCondition {
  // request approval state, currently Approved or Denied.
  optional string type = 1;

  // brief reason for the request state
  // +optional
  optional string reason = 2;

  // human readable message with details about the request state
  // +optional
  optional string message = 3;

  // timestamp for the last update to this condition
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;
}

message AzureAccessKeyRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of AzureAccessKeyRequest objects
  repeated AzureAccessKeyRequest items = 2;
}

message AzureAccessKeyRequestSpec {
  // Contains vault azure role info
  // +required
  optional RoleRef roleRef = 1;

  // Contains a reference to the object or user identities the role binding is applied to
  // +required
  repeated k8s.io.api.rbac.v1.Subject subjects = 2;
}

message AzureAccessKeyRequestStatus {
  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated AzureAccessKeyRequestCondition conditions = 1;

  // Name of the secret containing AzureCredential
  optional k8s.io.api.core.v1.LocalObjectReference secret = 2;

  // Contains lease info
  optional Lease lease = 3;
}

// AzureConfiguration contains information to communicate with Azure
message AzureConfiguration {
  // Specifies the secret name containing Azure credentials
  // secret.Data:
  // 	- subscription-id: <value>, The subscription id for the Azure Active Directory.
  // 	- tenant-id: <value>, The tenant id for the Azure Active Directory.
  // 	- client-id: <value>, The OAuth2 client id to connect to Azure.
  // 	- client-secret: <value>, The OAuth2 client secret to connect to Azure.
  // +required
  optional string credentialSecret = 1;

  // The Azure environment.
  // If not specified, Vault will use Azure Public Cloud.
  // +optional
  optional string environment = 2;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=azureroles,singular=azurerole,categories={vault,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
message AzureRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional AzureRoleSpec spec = 2;

  optional AzureRoleStatus status = 3;
}

// AzureRoleCondition describes the state of a AzureRole at a certain point.
message AzureRoleCondition {
  // Type of AzureRole condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The reason for the condition's.
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  optional string message = 4;
}

message AzureRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of AzureRole objects
  repeated AzureRole items = 2;
}

// AzureRoleSpec contains connection information, Azure role info, etc
// More info: https://www.vaultproject.io/api/secret/azure/index.html#create-update-role
message AzureRoleSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // Path defines the path of the Azure secret engine
  // default: azure
  // More info: https://www.vaultproject.io/docs/auth/azure.html#via-the-cli
  // +optional
  optional string path = 2;

  // List of Azure roles to be assigned to the generated service principal.
  // The array must be in JSON format, properly escaped as a string
  optional string azureRoles = 3;

  // Application Object ID for an existing service principal
  // that will be used instead of creating dynamic service principals.
  // If present, azure_roles will be ignored.
  optional string applicationObjectID = 4;

  // Specifies the default TTL for service principals generated using this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to the system/engine default TTL time.
  optional string ttl = 5;

  // Specifies the maximum TTL for service principals
  // generated using this role. Accepts time suffixed strings ("1h")
  // or an integer number of seconds. Defaults to the system/engine max TTL time.
  optional string maxTTL = 6;
}

message AzureRoleStatus {
  optional string phase = 1;

  // ObservedGeneration is the most recent generation observed for this AzureRole. It corresponds to the
  // AzureRole's generation, which is updated on mutation by the API Server.
  optional int64 observedGeneration = 2;

  // Represents the latest available observations of a AzureRole current state.
  repeated AzureRoleCondition conditions = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=databaseaccessrequests,singular=databaseaccessrequest,categories={vault,appscode,all}
// +kubebuilder:subresource:status
message DatabaseAccessRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional DatabaseAccessRequestSpec spec = 2;

  optional DatabaseAccessRequestStatus status = 3;
}

message DatabaseAccessRequestCondition {
  // request approval state, currently Approved or Denied.
  optional string type = 1;

  // brief reason for the request state
  // +optional
  optional string reason = 2;

  // human readable message with details about the request state
  // +optional
  optional string message = 3;

  // timestamp for the last update to this condition
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;
}

message DatabaseAccessRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of DatabaseAccessRequest objects
  repeated DatabaseAccessRequest items = 2;
}

// DatabaseAccessRequestSpec contains information to request for database credential
message DatabaseAccessRequestSpec {
  // Contains vault database role info
  optional RoleRef roleRef = 1;

  repeated k8s.io.api.rbac.v1.Subject subjects = 2;

  // Specifies the TTL for the leases associated with this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to roles default TTL time
  optional string ttl = 3;
}

message DatabaseAccessRequestStatus {
  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated DatabaseAccessRequestCondition conditions = 1;

  // Name of the secret containing database credentials
  optional k8s.io.api.core.v1.LocalObjectReference secret = 2;

  // Contains lease info
  optional Lease lease = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=gcpaccesskeyrequests,singular=gcpaccesskeyrequest,categories={vault,appscode,all}
// +kubebuilder:subresource:status
message GCPAccessKeyRequest {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GCPAccessKeyRequestSpec spec = 2;

  optional GCPAccessKeyRequestStatus status = 3;
}

message GCPAccessKeyRequestCondition {
  // request approval state, currently Approved or Denied.
  optional string type = 1;

  // brief reason for the request state
  // +optional
  optional string reason = 2;

  // human readable message with details about the request state
  // +optional
  optional string message = 3;

  // timestamp for the last update to this condition
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastUpdateTime = 4;
}

message GCPAccessKeyRequestList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of GCPAccessKeyRequest objects
  repeated GCPAccessKeyRequest items = 2;
}

// GCPAccessKeyRequestSpec contains information to request for vault gcp credentials
message GCPAccessKeyRequestSpec {
  // Contains vault gcp role info
  // +required
  optional RoleRef roleRef = 1;

  // Contains a reference to the object or user identities the role binding is applied to
  // +required
  repeated k8s.io.api.rbac.v1.Subject subjects = 2;

  // Specifies the algorithm used to generate key.
  // Defaults to 2k RSA key.
  // Accepted values: KEY_ALG_UNSPECIFIED, KEY_ALG_RSA_1024, KEY_ALG_RSA_2048
  // +optional
  optional string keyAlgorithm = 3;

  // Specifies the private key type to generate.
  // Defaults to JSON credentials file
  // Accepted values: TYPE_UNSPECIFIED, TYPE_PKCS12_FILE, TYPE_GOOGLE_CREDENTIALS_FILE
  // +optional
  optional string keyType = 4;
}

message GCPAccessKeyRequestStatus {
  // Conditions applied to the request, such as approval or denial.
  // +optional
  repeated GCPAccessKeyRequestCondition conditions = 1;

  // Name of the secret containing GCPCredential
  optional k8s.io.api.core.v1.LocalObjectReference secret = 2;

  // Contains lease info
  optional Lease lease = 3;
}

// https://www.vaultproject.io/api/secret/gcp/index.html#write-config
// GCPConfiguration contains information to communicate with GCP
message GCPConfiguration {
  // Specifies the secret containing GCP credentials
  // secret.Data:
  // 	- sa.json
  optional string credentialSecret = 1;

  // Specifies default config TTL for long-lived credentials
  // (i.e. service account keys).
  // +optional
  optional string ttl = 2;

  // Specifies the maximum config TTL for long-lived
  // credentials (i.e. service account keys).
  // +optional
  optional string maxTTL = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=gcproles,singular=gcprole,categories={vault,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
message GCPRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional GCPRoleSpec spec = 2;

  optional GCPRoleStatus status = 3;
}

// GCPRoleCondition describes the state of a GCPRole at a certain point.
message GCPRoleCondition {
  // Type of GCPRole condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The reason for the condition's.
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  optional string message = 4;
}

message GCPRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of GCPRole objects
  repeated GCPRole items = 2;
}

// GCPRoleSpec contains connection information, GCP role info, etc
// More info: https://www.vaultproject.io/api/secret/gcp/index.html#parameters
message GCPRoleSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // Path defines the path of the Google Cloud secret engine
  // default: gcp
  // More info: https://www.vaultproject.io/docs/auth/gcp.html#via-the-cli-helper
  // +optional
  optional string path = 2;

  // Specifies the type of secret generated for this role set
  optional string secretType = 3;

  // Name of the GCP project that this roleset's service account will belong to.
  // Cannot be updated.
  optional string project = 4;

  // Bindings configuration string (expects HCL or JSON format in raw
  // or base64-encoded string)
  optional string bindings = 5;

  // List of OAuth scopes to assign to access_token secrets generated
  // under this role set (access_token role sets only)
  // +optional
  repeated string tokenScopes = 6;
}

message GCPRoleStatus {
  optional string phase = 1;

  // ObservedGeneration is the most recent generation observed for this GCPRole. It corresponds to the
  // GCPRole's generation, which is updated on mutation by the API Server.
  optional int64 observedGeneration = 2;

  // Represents the latest available observations of a GCPRole current state.
  repeated GCPRoleCondition conditions = 3;
}

// Lease contains lease info
message Lease {
  // lease id
  optional string id = 1;

  // lease duration
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Duration duration = 2;

  // Specifies whether this lease is renewable
  optional bool renewable = 3;
}

// https://www.vaultproject.io/api/secret/aws/index.html#configure-lease
// LeaseConfig contains lease configuration
message LeaseConfig {
  // Specifies the lease value provided as a string duration with time suffix.
  // "h" (hour) is the largest suffix.
  optional string lease = 1;

  // Specifies the maximum lease value provided as a string duration with time suffix.
  // "h" (hour) is the largest suffix
  optional string leaseMax = 2;
}

// MongoDBConfiguration defines a MongoDB app configuration.
// https://www.vaultproject.io/api/secret/databases/index.html
// https://www.vaultproject.io/api/secret/databases/mongodb.html#configure-connection
message MongoDBConfiguration {
  // Specifies the database appbinding reference
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 1;

  // Specifies the name of the plugin to use for this connection.
  // Default plugin:
  //  - for mongodb: mongodb-database-plugin
  optional string pluginName = 2;

  // List of the roles allowed to use this connection.
  // Defaults to empty (no roles), if contains a "*" any role can use this connection.
  repeated string allowedRoles = 3;

  // Specifies the MongoDB write concern. This is set for the entirety
  // of the session, maintained for the lifecycle of the plugin process.
  optional string writeConcern = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mongodbroles,singular=mongodbrole,categories={vault,appscode,all}
// +kubebuilder:subresource:status
message MongoDBRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MongoDBRoleSpec spec = 2;

  optional MongoDBRoleStatus status = 3;
}

// MongoDBRoleCondition describes the state of a MongoDBRole at a certain point.
message MongoDBRoleCondition {
  // Type of MongoDBRole condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The reason for the condition's.
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  optional string message = 4;
}

message MongoDBRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MongoDBRole objects
  repeated MongoDBRole items = 2;
}

// MongoDBRoleSpec contains connection information, Mongodb role info etc
message MongoDBRoleSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // DatabaseRef specifies the database appbinding reference in any namespace
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 2;

  // Specifies the database name under which the role will be created
  optional string databaseName = 3;

  // Specifies the path where secret engine is enabled
  optional string path = 4;

  // Specifies the TTL for the leases associated with this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to system/engine default TTL time
  optional string defaultTTL = 5;

  // Specifies the maximum TTL for the leases associated with this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to system/engine default TTL time.
  optional string maxTTL = 6;

  // https://www.vaultproject.io/api/secret/databases/Mongodb-maria.html#creation_statements
  // Specifies the database statements executed to create and configure a user.
  repeated string creationStatements = 7;

  // https://www.vaultproject.io/api/secret/databases/Mongodb-maria.html#revocation_statements
  // Specifies the database statements to be executed to revoke a user.
  repeated string revocationStatements = 8;
}

message MongoDBRoleStatus {
  optional string phase = 1;

  // ObservedGeneration is the most recent generation observed for this MongoDBRole. It corresponds to the
  // MongoDBRole's generation, which is updated on mutation by the API Server.
  optional int64 observedGeneration = 2;

  // Represents the latest available observations of a MongoDBRole current state.
  repeated MongoDBRoleCondition conditions = 3;
}

// MySQLConfiguration defines a MySQL app configuration.
// https://www.vaultproject.io/api/secret/databases/index.html
// https://www.vaultproject.io/api/secret/databases/mysql-maria.html#configure-connection
message MySQLConfiguration {
  // DatabaseRef refers to a MySQL/MariaDB database AppBinding in any namespace
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 1;

  // Specifies the name of the plugin to use for this connection.
  // Default plugin:
  //  - for mysql: mysql-database-plugin
  optional string pluginName = 2;

  // List of the roles allowed to use this connection.
  // Defaults to empty (no roles), if contains a "*" any role can use this connection.
  repeated string allowedRoles = 3;

  // Specifies the maximum number of open connections to the database.
  optional int64 maxOpenConnections = 4;

  // Specifies the maximum number of idle connections to the database.
  // A zero uses the value of max_open_connections and a negative value disables idle connections.
  // If larger than max_open_connections it will be reduced to be equal.
  optional int64 maxIdleConnections = 5;

  // Specifies the maximum amount of time a connection may be reused.
  // If <= 0s connections are reused forever.
  optional string maxConnectionLifetime = 6;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=mysqlroles,singular=mysqlrole,categories={vault,appscode,all}
// +kubebuilder:subresource:status
message MySQLRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional MySQLRoleSpec spec = 2;

  optional MySQLRoleStatus status = 3;
}

// MySQLRoleCondition describes the state of a MySQLRole at a certain point.
message MySQLRoleCondition {
  // Type of MySQLRole condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The reason for the condition's.
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  optional string message = 4;
}

message MySQLRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of MySQLRole objects
  repeated MySQLRole items = 2;
}

// MySQLRoleSpec contains connection information, mysql role info etc
message MySQLRoleSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // DatabaseRef specifies the database appbinding reference in any namespace.
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 2;

  // Specifies the database name under which the role will be created
  optional string databaseName = 3;

  // Specifies the path where secret engine is enabled
  optional string path = 4;

  // Specifies the TTL for the leases associated with this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to system/engine default TTL time
  optional string defaultTTL = 5;

  // Specifies the maximum TTL for the leases associated with this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to system/engine default TTL time.
  optional string maxTTL = 6;

  // https://www.vaultproject.io/api/secret/databases/mysql-maria.html#creation_statements
  // Specifies the database statements executed to create and configure a user.
  repeated string creationStatements = 7;

  // https://www.vaultproject.io/api/secret/databases/mysql-maria.html#revocation_statements
  // Specifies the database statements to be executed to revoke a user.
  repeated string revocationStatements = 8;
}

message MySQLRoleStatus {
  optional string phase = 1;

  // ObservedGeneration is the most recent generation observed for this MySQLRole. It corresponds to the
  // MySQLRole's generation, which is updated on mutation by the API Server.
  optional int64 observedGeneration = 2;

  // Represents the latest available observations of a MySQLRole current state.
  repeated MySQLRoleCondition conditions = 3;
}

// PostgresConfiguration defines a PostgreSQL app configuration.
// https://www.vaultproject.io/api/secret/databases/index.html
// https://www.vaultproject.io/api/secret/databases/postgresql.html#configure-connection
message PostgresConfiguration {
  // Specifies the Postgres database appbinding reference
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 1;

  // Specifies the name of the plugin to use for this connection.
  // Default plugin:
  // 	- for postgres: postgresql-database-plugin
  optional string pluginName = 2;

  // List of the roles allowed to use this connection.
  // Defaults to empty (no roles), if contains a "*" any role can use this connection.
  repeated string allowedRoles = 3;

  // Specifies the maximum number of open connections to the database.
  optional int64 maxOpenConnections = 4;

  // Specifies the maximum number of idle connections to the database.
  // A zero uses the value of max_open_connections and a negative value disables idle connections.
  // If larger than max_open_connections it will be reduced to be equal.
  optional int64 maxIdleConnections = 5;

  // Specifies the maximum amount of time a connection may be reused.
  // If <= 0s connections are reused forever.
  optional string maxConnectionLifetime = 6;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=postgresroles,singular=postgresrole,categories={vault,appscode,all}
// +kubebuilder:subresource:status
message PostgresRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional PostgresRoleSpec spec = 2;

  optional PostgresRoleStatus status = 3;
}

// PostgresRoleCondition describes the state of a PostgresRole at a certain point.
message PostgresRoleCondition {
  // Type of PostgresRole condition.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // The reason for the condition's.
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  optional string message = 4;
}

message PostgresRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of PostgresRole objects
  repeated PostgresRole items = 2;
}

// PostgresRoleSpec contains connection information, postgres role info etc
message PostgresRoleSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // DatabaseRef specifies the database appbinding reference in any namespace
  optional kmodules.xyz.custom_resources.apis.appcatalog.v1alpha1.AppReference databaseRef = 2;

  // Specifies the database name under which the role will be created
  optional string databaseName = 3;

  // Specifies the path where secret engine is enabled
  optional string path = 4;

  // Specifies the TTL for the leases associated with this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to system/engine default TTL time
  optional string defaultTTL = 5;

  // Specifies the maximum TTL for the leases associated with this role.
  // Accepts time suffixed strings ("1h") or an integer number of seconds.
  // Defaults to system/engine default TTL time.
  optional string maxTTL = 6;

  // https://www.vaultproject.io/api/secret/databases/postgresql.html#creation_statements
  // Specifies the database statements executed to create and configure a user.
  repeated string creationStatements = 7;

  // https://www.vaultproject.io/api/secret/databases/postgresql.html#revocation_statements
  // Specifies the database statements to be executed to revoke a user.
  repeated string revocationStatements = 8;

  // https://www.vaultproject.io/api/secret/databases/postgresql.html#rollback_statements
  // Specifies the database statements to be executed rollback a create operation in the event of an error.
  repeated string rollbackStatements = 9;

  // https://www.vaultproject.io/api/secret/databases/postgresql.html#renew_statements
  // Specifies the database statements to be executed to renew a user.
  repeated string renewStatements = 10;
}

message PostgresRoleStatus {
  // ObservedGeneration is the most recent generation observed for this PostgresROle. It corresponds to the
  // PostgresROle's generation, which is updated on mutation by the API Server.
  optional int64 observedGeneration = 1;

  // Specifies the phase of the PostgresRole
  optional string phase = 2;

  // Represents the latest available observations of a PostgresRoleBinding current state.
  repeated PostgresRoleCondition conditions = 3;
}

// RoleRef contains information that points to the role being used
message RoleRef {
  // APIGroup is the group for the resource being referenced
  optional string apiGroup = 1;

  // Kind is the type of resource being referenced
  optional string kind = 2;

  // Name is the name of resource being referenced
  optional string name = 3;

  // Namespace is the namespace of the resource being referenced
  optional string namespace = 4;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=secretengines,singular=secretengine,categories={vault,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
message SecretEngine {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional SecretEngineSpec spec = 2;

  optional SecretEngineStatus status = 3;
}

message SecretEngineCondition {
  optional string type = 1;

  optional string status = 2;

  // The reason for the condition's.
  optional string reason = 3;

  // A human readable message indicating details about the transition.
  optional string message = 4;
}

message SecretEngineConfiguration {
  optional AWSConfiguration aws = 1;

  optional AzureConfiguration azure = 2;

  optional GCPConfiguration gcp = 3;

  optional PostgresConfiguration postgres = 4;

  optional MongoDBConfiguration mongodb = 5;

  optional MySQLConfiguration mysql = 6;
}

message SecretEngineList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated SecretEngine items = 2;
}

message SecretEngineSpec {
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // Path defines the path used to enable this secret engine
  // +optional
  optional string path = 2;

  optional SecretEngineConfiguration secretEngineConfiguration = 3;
}

message SecretEngineStatus {
  optional string phase = 1;

  optional int64 observedGeneration = 2;

  repeated SecretEngineCondition conditions = 3;
}

