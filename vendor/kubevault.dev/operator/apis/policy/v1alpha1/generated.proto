/*
Copyright The KubeVault Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubevault.dev.operator.apis.policy.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// More info: https://www.vaultproject.io/api/auth/kubernetes/index.html#create-role
message KubernetesSubjectRef {
  // Specifies the path where kubernetes auth is enabled
  // default : kubernetes
  // +optional
  optional string path = 1;

  // Specifies the names of the service account to bind with policy
  repeated string serviceAccountNames = 2;

  // Specifies the namespaces of the service account
  repeated string serviceAccountNamespaces = 3;

  // Specifies the TTL period of tokens issued using this role in seconds.
  // +optional
  optional string ttl = 4;

  // Specifies the maximum allowed lifetime of tokens issued in seconds using this role.
  // +optional
  optional string maxTTL = 5;

  // If set, indicates that the token generated using this role should never expire.
  // The token should be renewed within the duration specified by this value.
  // At each renewal, the token's TTL will be set to the value of this parameter.
  // +optional
  optional string period = 6;
}

message PolicyIdentifier {
  // Name is a Vault server policy name. This name should be returned by `vault read sys/policy` command.
  // More info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies
  optional string name = 1;

  // Ref is name of a VaultPolicy crd object. Actual vault policy name is spec.vaultRoleName field.
  // More info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies
  optional string ref = 2;
}

// ServiceAccountReference contains name and namespace of the service account
message ServiceAccountReference {
  optional string name = 1;

  optional string namespace = 2;
}

message SubjectRef {
  // Kubernetes refers to Vault users who are authenticated via Kubernetes auth method
  // More info: https://www.vaultproject.io/docs/auth/kubernetes.html#configuration
  optional KubernetesSubjectRef kubernetes = 1;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vaultpolicies,singular=vaultpolicy,shortName=vp,categories={vault,policy,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message VaultPolicy {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VaultPolicySpec spec = 2;

  optional VaultPolicyStatus status = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vaultpolicybindings,singular=vaultpolicybinding,shortName=vpb,categories={vault,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message VaultPolicyBinding {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VaultPolicyBindingSpec spec = 2;

  optional VaultPolicyBindingStatus status = 3;
}

message VaultPolicyBindingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VaultPolicyBinding items = 2;
}

// links: https://www.vaultproject.io/api/auth/kubernetes/index.html#parameters-1
message VaultPolicyBindingSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // VaultRoleName is the role name which will be bound of the policies
  // This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
  // xref: https://www.vaultproject.io/api/auth/kubernetes/index.html#create-role
  // +optional
  optional string vaultRoleName = 2;

  // Policies is a list of Vault policy identifiers.
  repeated PolicyIdentifier policies = 3;

  // SubjectRef refers to Vault users who will be granted policies.
  optional SubjectRef subjectRef = 4;
}

message VaultPolicyBindingStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // Phase indicates whether successfully bind the policy to service account in vault or not or in progress
  // +optional
  optional string phase = 2;

  // Represents the latest available observations of a VaultPolicyBinding.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message VaultPolicyList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VaultPolicy items = 2;
}

// More info: https://www.vaultproject.io/docs/concepts/policies.html
message VaultPolicySpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // VaultPolicyName is the policy name set inside Vault.
  // This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
  // +optional
  optional string vaultPolicyName = 2;

  // PolicyDocument specifies a vault policy in hcl format.
  // For example:
  // path "secret/*" {
  //   capabilities = ["create", "read", "update", "delete", "list"]
  // }
  // +optional
  optional string policyDocument = 3;

  // Policy specifies a vault policy in json format.
  // +optional
  // +kubebuilder:validation:EmbeddedResource
  // +kubebuilder:pruning:PreserveUnknownFields
  optional k8s.io.apimachinery.pkg.runtime.RawExtension policy = 4;
}

message VaultPolicyStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // Phase indicates whether the policy successfully applied in vault or not or in progress
  // +optional
  optional string phase = 2;

  // Represents the latest available observations of a VaultPolicy.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

