/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubevault.dev.apimachinery.apis.policy.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// More info: https://www.vaultproject.io/api-docs/auth/approle#create-update-approle
message AppRoleSubjectRef {
  // Specifies the path where approle auth is enabled
  // default : approle
  // +optional
  optional string path = 1;

  // RoleName is the Name of the AppRole
  // This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
  optional string roleName = 2;

  // Require secret_id to be presented when logging in using this AppRole.
  optional bool bindSecretID = 3;

  // List of CIDR blocks; if set, specifies blocks of IP addresses which can perform the login operation.
  repeated string secretIdBoundCidrs = 4;

  // Number of times any particular SecretID can be used to fetch a token from this AppRole, after which the SecretID will expire. A value of zero will allow unlimited uses.
  optional int64 secretIdNumUses = 5;

  // Duration in either an integer number of seconds (3600) or an integer time unit (60m) after which any SecretID expires.
  optional string secretIdTTL = 6;

  // If set, the secret IDs generated using this role will be cluster local. This can only be set during role creation and once set, it can't be reset later.
  optional bool enableLocalSecretIds = 7;

  // The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.
  optional int64 tokenTTL = 8;

  // The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.
  optional int64 tokentokenMaxTTL_max_ttl = 9;

  // List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.
  repeated string tokenPolicies = 10;

  // List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.
  repeated string tokenBoundCidrs = 11;

  // If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal.
  optional int64 tokenExplicitMaxTTL = 12;

  // If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies.
  optional bool tokenNoDefaultPolicy = 13;

  // The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited.
  optional int64 tokenNumUses = 14;

  // The period, if any, to set on the token.
  optional int64 tokenPeriod = 15;

  // The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time.
  optional string tokenType = 16;
}

// More info: https://www.vaultproject.io/api-docs/auth/jwt#create-role
message JWTSubjectRef {
  // Specifies the path where jwt/oidc auth is enabled
  // default : jwt
  // +optional
  optional string path = 1;

  // Name of the role.
  // This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
  optional string name = 2;

  // Type of role, either "oidc" (default) or "jwt".
  optional string roleType = 3;

  // List of aud claims to match against. Any match is sufficient. Required for "jwt" roles, optional for "oidc" roles.
  repeated string boundAudiences = 4;

  // The claim to use to uniquely identify the user; this will be used as the name for the Identity entity alias created due to a successful login. The claim value must be a string.
  optional string userClaim = 5;

  // If set, requires that the sub claim matches this value.
  optional string boundSubject = 6;

  // If set, a map of claims/values to match against. The expected value may be a single string or a list of strings. The interpretation of the bound claim values is configured with bound_claims_type.
  map<string, string> boundClaims = 7;

  // Configures the interpretation of the bound_claims values. If "string" (the default), the values will treated as string literals and must match exactly. If set to "glob", the values will be interpreted as globs, with * matching any number of characters.
  optional string boundClaimsType = 8;

  // The claim to use to uniquely identify the set of groups to which the user belongs; this will be used as the names for the Identity group aliases created due to a successful login. The claim value must be a list of strings.
  optional string groupClaim = 9;

  // If set, a map of claims (keys) to be copied to specified metadata fields (values).
  map<string, string> claimMappings = 10;

  // If set, a list of OIDC scopes to be used with an OIDC role. The standard scope "openid" is automatically included and need not be specified.
  repeated string oidcScopes = 11;

  // The list of allowed values for redirect_uri during OIDC logins.
  repeated string allowedRedirectUris = 12;

  optional bool verboseOidcLogging = 13;

  // The incremental lifetime for generated tokens. This current value of this will be referenced at renewal time.
  optional int64 tokenTTL = 14;

  // The maximum lifetime for generated tokens. This current value of this will be referenced at renewal time.
  optional int64 tokentokenMaxTTL_max_ttl = 15;

  // List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.
  repeated string tokenPolicies = 16;

  // List of CIDR blocks; if set, specifies blocks of IP addresses which can authenticate successfully, and ties the resulting token to these blocks as well.
  repeated string tokenBoundCidrs = 17;

  // If set, will encode an explicit max TTL onto the token. This is a hard cap even if token_ttl and token_max_ttl would otherwise allow a renewal.
  optional int64 tokenExplicitMaxTTL = 18;

  // If set, the default policy will not be set on generated tokens; otherwise it will be added to the policies set in token_policies.
  optional bool tokenNoDefaultPolicy = 19;

  // The maximum number of times a generated token may be used (within its lifetime); 0 means unlimited.
  optional int64 tokenNumUses = 20;

  // The period, if any, to set on the token.
  optional int64 tokenPeriod = 21;

  // The type of token that should be generated. Can be service, batch, or default to use the mount's tuned default (which unless changed will be service tokens). For token store roles, there are two additional possibilities: default-service and default-batch which specify the type to return unless the client requests a different type at generation time.
  optional string tokenType = 22;
}

// More info: https://www.vaultproject.io/api/auth/kubernetes/index.html#create-role
message KubernetesSubjectRef {
  // Specifies the path where kubernetes auth is enabled
  // default : kubernetes
  // +optional
  optional string path = 1;

  // Name of the role
  optional string name = 2;

  // Specifies the names of the service account to bind with policy
  repeated string serviceAccountNames = 3;

  // Specifies the namespaces of the service account
  repeated string serviceAccountNamespaces = 4;

  // Specifies the TTL period of tokens issued using this role in seconds.
  // +optional
  optional string ttl = 5;

  // Specifies the maximum allowed lifetime of tokens issued in seconds using this role.
  // +optional
  optional string maxTTL = 6;

  // If set, indicates that the token generated using this role should never expire.
  // The token should be renewed within the duration specified by this value.
  // At each renewal, the token's TTL will be set to the value of this parameter.
  // +optional
  optional string period = 7;
}

// More info: https://www.vaultproject.io/api-docs/auth/ldap#create-update-ldap-group
message LdapGroupSubjectRef {
  // Specifies the path where ldap groups auth is enabled
  // default : ldap/groups
  // +optional
  optional string path = 1;

  // The name of the LDAP group
  optional string name = 2;

  // List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.
  repeated string policies = 3;
}

// More info: https://www.vaultproject.io/api-docs/auth/ldap#create-update-ldap-user
message LdapUserSubjectRef {
  // Specifies the path where ldap groups auth is enabled
  // default : ldap/users
  // +optional
  optional string path = 1;

  // The username of the LDAP user
  optional string usernames = 2;

  // List of policies to encode onto generated tokens. Depending on the auth method, this list may be supplemented by user/group/other values.
  repeated string policies = 3;

  // List of groups associated to the user.
  repeated string groups = 4;
}

message PolicyIdentifier {
  // Name is a Vault server policy name. This name should be returned by `vault read sys/policy` command.
  // More info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies
  optional string name = 1;

  // Ref is name of a VaultPolicy crd object. Actual vault policy name is spec.vaultRoleName field.
  // More info: https://www.vaultproject.io/docs/concepts/policies.html#listing-policies
  optional string ref = 2;
}

// ServiceAccountReference contains name and namespace of the service account
message ServiceAccountReference {
  optional string name = 1;

  optional string namespace = 2;
}

message SubjectRef {
  // Kubernetes refers to Vault users who are authenticated via Kubernetes auth method
  // More info: https://www.vaultproject.io/docs/auth/kubernetes.html#configuration
  optional KubernetesSubjectRef kubernetes = 1;

  // More info: https://www.vaultproject.io/docs/auth/approle#configuration
  optional AppRoleSubjectRef appRole = 2;

  // More info: https://www.vaultproject.io/api-docs/auth/ldap#configure-ldap
  optional LdapGroupSubjectRef ldapGroup = 3;

  optional LdapUserSubjectRef ldapUser = 4;

  // More info: https://www.vaultproject.io/api-docs/auth/jwt#configure
  optional JWTSubjectRef jwt = 5;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vaultpolicies,singular=vaultpolicy,shortName=vp,categories={vault,policy,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message VaultPolicy {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VaultPolicySpec spec = 2;

  optional VaultPolicyStatus status = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vaultpolicybindings,singular=vaultpolicybinding,shortName=vpb,categories={vault,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message VaultPolicyBinding {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VaultPolicyBindingSpec spec = 2;

  optional VaultPolicyBindingStatus status = 3;
}

message VaultPolicyBindingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VaultPolicyBinding items = 2;
}

// links: https://www.vaultproject.io/api/auth/kubernetes/index.html#parameters-1
message VaultPolicyBindingSpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // VaultRoleName is the role name which will be bound of the policies
  // This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
  // xref: https://www.vaultproject.io/api/auth/kubernetes/index.html#create-role
  // +optional
  optional string vaultRoleName = 2;

  // Policies is a list of Vault policy identifiers.
  repeated PolicyIdentifier policies = 3;

  // SubjectRef refers to Vault users who will be granted policies.
  optional SubjectRef subjectRef = 4;
}

message VaultPolicyBindingStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // Phase indicates whether successfully bind the policy to service account in vault or not or in progress
  // +optional
  optional string phase = 2;

  // Represents the latest available observations of a VaultPolicyBinding.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

message VaultPolicyList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VaultPolicy items = 2;
}

// More info: https://www.vaultproject.io/docs/concepts/policies.html
message VaultPolicySpec {
  // VaultRef is the name of a AppBinding referencing to a Vault Server
  optional k8s.io.api.core.v1.LocalObjectReference vaultRef = 1;

  // VaultPolicyName is the policy name set inside Vault.
  // This defaults to following format: k8s.${cluster}.${metadata.namespace}.${metadata.name}
  // +optional
  optional string vaultPolicyName = 2;

  // PolicyDocument specifies a vault policy in hcl format.
  // For example:
  // path "secret/*" {
  //   capabilities = ["create", "read", "update", "delete", "list"]
  // }
  // +optional
  optional string policyDocument = 3;

  // Policy specifies a vault policy in json format.
  // +optional
  // +kubebuilder:validation:EmbeddedResource
  // +kubebuilder:pruning:PreserveUnknownFields
  optional k8s.io.apimachinery.pkg.runtime.RawExtension policy = 4;
}

message VaultPolicyStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // Phase indicates whether the policy successfully applied in vault or not or in progress
  // +optional
  optional string phase = 2;

  // Represents the latest available observations of a VaultPolicy.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 3;
}

