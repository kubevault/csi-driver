/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kubevault.dev/apimachinery/apis/policy/v1alpha1/generated.proto

package v1alpha1

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	runtime "k8s.io/apimachinery/pkg/runtime"
	v12 "kmodules.xyz/client-go/api/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func (m *AppRoleSubjectRef) Reset()      { *m = AppRoleSubjectRef{} }
func (*AppRoleSubjectRef) ProtoMessage() {}
func (*AppRoleSubjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{0}
}
func (m *AppRoleSubjectRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppRoleSubjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AppRoleSubjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppRoleSubjectRef.Merge(m, src)
}
func (m *AppRoleSubjectRef) XXX_Size() int {
	return m.Size()
}
func (m *AppRoleSubjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_AppRoleSubjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_AppRoleSubjectRef proto.InternalMessageInfo

func (m *JWTSubjectRef) Reset()      { *m = JWTSubjectRef{} }
func (*JWTSubjectRef) ProtoMessage() {}
func (*JWTSubjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{1}
}
func (m *JWTSubjectRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JWTSubjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *JWTSubjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTSubjectRef.Merge(m, src)
}
func (m *JWTSubjectRef) XXX_Size() int {
	return m.Size()
}
func (m *JWTSubjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTSubjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_JWTSubjectRef proto.InternalMessageInfo

func (m *KubernetesSubjectRef) Reset()      { *m = KubernetesSubjectRef{} }
func (*KubernetesSubjectRef) ProtoMessage() {}
func (*KubernetesSubjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{2}
}
func (m *KubernetesSubjectRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesSubjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *KubernetesSubjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesSubjectRef.Merge(m, src)
}
func (m *KubernetesSubjectRef) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesSubjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesSubjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesSubjectRef proto.InternalMessageInfo

func (m *LdapGroupSubjectRef) Reset()      { *m = LdapGroupSubjectRef{} }
func (*LdapGroupSubjectRef) ProtoMessage() {}
func (*LdapGroupSubjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{3}
}
func (m *LdapGroupSubjectRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdapGroupSubjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LdapGroupSubjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdapGroupSubjectRef.Merge(m, src)
}
func (m *LdapGroupSubjectRef) XXX_Size() int {
	return m.Size()
}
func (m *LdapGroupSubjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LdapGroupSubjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_LdapGroupSubjectRef proto.InternalMessageInfo

func (m *LdapUserSubjectRef) Reset()      { *m = LdapUserSubjectRef{} }
func (*LdapUserSubjectRef) ProtoMessage() {}
func (*LdapUserSubjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{4}
}
func (m *LdapUserSubjectRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LdapUserSubjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LdapUserSubjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LdapUserSubjectRef.Merge(m, src)
}
func (m *LdapUserSubjectRef) XXX_Size() int {
	return m.Size()
}
func (m *LdapUserSubjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_LdapUserSubjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_LdapUserSubjectRef proto.InternalMessageInfo

func (m *PolicyIdentifier) Reset()      { *m = PolicyIdentifier{} }
func (*PolicyIdentifier) ProtoMessage() {}
func (*PolicyIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{5}
}
func (m *PolicyIdentifier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PolicyIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyIdentifier.Merge(m, src)
}
func (m *PolicyIdentifier) XXX_Size() int {
	return m.Size()
}
func (m *PolicyIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyIdentifier proto.InternalMessageInfo

func (m *ServiceAccountReference) Reset()      { *m = ServiceAccountReference{} }
func (*ServiceAccountReference) ProtoMessage() {}
func (*ServiceAccountReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{6}
}
func (m *ServiceAccountReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAccountReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ServiceAccountReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountReference.Merge(m, src)
}
func (m *ServiceAccountReference) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAccountReference) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountReference.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountReference proto.InternalMessageInfo

func (m *SubjectRef) Reset()      { *m = SubjectRef{} }
func (*SubjectRef) ProtoMessage() {}
func (*SubjectRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{7}
}
func (m *SubjectRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubjectRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubjectRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubjectRef.Merge(m, src)
}
func (m *SubjectRef) XXX_Size() int {
	return m.Size()
}
func (m *SubjectRef) XXX_DiscardUnknown() {
	xxx_messageInfo_SubjectRef.DiscardUnknown(m)
}

var xxx_messageInfo_SubjectRef proto.InternalMessageInfo

func (m *VaultPolicy) Reset()      { *m = VaultPolicy{} }
func (*VaultPolicy) ProtoMessage() {}
func (*VaultPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{8}
}
func (m *VaultPolicy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicy.Merge(m, src)
}
func (m *VaultPolicy) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicy proto.InternalMessageInfo

func (m *VaultPolicyBinding) Reset()      { *m = VaultPolicyBinding{} }
func (*VaultPolicyBinding) ProtoMessage() {}
func (*VaultPolicyBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{9}
}
func (m *VaultPolicyBinding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicyBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicyBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicyBinding.Merge(m, src)
}
func (m *VaultPolicyBinding) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicyBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicyBinding.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicyBinding proto.InternalMessageInfo

func (m *VaultPolicyBindingList) Reset()      { *m = VaultPolicyBindingList{} }
func (*VaultPolicyBindingList) ProtoMessage() {}
func (*VaultPolicyBindingList) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{10}
}
func (m *VaultPolicyBindingList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicyBindingList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicyBindingList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicyBindingList.Merge(m, src)
}
func (m *VaultPolicyBindingList) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicyBindingList) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicyBindingList.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicyBindingList proto.InternalMessageInfo

func (m *VaultPolicyBindingSpec) Reset()      { *m = VaultPolicyBindingSpec{} }
func (*VaultPolicyBindingSpec) ProtoMessage() {}
func (*VaultPolicyBindingSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{11}
}
func (m *VaultPolicyBindingSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicyBindingSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicyBindingSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicyBindingSpec.Merge(m, src)
}
func (m *VaultPolicyBindingSpec) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicyBindingSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicyBindingSpec.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicyBindingSpec proto.InternalMessageInfo

func (m *VaultPolicyBindingStatus) Reset()      { *m = VaultPolicyBindingStatus{} }
func (*VaultPolicyBindingStatus) ProtoMessage() {}
func (*VaultPolicyBindingStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{12}
}
func (m *VaultPolicyBindingStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicyBindingStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicyBindingStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicyBindingStatus.Merge(m, src)
}
func (m *VaultPolicyBindingStatus) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicyBindingStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicyBindingStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicyBindingStatus proto.InternalMessageInfo

func (m *VaultPolicyList) Reset()      { *m = VaultPolicyList{} }
func (*VaultPolicyList) ProtoMessage() {}
func (*VaultPolicyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{13}
}
func (m *VaultPolicyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicyList.Merge(m, src)
}
func (m *VaultPolicyList) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicyList) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicyList.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicyList proto.InternalMessageInfo

func (m *VaultPolicySpec) Reset()      { *m = VaultPolicySpec{} }
func (*VaultPolicySpec) ProtoMessage() {}
func (*VaultPolicySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{14}
}
func (m *VaultPolicySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicySpec.Merge(m, src)
}
func (m *VaultPolicySpec) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicySpec.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicySpec proto.InternalMessageInfo

func (m *VaultPolicyStatus) Reset()      { *m = VaultPolicyStatus{} }
func (*VaultPolicyStatus) ProtoMessage() {}
func (*VaultPolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_088a67a13ba000c4, []int{15}
}
func (m *VaultPolicyStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultPolicyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VaultPolicyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultPolicyStatus.Merge(m, src)
}
func (m *VaultPolicyStatus) XXX_Size() int {
	return m.Size()
}
func (m *VaultPolicyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultPolicyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_VaultPolicyStatus proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AppRoleSubjectRef)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.AppRoleSubjectRef")
	proto.RegisterType((*JWTSubjectRef)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.JWTSubjectRef")
	proto.RegisterMapType((map[string]string)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.JWTSubjectRef.BoundClaimsEntry")
	proto.RegisterMapType((map[string]string)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.JWTSubjectRef.ClaimMappingsEntry")
	proto.RegisterType((*KubernetesSubjectRef)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.KubernetesSubjectRef")
	proto.RegisterType((*LdapGroupSubjectRef)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.LdapGroupSubjectRef")
	proto.RegisterType((*LdapUserSubjectRef)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.LdapUserSubjectRef")
	proto.RegisterType((*PolicyIdentifier)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.PolicyIdentifier")
	proto.RegisterType((*ServiceAccountReference)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.ServiceAccountReference")
	proto.RegisterType((*SubjectRef)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.SubjectRef")
	proto.RegisterType((*VaultPolicy)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicy")
	proto.RegisterType((*VaultPolicyBinding)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicyBinding")
	proto.RegisterType((*VaultPolicyBindingList)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicyBindingList")
	proto.RegisterType((*VaultPolicyBindingSpec)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicyBindingSpec")
	proto.RegisterType((*VaultPolicyBindingStatus)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicyBindingStatus")
	proto.RegisterType((*VaultPolicyList)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicyList")
	proto.RegisterType((*VaultPolicySpec)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicySpec")
	proto.RegisterType((*VaultPolicyStatus)(nil), "kubevault.dev.apimachinery.apis.policy.v1alpha1.VaultPolicyStatus")
}

func init() {
	proto.RegisterFile("kubevault.dev/apimachinery/apis/policy/v1alpha1/generated.proto", fileDescriptor_088a67a13ba000c4)
}

var fileDescriptor_088a67a13ba000c4 = []byte{
	// 1915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xc9, 0x6f, 0xe4, 0x58,
	0x19, 0x8f, 0x53, 0x59, 0x2a, 0x5f, 0xa5, 0xb2, 0xbc, 0x64, 0xd2, 0x56, 0xe8, 0xa9, 0x44, 0x85,
	0x84, 0x72, 0xa0, 0x5d, 0x74, 0x89, 0xa5, 0x99, 0x81, 0x66, 0xe2, 0x24, 0xb4, 0xd2, 0x24, 0x9d,
	0xcc, 0x8b, 0x3b, 0x03, 0x68, 0xa4, 0xc6, 0x65, 0xbf, 0x54, 0xdc, 0x71, 0xd9, 0x1e, 0x2f, 0xd5,
	0x09, 0x27, 0x24, 0x24, 0x8e, 0xc0, 0xff, 0xc1, 0x95, 0x13, 0x97, 0xb9, 0xf6, 0x71, 0x84, 0x38,
	0xcc, 0xa9, 0x34, 0x5d, 0x9c, 0xb8, 0x20, 0x71, 0xe5, 0x02, 0x7a, 0x8b, 0xb7, 0xb2, 0x33, 0xd3,
	0x95, 0x64, 0xe6, 0x52, 0xb2, 0xbf, 0xef, 0xf7, 0xad, 0xef, 0x5b, 0x6c, 0x17, 0xfc, 0xec, 0x22,
	0xea, 0x90, 0xbe, 0x1e, 0xd9, 0xa1, 0x62, 0x92, 0x7e, 0x4b, 0xf7, 0xac, 0x9e, 0x6e, 0x9c, 0x5b,
	0x0e, 0xf1, 0xaf, 0xe8, 0x4d, 0xd0, 0xf2, 0x5c, 0xdb, 0x32, 0xae, 0x5a, 0xfd, 0x87, 0xba, 0xed,
	0x9d, 0xeb, 0x0f, 0x5b, 0x5d, 0xe2, 0x10, 0x5f, 0x0f, 0x89, 0xa9, 0x78, 0xbe, 0x1b, 0xba, 0xa8,
	0x95, 0x53, 0xa0, 0x64, 0x15, 0xd0, 0x9b, 0x40, 0xe1, 0x0a, 0x94, 0x58, 0xc1, 0xfa, 0x83, 0xae,
	0x15, 0x9e, 0x47, 0x1d, 0xc5, 0x70, 0x7b, 0xad, 0xae, 0xdb, 0x75, 0x5b, 0x4c, 0x4f, 0x27, 0x3a,
	0x63, 0x77, 0xec, 0x86, 0x5d, 0x71, 0xfd, 0xeb, 0xcd, 0x8b, 0x47, 0x81, 0x62, 0xb9, 0xd4, 0x99,
	0x96, 0xe1, 0xfa, 0xa4, 0xd5, 0x2f, 0xf8, 0xb0, 0xfe, 0xfd, 0x14, 0x93, 0x7a, 0xef, 0x5d, 0x74,
	0x79, 0x04, 0x3d, 0x12, 0xea, 0x65, 0x52, 0xad, 0xeb, 0xa4, 0xfc, 0xc8, 0x09, 0xad, 0x1e, 0x29,
	0x08, 0xfc, 0xf0, 0xab, 0x04, 0x02, 0xe3, 0x9c, 0xf4, 0xf4, 0x82, 0xdc, 0x83, 0x8b, 0x9e, 0x6b,
	0x46, 0x36, 0x09, 0x94, 0xcb, 0xab, 0xdf, 0xb6, 0x0c, 0xdb, 0x22, 0x4e, 0xf8, 0xa0, 0xcb, 0x43,
	0x2a, 0xfa, 0xd5, 0xfc, 0xd7, 0x2c, 0x2c, 0x6f, 0x7b, 0x1e, 0x76, 0x6d, 0x72, 0x12, 0x75, 0x5e,
	0x12, 0x23, 0xc4, 0xe4, 0x0c, 0x6d, 0xc2, 0x94, 0xa7, 0x87, 0xe7, 0xb2, 0xb4, 0x29, 0x6d, 0xcd,
	0xa9, 0xf3, 0xaf, 0x07, 0x1b, 0x13, 0xc3, 0xc1, 0xc6, 0xd4, 0xb1, 0x1e, 0x9e, 0x63, 0xc6, 0x41,
	0xdf, 0x85, 0xaa, 0xef, 0xda, 0xe4, 0x99, 0xde, 0x23, 0xf2, 0x24, 0x43, 0x2d, 0x09, 0x54, 0x15,
	0x0b, 0x3a, 0x4e, 0x10, 0xe8, 0x11, 0xcc, 0x77, 0x2c, 0xc7, 0x3c, 0x21, 0x86, 0x4f, 0xc2, 0xfd,
	0x5d, 0xb9, 0xb2, 0x29, 0x6d, 0x55, 0xd5, 0x55, 0x21, 0x31, 0xaf, 0x66, 0x78, 0x38, 0x87, 0x44,
	0x3f, 0x07, 0x14, 0xf0, 0x6b, 0x53, 0x75, 0x23, 0xc7, 0xdc, 0xb1, 0x4c, 0x3f, 0x90, 0xa7, 0x36,
	0x2b, 0x5b, 0x73, 0xea, 0xda, 0x70, 0xb0, 0x81, 0x62, 0x64, 0xca, 0xc5, 0x25, 0x12, 0x68, 0x1b,
	0x16, 0x63, 0xea, 0xb3, 0xa8, 0xf7, 0x3c, 0x20, 0x81, 0x3c, 0xbd, 0x29, 0x6d, 0x55, 0xd4, 0x7b,
	0xc2, 0x89, 0xc5, 0x58, 0x91, 0x60, 0xe3, 0x51, 0x3c, 0xfa, 0x01, 0xd4, 0x62, 0x92, 0xa6, 0x1d,
	0xc8, 0x33, 0x2c, 0xea, 0x15, 0x21, 0x5e, 0x8b, 0xc5, 0x35, 0xed, 0x00, 0x67, 0x71, 0xe8, 0x18,
	0x56, 0x89, 0xa3, 0x77, 0x6c, 0x72, 0xe0, 0x1a, 0xba, 0x2d, 0x60, 0x66, 0x20, 0xcf, 0xb2, 0x1c,
	0xdc, 0x17, 0xf2, 0xab, 0x7b, 0x05, 0xcc, 0x6e, 0x80, 0x4b, 0x25, 0x69, 0xee, 0x43, 0xf7, 0x82,
	0x38, 0xd4, 0x8b, 0x2a, 0x0b, 0x22, 0xc9, 0xbd, 0x26, 0xe8, 0x38, 0x41, 0xa0, 0x43, 0x90, 0xd9,
	0x35, 0xfb, 0x39, 0xd4, 0x2f, 0x35, 0xed, 0xe0, 0x45, 0x4f, 0xbf, 0x7c, 0x11, 0x86, 0xb6, 0x3c,
	0xc7, 0xa4, 0x93, 0x18, 0xb4, 0x14, 0x82, 0xd7, 0x46, 0x85, 0xe8, 0x6f, 0x68, 0xa3, 0x1f, 0x41,
	0x9d, 0x11, 0x8f, 0x69, 0xa7, 0x59, 0x24, 0x90, 0x81, 0x9d, 0xc5, 0xf2, 0x70, 0xb0, 0x51, 0xd7,
	0xb2, 0x0c, 0x9c, 0xc7, 0xa1, 0x9f, 0xc2, 0x22, 0x23, 0x64, 0x8e, 0xb1, 0xc6, 0x44, 0x57, 0x68,
	0xf6, 0xb5, 0x3c, 0x0b, 0x8f, 0x62, 0xd1, 0x21, 0xac, 0x30, 0xd2, 0xde, 0xa5, 0x47, 0x15, 0x86,
	0xdc, 0x29, 0x79, 0x9e, 0x45, 0xf0, 0x2d, 0x11, 0xc1, 0x8a, 0x56, 0x84, 0xe0, 0x32, 0x39, 0x7a,
	0x2a, 0x8c, 0xfc, 0xcc, 0xdd, 0x25, 0x67, 0x74, 0xa0, 0x30, 0x3f, 0xaf, 0xe4, 0x7a, 0xfe, 0x54,
	0xb4, 0x12, 0x0c, 0x2e, 0x95, 0xa4, 0x35, 0xce, 0xe9, 0xa2, 0xbc, 0x16, 0x98, 0x67, 0x49, 0x8d,
	0x6b, 0x19, 0x1e, 0xce, 0x21, 0x69, 0x61, 0xf1, 0x54, 0x11, 0xdf, 0x72, 0x4d, 0x79, 0xb1, 0xe4,
	0x50, 0x38, 0x0b, 0x67, 0x71, 0xa8, 0x05, 0x73, 0xfc, 0x90, 0xaf, 0x3c, 0x22, 0x2f, 0xb1, 0x6a,
	0x5c, 0x16, 0x42, 0x73, 0x5a, 0xcc, 0xc0, 0x29, 0xa6, 0xf9, 0xb7, 0x79, 0xa8, 0x3f, 0xfd, 0x48,
	0x1b, 0xab, 0xcf, 0x37, 0x61, 0xca, 0x49, 0x7b, 0x3c, 0x41, 0xb0, 0xfe, 0x66, 0x9c, 0x78, 0x12,
	0x30, 0x2f, 0x2a, 0xc5, 0x49, 0xc0, 0x9c, 0x48, 0x10, 0xe8, 0x3d, 0x58, 0xe8, 0xd0, 0x43, 0xdd,
	0x8e, 0x4c, 0x8b, 0x38, 0x06, 0x89, 0x7b, 0x19, 0x0d, 0x07, 0x1b, 0x0b, 0x6a, 0x8e, 0x83, 0x47,
	0x90, 0x34, 0xe0, 0x28, 0x20, 0xfe, 0x8e, 0xad, 0x5b, 0x3d, 0xd6, 0xbd, 0x99, 0x80, 0x9f, 0xc7,
	0x0c, 0x9c, 0x62, 0xd8, 0xd8, 0xa1, 0x2a, 0x44, 0xc4, 0xa2, 0x65, 0xd3, 0xb1, 0x93, 0xe1, 0xe1,
	0x1c, 0x12, 0xfd, 0x41, 0x82, 0x1a, 0x23, 0x30, 0x45, 0xb4, 0x59, 0x2b, 0x5b, 0xb5, 0xf6, 0x91,
	0x32, 0xe6, 0xfe, 0x51, 0x72, 0xe9, 0x56, 0xd4, 0x54, 0xe3, 0x9e, 0x13, 0xfa, 0x57, 0xe9, 0x21,
	0x67, 0x38, 0x38, 0x6b, 0x98, 0xce, 0xad, 0xcc, 0x2d, 0x4b, 0x72, 0x95, 0x45, 0x91, 0xcc, 0x2d,
	0x35, 0xcf, 0xc6, 0xa3, 0x78, 0xd4, 0x06, 0xe8, 0xfa, 0x6e, 0xe4, 0xf1, 0xbc, 0xcd, 0x31, 0x69,
	0x24, 0xa4, 0xe1, 0x49, 0xc2, 0xc1, 0x19, 0x14, 0xfa, 0xa3, 0x04, 0x75, 0x83, 0x5e, 0x1d, 0xea,
	0x9e, 0x67, 0x39, 0x5d, 0xde, 0xe6, 0xb5, 0xf6, 0x87, 0xb7, 0xcc, 0xc0, 0x4e, 0x56, 0x27, 0xcf,
	0xc1, 0x3b, 0xc2, 0x95, 0x7a, 0x8e, 0x87, 0xf3, 0xe6, 0x91, 0x02, 0xe0, 0x5a, 0xa6, 0x71, 0x62,
	0xb8, 0x1e, 0x89, 0x07, 0xc7, 0x02, 0x0d, 0xe0, 0x68, 0x7f, 0x77, 0x87, 0x53, 0x71, 0x06, 0x81,
	0xf6, 0x61, 0x45, 0xb7, 0x6d, 0xf7, 0x15, 0x31, 0x31, 0x31, 0x2d, 0x9f, 0x18, 0xe1, 0x73, 0xdf,
	0x0a, 0xe4, 0x79, 0x26, 0x78, 0x8f, 0x8e, 0x8a, 0xed, 0x22, 0x1b, 0x97, 0xc9, 0xa0, 0xa7, 0x80,
	0xfa, 0xc4, 0xef, 0xb8, 0x01, 0x39, 0xb2, 0x4c, 0xe3, 0xc0, 0xed, 0x76, 0x2d, 0xa7, 0x2b, 0x06,
	0xc5, 0xba, 0x70, 0x1e, 0x9d, 0x0a, 0xc4, 0xfe, 0xee, 0x8e, 0x40, 0xe0, 0x12, 0xa9, 0xdc, 0xe8,
	0x5e, 0xb8, 0xd5, 0xe8, 0x5e, 0xbc, 0x83, 0xd1, 0xbd, 0x74, 0xf3, 0xd1, 0xbd, 0x7c, 0xfb, 0xd1,
	0x8d, 0xee, 0x78, 0x74, 0xaf, 0xdc, 0xd9, 0xe8, 0x5e, 0xbd, 0xe9, 0xe8, 0x7e, 0xe7, 0x26, 0xa3,
	0x7b, 0xed, 0xab, 0x47, 0xf7, 0xfa, 0x63, 0x58, 0x1a, 0x1d, 0x1e, 0x68, 0x09, 0x2a, 0x17, 0xe4,
	0x8a, 0xcf, 0x6e, 0x4c, 0x2f, 0xd1, 0x2a, 0x4c, 0xf7, 0x75, 0x3b, 0x12, 0xd3, 0x1a, 0xf3, 0x9b,
	0xf7, 0x26, 0x1f, 0x49, 0xeb, 0x1f, 0x00, 0x2a, 0xb6, 0xde, 0x38, 0x1a, 0x9a, 0xff, 0x9e, 0x84,
	0xd5, 0x5f, 0x44, 0x1d, 0xe2, 0x3b, 0x24, 0x24, 0xc1, 0x1d, 0xef, 0x90, 0x7d, 0x58, 0x09, 0x88,
	0xdf, 0xb7, 0x0c, 0xb2, 0x6d, 0x18, 0x6e, 0xe4, 0x84, 0x94, 0x17, 0xc8, 0x95, 0xb4, 0x5b, 0x4f,
	0x8a, 0x6c, 0x5c, 0x26, 0x83, 0x7e, 0x09, 0x72, 0x09, 0xd9, 0xd3, 0xd3, 0x55, 0x73, 0x7f, 0x38,
	0xd8, 0x90, 0x4f, 0xae, 0xc1, 0xe0, 0x6b, 0xa5, 0xd1, 0xbb, 0x50, 0xa1, 0x8d, 0xc7, 0x17, 0x4f,
	0x4d, 0x44, 0x51, 0xa1, 0x65, 0x4a, 0xe9, 0xe8, 0x3b, 0x30, 0xd3, 0xe3, 0x85, 0xcd, 0xd7, 0xcc,
	0x82, 0x40, 0xcc, 0x88, 0x5a, 0x16, 0x5c, 0x8a, 0xf3, 0x78, 0xb5, 0xcc, 0xe6, 0x71, 0xa2, 0x50,
	0x04, 0xb7, 0xf9, 0x7b, 0x09, 0x56, 0x0e, 0x4c, 0xdd, 0x63, 0x13, 0xfa, 0x8e, 0xf3, 0xbd, 0x05,
	0x55, 0x2f, 0x1e, 0x02, 0x3c, 0xc9, 0xf3, 0x74, 0x04, 0x25, 0xfd, 0x9f, 0x70, 0x9b, 0x7f, 0x95,
	0x00, 0x51, 0x2f, 0xe8, 0x7e, 0x1d, 0xcb, 0x09, 0x85, 0x2f, 0x6b, 0x87, 0x1d, 0xe4, 0xc8, 0x1b,
	0xc2, 0x73, 0xc1, 0xc0, 0x29, 0xe4, 0xed, 0x5d, 0x42, 0x4d, 0x98, 0x61, 0x9b, 0x2a, 0x3e, 0x4f,
	0xa0, 0xc9, 0x63, 0x59, 0x0a, 0xb0, 0xe0, 0x34, 0x4f, 0x60, 0x89, 0xf7, 0xf6, 0xbe, 0x49, 0x9c,
	0xd0, 0x3a, 0xb3, 0x88, 0x9f, 0xa4, 0x45, 0xba, 0x36, 0x2d, 0xef, 0x42, 0xc5, 0x27, 0x67, 0xc2,
	0xdb, 0xe4, 0x84, 0x31, 0x39, 0xc3, 0x94, 0xde, 0xb4, 0xe1, 0x5e, 0xbe, 0x6c, 0x30, 0x39, 0x23,
	0x3e, 0x7d, 0x36, 0x79, 0x0b, 0xdd, 0x2d, 0x98, 0x73, 0xe2, 0x5a, 0x12, 0x16, 0x92, 0x96, 0x4f,
	0x8a, 0x0c, 0xa7, 0x98, 0xe6, 0x5f, 0xa6, 0x00, 0x32, 0x19, 0x8f, 0x00, 0x2e, 0x92, 0xf6, 0x63,
	0x76, 0x6a, 0xed, 0xbd, 0xb1, 0xb7, 0x71, 0x59, 0x07, 0xf3, 0x3d, 0x9a, 0x72, 0x70, 0xc6, 0x10,
	0xb2, 0x60, 0x56, 0xe7, 0xaf, 0x87, 0xcc, 0xe9, 0x5a, 0x5b, 0x1d, 0xdb, 0x66, 0xe1, 0xf5, 0x52,
	0xad, 0x0d, 0x07, 0x1b, 0xb3, 0x82, 0x8c, 0x63, 0xfd, 0xe8, 0x13, 0x98, 0xb3, 0xe3, 0x7a, 0x67,
	0x4f, 0x92, 0xb5, 0xf6, 0xee, 0xd8, 0xc6, 0x4a, 0x3a, 0x46, 0xad, 0xd3, 0x1c, 0x27, 0x0c, 0x9c,
	0x5a, 0x41, 0x3d, 0xa8, 0xda, 0xa2, 0xb8, 0xe5, 0x29, 0x66, 0x71, 0xe7, 0x46, 0x16, 0xf3, 0xdd,
	0xc1, 0x2b, 0x37, 0xa6, 0xe3, 0xc4, 0x04, 0xfa, 0x15, 0x54, 0x5e, 0xbe, 0x0a, 0xd9, 0x04, 0xa9,
	0xb5, 0x1f, 0xdf, 0xee, 0x51, 0x4a, 0x9d, 0xa5, 0xb5, 0xf9, 0xf4, 0x23, 0x0d, 0x53, 0x9d, 0xcd,
	0x4f, 0x27, 0xa1, 0x76, 0x9a, 0x59, 0x69, 0xbf, 0x81, 0x6a, 0x8f, 0x84, 0xba, 0xa9, 0x87, 0xba,
	0x28, 0x96, 0xef, 0x29, 0xfc, 0x8b, 0x42, 0xde, 0x90, 0x77, 0xd1, 0xe5, 0xc6, 0x28, 0x5a, 0xe9,
	0x3f, 0x54, 0x8e, 0x98, 0x81, 0x43, 0x12, 0xea, 0xe9, 0x43, 0x62, 0x4a, 0xc3, 0x89, 0x56, 0xd4,
	0x81, 0xa9, 0xc0, 0x23, 0x86, 0x28, 0x8b, 0x0f, 0xc6, 0x8e, 0x26, 0xe3, 0xed, 0x89, 0x47, 0x8c,
	0xb4, 0x69, 0xe8, 0x1d, 0x66, 0xba, 0xd1, 0x4b, 0x98, 0x09, 0x42, 0x3d, 0x8c, 0x02, 0x51, 0x0f,
	0xea, 0xad, 0xac, 0x30, 0x4d, 0xe9, 0xbc, 0xe5, 0xf7, 0x58, 0x58, 0x68, 0xfe, 0x63, 0x12, 0x50,
	0x06, 0xad, 0x5a, 0x8e, 0x49, 0x9f, 0xd8, 0xbe, 0xfe, 0x44, 0x5a, 0xb9, 0x44, 0x3e, 0xb9, 0x4d,
	0x88, 0xc2, 0xe9, 0x6b, 0xf3, 0xf9, 0xc9, 0x48, 0x3e, 0xf7, 0xef, 0xc2, 0xd8, 0x97, 0xa7, 0xf5,
	0x0b, 0x09, 0xd6, 0x8a, 0x42, 0x07, 0x56, 0x10, 0xa2, 0x8f, 0x0b, 0xa9, 0x55, 0xde, 0x2e, 0xb5,
	0x54, 0x9a, 0x25, 0x36, 0xd9, 0x28, 0x31, 0x25, 0x93, 0xd6, 0x73, 0x98, 0xb6, 0x42, 0xd2, 0xa3,
	0xcb, 0xa7, 0x72, 0xa3, 0xc6, 0x2e, 0x7a, 0xad, 0xd6, 0x85, 0xbd, 0xe9, 0x7d, 0xaa, 0x19, 0x73,
	0x03, 0xcd, 0x3f, 0x55, 0xca, 0x42, 0xa4, 0x69, 0x47, 0xa7, 0x50, 0x65, 0x26, 0x31, 0x39, 0x13,
	0x21, 0x6e, 0x65, 0x42, 0x54, 0x0c, 0xd7, 0x27, 0x2c, 0x20, 0xd7, 0xd0, 0xed, 0xa3, 0xb8, 0xb5,
	0xf9, 0x4e, 0x49, 0x83, 0x3b, 0x15, 0x1a, 0x70, 0xa2, 0x0b, 0xbd, 0x0f, 0x75, 0x7e, 0x9d, 0xff,
	0x06, 0x97, 0xbc, 0x4b, 0x9d, 0x66, 0x99, 0x38, 0x8f, 0x45, 0xee, 0xc8, 0xaa, 0xad, 0xb5, 0xb7,
	0xc7, 0x4e, 0xce, 0xe8, 0x76, 0x4d, 0xbd, 0x2d, 0xd9, 0xd8, 0x2e, 0x40, 0x90, 0x0c, 0x2e, 0x31,
	0x68, 0xdf, 0x1f, 0xdb, 0x64, 0x66, 0xf6, 0x25, 0x0d, 0x95, 0xd2, 0x70, 0xc6, 0x44, 0xf3, 0x7f,
	0x12, 0xc8, 0xd7, 0x55, 0x2a, 0x7d, 0x9f, 0x73, 0x3b, 0xf4, 0x29, 0x8f, 0x98, 0x4f, 0xf8, 0xd7,
	0x50, 0xcb, 0x75, 0xd8, 0xe9, 0x54, 0xd2, 0xf7, 0xb9, 0xa3, 0x02, 0x02, 0x97, 0x48, 0xa1, 0x1f,
	0xc3, 0xb4, 0x77, 0xae, 0x07, 0x71, 0xfe, 0xbf, 0x1d, 0xd7, 0xc7, 0x31, 0x25, 0xfe, 0x77, 0xb0,
	0x81, 0x72, 0x0e, 0x30, 0x2a, 0xe6, 0x12, 0xe8, 0x63, 0x00, 0xc3, 0x75, 0x4c, 0x8b, 0xea, 0x89,
	0xcf, 0x61, 0x4b, 0xc9, 0x7e, 0xbd, 0x55, 0xf8, 0xd7, 0xdb, 0x17, 0x5d, 0x5e, 0x2c, 0xfd, 0x87,
	0xca, 0x4e, 0x2c, 0x90, 0x66, 0x20, 0x21, 0x05, 0x38, 0xa3, 0xaf, 0xf9, 0x77, 0x09, 0x16, 0x33,
	0x19, 0xf8, 0x06, 0xfa, 0x4d, 0xcf, 0xf7, 0xdb, 0x4f, 0x6e, 0xd5, 0x6f, 0xe5, 0x8d, 0xf6, 0xe9,
	0x64, 0x2e, 0xa8, 0xaf, 0xb5, 0xc3, 0xb6, 0x61, 0xb1, 0x9f, 0x9a, 0xca, 0xf4, 0x58, 0xf2, 0xe1,
	0xe5, 0x34, 0xcf, 0xc6, 0xa3, 0x78, 0xf4, 0x18, 0x16, 0x78, 0x8c, 0xbb, 0xae, 0x11, 0xf5, 0x88,
	0x13, 0x8a, 0xef, 0x63, 0x6b, 0x42, 0xc3, 0xc2, 0x71, 0x8e, 0x8b, 0x47, 0xd0, 0xe8, 0x43, 0x98,
	0xe1, 0x14, 0xd1, 0x32, 0x0f, 0xae, 0x3d, 0x2d, 0xf1, 0x9f, 0x80, 0x82, 0xf5, 0x57, 0x7b, 0x97,
	0x21, 0x71, 0x02, 0x5a, 0x22, 0xec, 0xb9, 0x58, 0xbc, 0xf7, 0x0a, 0x45, 0xcd, 0xff, 0x48, 0xb0,
	0x5c, 0x58, 0x89, 0x77, 0xda, 0x11, 0xed, 0x7c, 0x47, 0xdc, 0x1f, 0xed, 0x88, 0x1a, 0xb7, 0xfc,
	0xcd, 0xb5, 0x82, 0xaa, 0xbc, 0x7e, 0xd3, 0x98, 0xf8, 0xec, 0x4d, 0x63, 0xe2, 0xf3, 0x37, 0x8d,
	0x89, 0xdf, 0x0d, 0x1b, 0xd2, 0xeb, 0x61, 0x43, 0xfa, 0x6c, 0xd8, 0x90, 0x3e, 0x1f, 0x36, 0xa4,
	0x2f, 0x86, 0x0d, 0xe9, 0xcf, 0xff, 0x6c, 0x4c, 0xfc, 0xba, 0x1a, 0xd7, 0xe1, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x56, 0x87, 0x71, 0x86, 0xa6, 0x1a, 0x00, 0x00,
}

func (m *AppRoleSubjectRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppRoleSubjectRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppRoleSubjectRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TokenType)
	copy(dAtA[i:], m.TokenType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenType)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenPeriod))
	i--
	dAtA[i] = 0x78
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenNumUses))
	i--
	dAtA[i] = 0x70
	i--
	if m.TokenNoDefaultPolicy {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenExplicitMaxTTL))
	i--
	dAtA[i] = 0x60
	if len(m.TokenBoundCidrs) > 0 {
		for iNdEx := len(m.TokenBoundCidrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenBoundCidrs[iNdEx])
			copy(dAtA[i:], m.TokenBoundCidrs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenBoundCidrs[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.TokenPolicies) > 0 {
		for iNdEx := len(m.TokenPolicies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenPolicies[iNdEx])
			copy(dAtA[i:], m.TokenPolicies[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenPolicies[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenMaxTTL))
	i--
	dAtA[i] = 0x48
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenTTL))
	i--
	dAtA[i] = 0x40
	i--
	if m.EnableLocalSecretIDs {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x38
	i -= len(m.SecretIDTTL)
	copy(dAtA[i:], m.SecretIDTTL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecretIDTTL)))
	i--
	dAtA[i] = 0x32
	i = encodeVarintGenerated(dAtA, i, uint64(m.SecretIDNumUses))
	i--
	dAtA[i] = 0x28
	if len(m.SecretIDBoundCidrs) > 0 {
		for iNdEx := len(m.SecretIDBoundCidrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SecretIDBoundCidrs[iNdEx])
			copy(dAtA[i:], m.SecretIDBoundCidrs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.SecretIDBoundCidrs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i--
	if m.BindSecretID {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x18
	i -= len(m.RoleName)
	copy(dAtA[i:], m.RoleName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RoleName)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *JWTSubjectRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JWTSubjectRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JWTSubjectRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.TokenType)
	copy(dAtA[i:], m.TokenType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenType)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenPeriod))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa8
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenNumUses))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	i--
	if m.TokenNoDefaultPolicy {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x98
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenExplicitMaxTTL))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x90
	if len(m.TokenBoundCidrs) > 0 {
		for iNdEx := len(m.TokenBoundCidrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenBoundCidrs[iNdEx])
			copy(dAtA[i:], m.TokenBoundCidrs[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenBoundCidrs[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.TokenPolicies) > 0 {
		for iNdEx := len(m.TokenPolicies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TokenPolicies[iNdEx])
			copy(dAtA[i:], m.TokenPolicies[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.TokenPolicies[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenMaxTTL))
	i--
	dAtA[i] = 0x78
	i = encodeVarintGenerated(dAtA, i, uint64(m.TokenTTL))
	i--
	dAtA[i] = 0x70
	i--
	if m.VerboseOIDCLogging {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x68
	if len(m.AllowedRedirectUris) > 0 {
		for iNdEx := len(m.AllowedRedirectUris) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedRedirectUris[iNdEx])
			copy(dAtA[i:], m.AllowedRedirectUris[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.AllowedRedirectUris[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.OIDCScopes) > 0 {
		for iNdEx := len(m.OIDCScopes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OIDCScopes[iNdEx])
			copy(dAtA[i:], m.OIDCScopes[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.OIDCScopes[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.ClaimMappings) > 0 {
		keysForClaimMappings := make([]string, 0, len(m.ClaimMappings))
		for k := range m.ClaimMappings {
			keysForClaimMappings = append(keysForClaimMappings, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForClaimMappings)
		for iNdEx := len(keysForClaimMappings) - 1; iNdEx >= 0; iNdEx-- {
			v := m.ClaimMappings[string(keysForClaimMappings[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForClaimMappings[iNdEx])
			copy(dAtA[i:], keysForClaimMappings[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForClaimMappings[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	i -= len(m.GroupClaim)
	copy(dAtA[i:], m.GroupClaim)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.GroupClaim)))
	i--
	dAtA[i] = 0x4a
	i -= len(m.BoundClaimsType)
	copy(dAtA[i:], m.BoundClaimsType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BoundClaimsType)))
	i--
	dAtA[i] = 0x42
	if len(m.BoundClaims) > 0 {
		keysForBoundClaims := make([]string, 0, len(m.BoundClaims))
		for k := range m.BoundClaims {
			keysForBoundClaims = append(keysForBoundClaims, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForBoundClaims)
		for iNdEx := len(keysForBoundClaims) - 1; iNdEx >= 0; iNdEx-- {
			v := m.BoundClaims[string(keysForBoundClaims[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintGenerated(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForBoundClaims[iNdEx])
			copy(dAtA[i:], keysForBoundClaims[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(keysForBoundClaims[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintGenerated(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	i -= len(m.BoundSubject)
	copy(dAtA[i:], m.BoundSubject)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.BoundSubject)))
	i--
	dAtA[i] = 0x32
	i -= len(m.UserClaim)
	copy(dAtA[i:], m.UserClaim)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.UserClaim)))
	i--
	dAtA[i] = 0x2a
	if len(m.BoundAudiences) > 0 {
		for iNdEx := len(m.BoundAudiences) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BoundAudiences[iNdEx])
			copy(dAtA[i:], m.BoundAudiences[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.BoundAudiences[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	i -= len(m.RoleType)
	copy(dAtA[i:], m.RoleType)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.RoleType)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *KubernetesSubjectRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesSubjectRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesSubjectRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Period)
	copy(dAtA[i:], m.Period)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Period)))
	i--
	dAtA[i] = 0x3a
	i -= len(m.MaxTTL)
	copy(dAtA[i:], m.MaxTTL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.MaxTTL)))
	i--
	dAtA[i] = 0x32
	i -= len(m.TTL)
	copy(dAtA[i:], m.TTL)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.TTL)))
	i--
	dAtA[i] = 0x2a
	if len(m.ServiceAccountNamespaces) > 0 {
		for iNdEx := len(m.ServiceAccountNamespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceAccountNamespaces[iNdEx])
			copy(dAtA[i:], m.ServiceAccountNamespaces[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceAccountNamespaces[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ServiceAccountNames) > 0 {
		for iNdEx := len(m.ServiceAccountNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceAccountNames[iNdEx])
			copy(dAtA[i:], m.ServiceAccountNames[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.ServiceAccountNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LdapGroupSubjectRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdapGroupSubjectRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdapGroupSubjectRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Policies[iNdEx])
			copy(dAtA[i:], m.Policies[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Policies[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LdapUserSubjectRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LdapUserSubjectRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LdapUserSubjectRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Policies[iNdEx])
			copy(dAtA[i:], m.Policies[iNdEx])
			i = encodeVarintGenerated(dAtA, i, uint64(len(m.Policies[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Username)
	copy(dAtA[i:], m.Username)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Username)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Path)
	copy(dAtA[i:], m.Path)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Path)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PolicyIdentifier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyIdentifier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyIdentifier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Ref)
	copy(dAtA[i:], m.Ref)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Ref)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceAccountReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAccountReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAccountReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i -= len(m.Namespace)
	copy(dAtA[i:], m.Namespace)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Namespace)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Name)
	copy(dAtA[i:], m.Name)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Name)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SubjectRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubjectRef) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubjectRef) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JWT != nil {
		{
			size, err := m.JWT.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.LdapUser != nil {
		{
			size, err := m.LdapUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.LdapGroup != nil {
		{
			size, err := m.LdapGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AppRole != nil {
		{
			size, err := m.AppRole.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Kubernetes != nil {
		{
			size, err := m.Kubernetes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultPolicy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultPolicyBinding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicyBinding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicyBinding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Status.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ObjectMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultPolicyBindingList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicyBindingList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicyBindingList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultPolicyBindingSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicyBindingSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicyBindingSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SubjectRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Policies) > 0 {
		for iNdEx := len(m.Policies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Policies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.VaultRoleName)
	copy(dAtA[i:], m.VaultRoleName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VaultRoleName)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.VaultRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultPolicyBindingStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicyBindingStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicyBindingStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *VaultPolicyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.ListMeta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultPolicySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenerated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	i -= len(m.PolicyDocument)
	copy(dAtA[i:], m.PolicyDocument)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.PolicyDocument)))
	i--
	dAtA[i] = 0x1a
	i -= len(m.VaultPolicyName)
	copy(dAtA[i:], m.VaultPolicyName)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.VaultPolicyName)))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.VaultRef.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenerated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VaultPolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultPolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultPolicyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conditions) > 0 {
		for iNdEx := len(m.Conditions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conditions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenerated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	i -= len(m.Phase)
	copy(dAtA[i:], m.Phase)
	i = encodeVarintGenerated(dAtA, i, uint64(len(m.Phase)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintGenerated(dAtA, i, uint64(m.ObservedGeneration))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenerated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AppRoleSubjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RoleName)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	if len(m.SecretIDBoundCidrs) > 0 {
		for _, s := range m.SecretIDBoundCidrs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.SecretIDNumUses))
	l = len(m.SecretIDTTL)
	n += 1 + l + sovGenerated(uint64(l))
	n += 2
	n += 1 + sovGenerated(uint64(m.TokenTTL))
	n += 1 + sovGenerated(uint64(m.TokenMaxTTL))
	if len(m.TokenPolicies) > 0 {
		for _, s := range m.TokenPolicies {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.TokenBoundCidrs) > 0 {
		for _, s := range m.TokenBoundCidrs {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 1 + sovGenerated(uint64(m.TokenExplicitMaxTTL))
	n += 2
	n += 1 + sovGenerated(uint64(m.TokenNumUses))
	n += 1 + sovGenerated(uint64(m.TokenPeriod))
	l = len(m.TokenType)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *JWTSubjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.RoleType)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.BoundAudiences) > 0 {
		for _, s := range m.BoundAudiences {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.UserClaim)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.BoundSubject)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.BoundClaims) > 0 {
		for k, v := range m.BoundClaims {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	l = len(m.BoundClaimsType)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.GroupClaim)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ClaimMappings) > 0 {
		for k, v := range m.ClaimMappings {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovGenerated(uint64(len(k))) + 1 + len(v) + sovGenerated(uint64(len(v)))
			n += mapEntrySize + 1 + sovGenerated(uint64(mapEntrySize))
		}
	}
	if len(m.OIDCScopes) > 0 {
		for _, s := range m.OIDCScopes {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.AllowedRedirectUris) > 0 {
		for _, s := range m.AllowedRedirectUris {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	n += 2
	n += 1 + sovGenerated(uint64(m.TokenTTL))
	n += 1 + sovGenerated(uint64(m.TokenMaxTTL))
	if len(m.TokenPolicies) > 0 {
		for _, s := range m.TokenPolicies {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.TokenBoundCidrs) > 0 {
		for _, s := range m.TokenBoundCidrs {
			l = len(s)
			n += 2 + l + sovGenerated(uint64(l))
		}
	}
	n += 2 + sovGenerated(uint64(m.TokenExplicitMaxTTL))
	n += 3
	n += 2 + sovGenerated(uint64(m.TokenNumUses))
	n += 2 + sovGenerated(uint64(m.TokenPeriod))
	l = len(m.TokenType)
	n += 2 + l + sovGenerated(uint64(l))
	return n
}

func (m *KubernetesSubjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.ServiceAccountNames) > 0 {
		for _, s := range m.ServiceAccountNames {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.ServiceAccountNamespaces) > 0 {
		for _, s := range m.ServiceAccountNamespaces {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = len(m.TTL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.MaxTTL)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Period)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *LdapGroupSubjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Policies) > 0 {
		for _, s := range m.Policies {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *LdapUserSubjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Username)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Policies) > 0 {
		for _, s := range m.Policies {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, s := range m.Groups {
			l = len(s)
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *PolicyIdentifier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Ref)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *ServiceAccountReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.Namespace)
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *SubjectRef) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kubernetes != nil {
		l = m.Kubernetes.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.AppRole != nil {
		l = m.AppRole.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LdapGroup != nil {
		l = m.LdapGroup.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.LdapUser != nil {
		l = m.LdapUser.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	if m.JWT != nil {
		l = m.JWT.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VaultPolicy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VaultPolicyBinding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ObjectMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Spec.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VaultPolicyBindingList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VaultPolicyBindingSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VaultRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VaultRoleName)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Policies) > 0 {
		for _, e := range m.Policies {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	l = m.SubjectRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	return n
}

func (m *VaultPolicyBindingStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VaultPolicyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ListMeta.Size()
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func (m *VaultPolicySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VaultRef.Size()
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.VaultPolicyName)
	n += 1 + l + sovGenerated(uint64(l))
	l = len(m.PolicyDocument)
	n += 1 + l + sovGenerated(uint64(l))
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovGenerated(uint64(l))
	}
	return n
}

func (m *VaultPolicyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovGenerated(uint64(m.ObservedGeneration))
	l = len(m.Phase)
	n += 1 + l + sovGenerated(uint64(l))
	if len(m.Conditions) > 0 {
		for _, e := range m.Conditions {
			l = e.Size()
			n += 1 + l + sovGenerated(uint64(l))
		}
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AppRoleSubjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AppRoleSubjectRef{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`RoleName:` + fmt.Sprintf("%v", this.RoleName) + `,`,
		`BindSecretID:` + fmt.Sprintf("%v", this.BindSecretID) + `,`,
		`SecretIDBoundCidrs:` + fmt.Sprintf("%v", this.SecretIDBoundCidrs) + `,`,
		`SecretIDNumUses:` + fmt.Sprintf("%v", this.SecretIDNumUses) + `,`,
		`SecretIDTTL:` + fmt.Sprintf("%v", this.SecretIDTTL) + `,`,
		`EnableLocalSecretIDs:` + fmt.Sprintf("%v", this.EnableLocalSecretIDs) + `,`,
		`TokenTTL:` + fmt.Sprintf("%v", this.TokenTTL) + `,`,
		`TokenMaxTTL:` + fmt.Sprintf("%v", this.TokenMaxTTL) + `,`,
		`TokenPolicies:` + fmt.Sprintf("%v", this.TokenPolicies) + `,`,
		`TokenBoundCidrs:` + fmt.Sprintf("%v", this.TokenBoundCidrs) + `,`,
		`TokenExplicitMaxTTL:` + fmt.Sprintf("%v", this.TokenExplicitMaxTTL) + `,`,
		`TokenNoDefaultPolicy:` + fmt.Sprintf("%v", this.TokenNoDefaultPolicy) + `,`,
		`TokenNumUses:` + fmt.Sprintf("%v", this.TokenNumUses) + `,`,
		`TokenPeriod:` + fmt.Sprintf("%v", this.TokenPeriod) + `,`,
		`TokenType:` + fmt.Sprintf("%v", this.TokenType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JWTSubjectRef) String() string {
	if this == nil {
		return "nil"
	}
	keysForBoundClaims := make([]string, 0, len(this.BoundClaims))
	for k := range this.BoundClaims {
		keysForBoundClaims = append(keysForBoundClaims, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForBoundClaims)
	mapStringForBoundClaims := "map[string]string{"
	for _, k := range keysForBoundClaims {
		mapStringForBoundClaims += fmt.Sprintf("%v: %v,", k, this.BoundClaims[k])
	}
	mapStringForBoundClaims += "}"
	keysForClaimMappings := make([]string, 0, len(this.ClaimMappings))
	for k := range this.ClaimMappings {
		keysForClaimMappings = append(keysForClaimMappings, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForClaimMappings)
	mapStringForClaimMappings := "map[string]string{"
	for _, k := range keysForClaimMappings {
		mapStringForClaimMappings += fmt.Sprintf("%v: %v,", k, this.ClaimMappings[k])
	}
	mapStringForClaimMappings += "}"
	s := strings.Join([]string{`&JWTSubjectRef{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`RoleType:` + fmt.Sprintf("%v", this.RoleType) + `,`,
		`BoundAudiences:` + fmt.Sprintf("%v", this.BoundAudiences) + `,`,
		`UserClaim:` + fmt.Sprintf("%v", this.UserClaim) + `,`,
		`BoundSubject:` + fmt.Sprintf("%v", this.BoundSubject) + `,`,
		`BoundClaims:` + mapStringForBoundClaims + `,`,
		`BoundClaimsType:` + fmt.Sprintf("%v", this.BoundClaimsType) + `,`,
		`GroupClaim:` + fmt.Sprintf("%v", this.GroupClaim) + `,`,
		`ClaimMappings:` + mapStringForClaimMappings + `,`,
		`OIDCScopes:` + fmt.Sprintf("%v", this.OIDCScopes) + `,`,
		`AllowedRedirectUris:` + fmt.Sprintf("%v", this.AllowedRedirectUris) + `,`,
		`VerboseOIDCLogging:` + fmt.Sprintf("%v", this.VerboseOIDCLogging) + `,`,
		`TokenTTL:` + fmt.Sprintf("%v", this.TokenTTL) + `,`,
		`TokenMaxTTL:` + fmt.Sprintf("%v", this.TokenMaxTTL) + `,`,
		`TokenPolicies:` + fmt.Sprintf("%v", this.TokenPolicies) + `,`,
		`TokenBoundCidrs:` + fmt.Sprintf("%v", this.TokenBoundCidrs) + `,`,
		`TokenExplicitMaxTTL:` + fmt.Sprintf("%v", this.TokenExplicitMaxTTL) + `,`,
		`TokenNoDefaultPolicy:` + fmt.Sprintf("%v", this.TokenNoDefaultPolicy) + `,`,
		`TokenNumUses:` + fmt.Sprintf("%v", this.TokenNumUses) + `,`,
		`TokenPeriod:` + fmt.Sprintf("%v", this.TokenPeriod) + `,`,
		`TokenType:` + fmt.Sprintf("%v", this.TokenType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KubernetesSubjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KubernetesSubjectRef{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ServiceAccountNames:` + fmt.Sprintf("%v", this.ServiceAccountNames) + `,`,
		`ServiceAccountNamespaces:` + fmt.Sprintf("%v", this.ServiceAccountNamespaces) + `,`,
		`TTL:` + fmt.Sprintf("%v", this.TTL) + `,`,
		`MaxTTL:` + fmt.Sprintf("%v", this.MaxTTL) + `,`,
		`Period:` + fmt.Sprintf("%v", this.Period) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LdapGroupSubjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LdapGroupSubjectRef{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Policies:` + fmt.Sprintf("%v", this.Policies) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LdapUserSubjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LdapUserSubjectRef{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Policies:` + fmt.Sprintf("%v", this.Policies) + `,`,
		`Groups:` + fmt.Sprintf("%v", this.Groups) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PolicyIdentifier) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PolicyIdentifier{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Ref:` + fmt.Sprintf("%v", this.Ref) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ServiceAccountReference) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ServiceAccountReference{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Namespace:` + fmt.Sprintf("%v", this.Namespace) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubjectRef) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubjectRef{`,
		`Kubernetes:` + strings.Replace(this.Kubernetes.String(), "KubernetesSubjectRef", "KubernetesSubjectRef", 1) + `,`,
		`AppRole:` + strings.Replace(this.AppRole.String(), "AppRoleSubjectRef", "AppRoleSubjectRef", 1) + `,`,
		`LdapGroup:` + strings.Replace(this.LdapGroup.String(), "LdapGroupSubjectRef", "LdapGroupSubjectRef", 1) + `,`,
		`LdapUser:` + strings.Replace(this.LdapUser.String(), "LdapUserSubjectRef", "LdapUserSubjectRef", 1) + `,`,
		`JWT:` + strings.Replace(this.JWT.String(), "JWTSubjectRef", "JWTSubjectRef", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VaultPolicy{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "VaultPolicySpec", "VaultPolicySpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "VaultPolicyStatus", "VaultPolicyStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicyBinding) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VaultPolicyBinding{`,
		`ObjectMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ObjectMeta), "ObjectMeta", "v1.ObjectMeta", 1), `&`, ``, 1) + `,`,
		`Spec:` + strings.Replace(strings.Replace(this.Spec.String(), "VaultPolicyBindingSpec", "VaultPolicyBindingSpec", 1), `&`, ``, 1) + `,`,
		`Status:` + strings.Replace(strings.Replace(this.Status.String(), "VaultPolicyBindingStatus", "VaultPolicyBindingStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicyBindingList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]VaultPolicyBinding{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "VaultPolicyBinding", "VaultPolicyBinding", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&VaultPolicyBindingList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicyBindingSpec) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPolicies := "[]PolicyIdentifier{"
	for _, f := range this.Policies {
		repeatedStringForPolicies += strings.Replace(strings.Replace(f.String(), "PolicyIdentifier", "PolicyIdentifier", 1), `&`, ``, 1) + ","
	}
	repeatedStringForPolicies += "}"
	s := strings.Join([]string{`&VaultPolicyBindingSpec{`,
		`VaultRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.VaultRef), "LocalObjectReference", "v11.LocalObjectReference", 1), `&`, ``, 1) + `,`,
		`VaultRoleName:` + fmt.Sprintf("%v", this.VaultRoleName) + `,`,
		`Policies:` + repeatedStringForPolicies + `,`,
		`SubjectRef:` + strings.Replace(strings.Replace(this.SubjectRef.String(), "SubjectRef", "SubjectRef", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicyBindingStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&VaultPolicyBindingStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicyList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForItems := "[]VaultPolicy{"
	for _, f := range this.Items {
		repeatedStringForItems += strings.Replace(strings.Replace(f.String(), "VaultPolicy", "VaultPolicy", 1), `&`, ``, 1) + ","
	}
	repeatedStringForItems += "}"
	s := strings.Join([]string{`&VaultPolicyList{`,
		`ListMeta:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.ListMeta), "ListMeta", "v1.ListMeta", 1), `&`, ``, 1) + `,`,
		`Items:` + repeatedStringForItems + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicySpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VaultPolicySpec{`,
		`VaultRef:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.VaultRef), "LocalObjectReference", "v11.LocalObjectReference", 1), `&`, ``, 1) + `,`,
		`VaultPolicyName:` + fmt.Sprintf("%v", this.VaultPolicyName) + `,`,
		`PolicyDocument:` + fmt.Sprintf("%v", this.PolicyDocument) + `,`,
		`Policy:` + strings.Replace(fmt.Sprintf("%v", this.Policy), "RawExtension", "runtime.RawExtension", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VaultPolicyStatus) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConditions := "[]Condition{"
	for _, f := range this.Conditions {
		repeatedStringForConditions += fmt.Sprintf("%v", f) + ","
	}
	repeatedStringForConditions += "}"
	s := strings.Join([]string{`&VaultPolicyStatus{`,
		`ObservedGeneration:` + fmt.Sprintf("%v", this.ObservedGeneration) + `,`,
		`Phase:` + fmt.Sprintf("%v", this.Phase) + `,`,
		`Conditions:` + repeatedStringForConditions + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGenerated(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AppRoleSubjectRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppRoleSubjectRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppRoleSubjectRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindSecretID", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BindSecretID = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretIDBoundCidrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretIDBoundCidrs = append(m.SecretIDBoundCidrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretIDNumUses", wireType)
			}
			m.SecretIDNumUses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretIDNumUses |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretIDTTL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecretIDTTL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLocalSecretIDs", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableLocalSecretIDs = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTTL", wireType)
			}
			m.TokenTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMaxTTL", wireType)
			}
			m.TokenMaxTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenMaxTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPolicies = append(m.TokenPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBoundCidrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBoundCidrs = append(m.TokenBoundCidrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExplicitMaxTTL", wireType)
			}
			m.TokenExplicitMaxTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenExplicitMaxTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNoDefaultPolicy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TokenNoDefaultPolicy = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNumUses", wireType)
			}
			m.TokenNumUses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenNumUses |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPeriod", wireType)
			}
			m.TokenPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JWTSubjectRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JWTSubjectRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JWTSubjectRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundAudiences", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoundAudiences = append(m.BoundAudiences, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserClaim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserClaim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoundSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoundClaims == nil {
				m.BoundClaims = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BoundClaims[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundClaimsType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoundClaimsType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupClaim", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupClaim = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimMappings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClaimMappings == nil {
				m.ClaimMappings = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenerated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthGenerated
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGenerated(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthGenerated
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ClaimMappings[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OIDCScopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OIDCScopes = append(m.OIDCScopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedRedirectUris", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedRedirectUris = append(m.AllowedRedirectUris, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerboseOIDCLogging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VerboseOIDCLogging = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTTL", wireType)
			}
			m.TokenTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenMaxTTL", wireType)
			}
			m.TokenMaxTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenMaxTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPolicies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPolicies = append(m.TokenPolicies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBoundCidrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBoundCidrs = append(m.TokenBoundCidrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenExplicitMaxTTL", wireType)
			}
			m.TokenExplicitMaxTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenExplicitMaxTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNoDefaultPolicy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TokenNoDefaultPolicy = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenNumUses", wireType)
			}
			m.TokenNumUses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenNumUses |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPeriod", wireType)
			}
			m.TokenPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesSubjectRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesSubjectRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesSubjectRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountNames = append(m.ServiceAccountNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountNamespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountNamespaces = append(m.ServiceAccountNamespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TTL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTTL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxTTL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Period = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdapGroupSubjectRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdapGroupSubjectRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdapGroupSubjectRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LdapUserSubjectRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LdapUserSubjectRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LdapUserSubjectRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyIdentifier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyIdentifier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyIdentifier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ref", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ref = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAccountReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAccountReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAccountReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubjectRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubjectRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubjectRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubernetes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Kubernetes == nil {
				m.Kubernetes = &KubernetesSubjectRef{}
			}
			if err := m.Kubernetes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppRole", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppRole == nil {
				m.AppRole = &AppRoleSubjectRef{}
			}
			if err := m.AppRole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdapGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LdapGroup == nil {
				m.LdapGroup = &LdapGroupSubjectRef{}
			}
			if err := m.LdapGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdapUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LdapUser == nil {
				m.LdapUser = &LdapUserSubjectRef{}
			}
			if err := m.LdapUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JWT", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JWT == nil {
				m.JWT = &JWTSubjectRef{}
			}
			if err := m.JWT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicyBinding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicyBinding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicyBinding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ObjectMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicyBindingList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicyBindingList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicyBindingList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, VaultPolicyBinding{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicyBindingSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicyBindingSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicyBindingSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultRoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultRoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policies = append(m.Policies, PolicyIdentifier{})
			if err := m.Policies[len(m.Policies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SubjectRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicyBindingStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicyBindingStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicyBindingStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = PolicyBindingPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v12.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ListMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, VaultPolicy{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultRef", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VaultRef.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultPolicyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultPolicyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyDocument", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyDocument = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &runtime.RawExtension{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultPolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultPolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultPolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedGeneration", wireType)
			}
			m.ObservedGeneration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedGeneration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phase = PolicyPhase(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenerated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenerated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = append(m.Conditions, v12.Condition{})
			if err := m.Conditions[len(m.Conditions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenerated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenerated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenerated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenerated = fmt.Errorf("proto: unexpected end of group")
)
