/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubevault.dev.apimachinery.apis.catalog.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vaultserverversions,singular=vaultserverversion,scope=Cluster,shortName=vsv,categories={vault,appscode}
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="VAULT_IMAGE",type="string",JSONPath=".spec.vault.image"
// +kubebuilder:printcolumn:name="Deprecated",type="boolean",JSONPath=".spec.deprecated"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message VaultServerVersion {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VaultServerVersionSpec spec = 2;
}

// VaultServerVersionExporter is the image for the vault exporter
message VaultServerVersionExporter {
  // Image is the Docker image name
  optional string image = 1;

  // ImagePullPolicy one of Always, Never, IfNotPresent. It defaults to Always if :latest is used, or IfNotPresent overwise.
  // +optional
  optional string imagePullPolicy = 2;
}

// VaultServerVersionList is a list of VaultserverVersions
message VaultServerVersionList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of VaultServerVersion CRD objects
  repeated VaultServerVersion items = 2;
}

// VaultServerVersionSpec is the spec for postgres version
message VaultServerVersionSpec {
  // Version
  optional string version = 1;

  // Vault Image
  optional VaultServerVersionVault vault = 2;

  // Unsealer Image
  optional VaultServerVersionUnsealer unsealer = 3;

  // Exporter Image
  optional VaultServerVersionExporter exporter = 4;

  // Deprecated versions usable but regarded as obsolete and best avoided, typically due to having been superseded.
  // +optional
  optional bool deprecated = 5;
}

// VaultServerVersionUnsealer is the image for the vault unsealer
message VaultServerVersionUnsealer {
  // Image is the Docker image name
  optional string image = 1;

  // ImagePullPolicy one of Always, Never, IfNotPresent. It defaults to Always if :latest is used, or IfNotPresent overwise.
  // +optional
  optional string imagePullPolicy = 2;
}

// VaultServerVersionVault is the vault image
message VaultServerVersionVault {
  // Image is the Docker image name
  optional string image = 1;

  // ImagePullPolicy one of Always, Never, IfNotPresent. It defaults to Always if :latest is used, or IfNotPresent overwise.
  // +optional
  optional string imagePullPolicy = 2;
}

