/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package kubevault.dev.apimachinery.apis.kubevault.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";
import "kmodules.xyz/client-go/api/v1/generated.proto";
import "kmodules.xyz/monitoring-agent-api/api/v1/generated.proto";
import "kmodules.xyz/offshoot-api/api/v1/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message AuthConfig {
  // The default lease duration, specified as a string duration like "5s" or "30m".
  // +optional
  optional string defaultLeaseTTL = 1;

  // The maximum lease duration, specified as a string duration like "5s" or "30m".
  // +optional
  optional string maxLeaseTTL = 2;

  // The name of the plugin in the plugin catalog to use.
  // +optional
  optional string pluginName = 3;

  // List of keys that will not be HMAC'd by audit devices in the request data object.
  // +optional
  repeated string auditNonHMACRequestKeys = 4;

  // List of keys that will not be HMAC'd by audit devices in the response data object.
  // +optional
  repeated string auditNonHMACResponseKeys = 5;

  // Speficies whether to show this mount in the UI-specific listing endpoint.
  // +optional
  optional string listingVisibility = 6;

  // List of headers to whitelist and pass from the request to the backend.
  // +optional
  repeated string passthroughRequestHeaders = 7;
}

// AuthMethod contains the information to enable vault auth method
// links: https://www.vaultproject.io/api/system/auth.html
message AuthMethod {
  //  Specifies the name of the authentication method type, such as "github" or "token".
  optional string type = 1;

  // Specifies the path in which to enable the auth method.
  // Default value is the same as the 'type'
  optional string path = 2;

  // Specifies a human-friendly description of the auth method.
  // +optional
  optional string description = 3;

  // Specifies configuration options for this auth method.
  // +optional
  optional AuthConfig config = 4;

  // Specifies the name of the auth plugin to use based from the name in the plugin catalog.
  // Applies only to plugin methods.
  // +optional
  optional string pluginName = 5;

  // Specifies if the auth method is a local only. Local auth methods are not replicated nor (if a secondary) removed by replication.
  // +optional
  optional bool local = 6;
}

// AuthMethodStatus specifies the status of the auth method maintained by the auth method controller
message AuthMethodStatus {
  //  Specifies the name of the authentication method type, such as "github" or "token".
  optional string type = 1;

  // Specifies the path in which to enable the auth method.
  optional string path = 2;

  // Specifies whether auth method is enabled or not
  optional string status = 3;

  // Specifies the reason why failed to enable auth method
  // +optional
  optional string reason = 4;
}

// AwsKmsSsmSpec contain the fields that required to unseal vault using aws kms ssm
message AwsKmsSsmSpec {
  // The ID or ARN of the AWS KMS key to encrypt values
  optional string kmsKeyID = 1;

  // +optional
  // An optional Key prefix for SSM Parameter store
  optional string ssmKeyPrefix = 2;

  optional string region = 3;

  // Specifies the secret name containing AWS access key and AWS secret key
  // secret data:
  //  - access_key:<value>
  //  - secret_key:<value>
  // +optional
  optional string credentialSecret = 4;

  // Used to make AWS KMS requests. This is useful,
  // for example, when connecting to KMS over a VPC Endpoint.
  // If not set, Vault will use the default API endpoint for your region.
  optional string endpoint = 5;
}

// AzureKeyVault contain the fields that required to unseal vault using azure key vault
message AzureKeyVault {
  // Azure key vault url, for example https://myvault.vault.azure.net
  optional string vaultBaseURL = 1;

  // The cloud environment identifier
  // default: "AZUREPUBLICCLOUD"
  // +optional
  optional string cloud = 2;

  // The AAD Tenant ID
  optional string tenantID = 3;

  // Specifies the name of secret containing client cert and client cert password
  // secret data:
  //  - client-cert:<value>
  // 	- client-cert-password: <value>
  // +optional
  optional string clientCertSecret = 4;

  // Specifies the name of secret containing client id and client secret of AAD application
  // secret data:
  //  - client-id:<value>
  //  - client-secret:<value>
  // +optional
  optional string aadClientSecret = 5;

  // Use managed service identity for the virtual machine
  // +optional
  optional bool useManagedIdentity = 6;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/azure.html
//
// AzureSpec defines configuration to set up Google Cloud Storage as backend storage in vault
message AzureSpec {
  // Specifies the Azure Storage account name.
  optional string accountName = 1;

  // Specifies the secret containing Azure Storage account key.
  // secret data:
  //  - account_key:<value>
  optional string accountKeySecret = 2;

  // Specifies the Azure Storage Blob container name.
  optional string container = 3;

  //  Specifies the maximum number of concurrent operations to take place.
  // +optional
  optional int64 maxParallel = 4;
}

// TODO : set defaults and validation
// BackendStorageSpec defines storage backend configuration of vault
message BackendStorageSpec {
  // ref: https://www.vaultproject.io/docs/configuration/storage/in-memory.html
  // +optional
  optional InmemSpec inmem = 1;

  // +optional
  optional EtcdSpec etcd = 2;

  // +optional
  optional GcsSpec gcs = 3;

  // +optional
  optional S3Spec s3 = 4;

  // +optional
  optional AzureSpec azure = 5;

  // +optional
  optional PostgreSQLSpec postgresql = 6;

  // +optional
  optional MySQLSpec mysql = 7;

  // +optional
  optional FileSpec file = 8;

  // +optional
  optional DynamoDBSpec dynamodb = 9;

  // +optional
  optional SwiftSpec swift = 10;

  // +optional
  optional ConsulSpec consul = 11;

  // +optional
  optional RaftSpec raft = 12;
}

// ref: https://www.vaultproject.io/docs/configuration/storage/consul.html
//
// ConsulSpec defines the configuration to set up consul as backend storage in vault
message ConsulSpec {
  // Specifies the address of the Consul agent to communicate with.
  // This can be an IP address, DNS record, or unix socket.
  // +optional
  optional string address = 1;

  // Specifies the check interval used to send health check information
  // back to Consul.
  // This is specified using a label suffix like "30s" or "1h".
  // +optional
  optional string checkTimeout = 2;

  // Specifies the Consul consistency mode.
  // Possible values are "default" or "strong".
  // +optional
  optional string consistencyMode = 3;

  // Specifies whether Vault should register itself with Consul.
  // Possible values are "true" or "false"
  // +optional
  optional string disableRegistration = 4;

  // Specifies the maximum number of concurrent requests to Consul.
  // +optional
  optional string maxParallel = 5;

  // Specifies the path in Consul's key-value store
  // where Vault data will be stored.
  // +optional
  optional string path = 6;

  // Specifies the scheme to use when communicating with Consul.
  // This can be set to "http" or "https".
  // +optional
  optional string scheme = 7;

  // Specifies the name of the service to register in Consul.
  // +optional
  optional string service = 8;

  // Specifies a comma-separated list of tags
  // to attach to the service registration in Consul.
  // +optional
  optional string serviceTags = 9;

  // Specifies a service-specific address to set on the service registration
  // in Consul.
  // If unset, Vault will use what it knows to be the HA redirect address
  // - which is usually desirable.
  // Setting this parameter to "" will tell Consul to leverage the configuration
  // of the node the service is registered on dynamically.
  // +optional
  optional string serviceAddress = 10;

  // Specifies the secret name that contains ACL token with permission
  // to read and write from the path in Consul's key-value store.
  // secret data:
  //  - aclToken:<value>
  // +optional
  optional string aclTokenSecretName = 11;

  // Specifies the minimum allowed session TTL.
  // Consul server has a lower limit of 10s on the session TTL by default.
  // +optional
  optional string sessionTTL = 12;

  // Specifies the wait time before a lock lock acquisition is made.
  // This affects the minimum time it takes to cancel a lock acquisition.
  // +optional
  optional string lockWaitTime = 13;

  // Specifies the secret name that contains tls_ca_file, tls_cert_file and tls_key_file
  // for consul communication
  // Secret data:
  //  - ca.crt
  //  - client.crt
  //  - client.key
  // +optional
  optional string tlsSecretName = 14;

  // Specifies the minimum TLS version to use.
  // Accepted values are "tls10", "tls11" or "tls12".
  // +optional
  optional string tlsMinVersion = 15;

  // Specifies if the TLS host verification should be disabled.
  // It is highly discouraged that you disable this option.
  // +optional
  optional bool tlsSkipVerify = 16;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/dynamodb.html
//
// DynamoDBSpec defines configuration to set up DynamoDB Storage as backend storage in vault
message DynamoDBSpec {
  // Specifies an alternative, AWS compatible, DynamoDB endpoint.
  // +optional
  optional string endpoint = 1;

  // Specifies the AWS region
  // +optional
  optional string region = 2;

  // Specifies whether this backend should be used to run Vault in high availability mode.
  // +optional
  optional bool haEnabled = 3;

  // Specifies the maximum number of reads consumed per second on the table
  // +optional
  optional int64 readCapacity = 4;

  // Specifies the maximum number of writes performed per second on the table.
  // +optional
  optional int64 writeCapacity = 5;

  // Specifies the name of the DynamoDB table in which to store Vault data.
  // If the specified table does not yet exist, it will be created during initialization.
  // default: vault-dynamodb-backend
  // +optional
  optional string table = 6;

  // Specifies the secret name containing AWS access key and AWS secret key
  // secret data:
  //  - access_key=<value>
  //  - secret_key=<value>
  // +optional
  optional string credentialSecret = 7;

  // Specifies the secret name containing AWS session token
  // secret data:
  //  - session_token:<value>
  // +optional
  optional string sessionTokenSecret = 8;

  // Specifies the maximum number of parallel operations to take place.
  // +optional
  optional int64 maxParallel = 9;
}

// TODO : set defaults and validation
// vault doc: https://www.vaultproject.io/docs/configuration/storage/etcd.html
//
// EtcdSpec defines configuration to set up etcd as backend storage in vault
message EtcdSpec {
  // Specifies the addresses of the etcd instances
  optional string address = 1;

  // Specifies the version of the API to communicate with etcd
  // +optional
  optional string etcdApi = 2;

  // Specifies if high availability should be enabled
  // +optional
  optional bool haEnable = 3;

  // Specifies the path in etcd where vault data will be stored
  // +optional
  optional string path = 4;

  // Specifies whether to sync list of available etcd services on startup
  // +optional
  optional bool sync = 5;

  // Specifies the domain name to query for SRV records describing cluster endpoints
  // +optional
  optional string discoverySrv = 6;

  // Specifies the secret name that contain username and password to use when authenticating with the etcd server
  // secret data:
  //  - username:<value>
  //  - password:<value>
  // +optional
  optional string credentialSecretName = 7;

  // Specifies the secret name that contains tls_ca_file, tls_cert_file and tls_key_file for etcd communication
  // secret data:
  //  - ca.crt
  //  - client.crt
  //  - client.key
  // +optional
  optional string tlsSecretName = 8;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/filesystem.html
//
// FileSpec defines configuration to set up File system Storage as backend storage in vault
message FileSpec {
  // The absolute path on disk to the directory where the data will be stored.
  // If the directory does not exist, Vault will create it.
  optional string path = 1;

  // volumeClaimTemplate is a claim that pods are allowed to reference.
  // The VaultServer controller is responsible for deploying the claim
  // and update the volumeMounts in the Vault server container in the template.
  optional kmodules.xyz.offshoot_api.api.v1.PersistentVolumeClaim volumeClaimTemplate = 2;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/google-cloud-storage.html
//
// GcsSpec defines configuration to set up Google Cloud Storage as backend storage in vault
message GcsSpec {
  // Specifies the name of the bucket to use for storage.
  optional string bucket = 1;

  // Specifies the maximum size (in kilobytes) to send in a single request. If set to 0,
  // it will attempt to send the whole object at once, but will not retry any failures.
  // +optional
  optional string chunkSize = 2;

  //  Specifies the maximum number of parallel operations to take place.
  // +optional
  optional int64 maxParallel = 3;

  // Specifies if high availability mode is enabled.
  // +optional
  optional bool haEnabled = 4;

  // Secret containing Google application credential
  // secret data:
  //  - sa.json:<value>
  // +optional
  optional string credentialSecret = 5;
}

// GoogleKmsGcsSpec contain the fields that required to unseal vault using google kms
message GoogleKmsGcsSpec {
  // The name of the Google Cloud KMS crypto key to use
  optional string kmsCryptoKey = 1;

  // The name of the Google Cloud KMS key ring to use
  optional string kmsKeyRing = 2;

  // The Google Cloud KMS location to use (eg. 'global', 'europe-west1')
  optional string kmsLocation = 3;

  // The Google Cloud KMS project to use
  optional string kmsProject = 4;

  // The name of the Google Cloud Storage bucket to store values in
  optional string bucket = 5;

  // Secret containing Google application credential
  // secret data:
  //  - sa.json:<value>
  // +optional
  optional string credentialSecret = 6;
}

// ref: https://www.vaultproject.io/docs/configuration/storage/in-memory.html
message InmemSpec {
}

// KubernetesSecretSpec contain the fields that required to unseal using kubernetes secret
message KubernetesSecretSpec {
  optional string secretName = 1;
}

// ModeSpec contain unseal mechanism
message ModeSpec {
  // +optional
  optional KubernetesSecretSpec kubernetesSecret = 1;

  // +optional
  optional GoogleKmsGcsSpec googleKmsGcs = 2;

  // +optional
  optional AwsKmsSsmSpec awsKmsSsm = 3;

  // +optional
  optional AzureKeyVault azureKeyVault = 4;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/mysql.html
//
// MySQLSpec defines configuration to set up MySQL Storage as backend storage in vault
message MySQLSpec {
  // Specifies the address of the MySQL host.
  // +optional
  optional string address = 1;

  // Specifies the name of the database. If the database does not exist, Vault will attempt to create it.
  // +optional
  optional string database = 2;

  // Specifies the name of the table. If the table does not exist, Vault will attempt to create it.
  // +optional
  optional string table = 3;

  // Specifies the MySQL username and password to connect to the database
  // secret data:
  //  - username=<value>
  //  - password=<value>
  optional string userCredentialSecret = 4;

  // Specifies the name of the secret containing the CA certificate to connect using TLS.
  // secret data:
  //  - tls_ca_file=<ca_cert>
  // +optional
  optional string tlsCASecret = 5;

  //  Specifies the maximum number of concurrent requests to take place.
  // +optional
  optional int64 maxParallel = 6;
}

message NamedServiceTemplateSpec {
  // Alias represents the identifier of the service.
  optional string alias = 1;

  // ServiceTemplate is an optional configuration for a service used to expose VaultServer
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.ServiceTemplateSpec serviceTemplateSpec = 2;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/postgresql.html
//
// PostgreSQLSpec defines configuration to set up PostgreSQL storage as backend storage in vault
message PostgreSQLSpec {
  // Specifies the name of the secret containing the connection string to use to authenticate and connect to PostgreSQL.
  // A full list of supported parameters can be found in the pq library documentation(https://godoc.org/github.com/lib/pq#hdr-Connection_String_Parameters).
  // secret data:
  //  - connection_url:<data>
  optional string connectionURLSecret = 1;

  // Specifies the name of the table in which to write Vault data.
  // This table must already exist (Vault will not attempt to create it).
  // +optional
  optional string table = 2;

  //  Specifies the maximum number of concurrent requests to take place.
  // +optional
  optional int64 maxParallel = 3;
}

// RaftSpec defines the configuration for the Raft integrated storage.
// https://www.vaultproject.io/docs/configuration/storage/raft
message RaftSpec {
  // Path (string: "") specifies the filesystem path where the vault data gets stored.
  // This value can be overridden by setting the VAULT_RAFT_PATH environment variable.
  // default: ""
  // +optional
  optional string path = 1;

  // An integer multiplier used by servers to scale key Raft timing parameters.
  // Tuning this affects the time it takes Vault to detect leader failures and to perform leader elections,
  // at the expense of requiring more network and CPU resources for better performance.
  // default: 0
  // +optional
  optional int64 performanceMultiplier = 3;

  // This controls how many log entries are left in the log store on disk after a snapshot is made.
  // default: 10000
  // +optional
  optional int64 trailingLogs = 4;

  // This controls the minimum number of raft commit entries between snapshots that are saved to disk.
  // default: 8192
  // +optional
  optional int64 snapshotThreshold = 5;

  // This configures the maximum number of bytes for a raft entry. It applies to both Put operations and transactions.
  // default: 1048576
  // +optional
  optional int64 maxEntrySize = 7;

  // This is the interval after which autopilot will pick up any state changes.
  // default: ""
  // +optional
  optional string autoPilotReconcileInterval = 8;

  // Storage to specify how storage shall be used.
  optional k8s.io.api.core.v1.PersistentVolumeClaimSpec storage = 9;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/s3.html
//
// S3Spec defines configuration to set up Amazon S3 Storage as backend storage in vault
message S3Spec {
  // Specifies the name of the bucket to use for storage.
  optional string bucket = 1;

  // Specifies an alternative, AWS compatible, S3 endpoint.
  // +optional
  optional string endpoint = 2;

  // Specifies the AWS region
  // +optional
  optional string region = 3;

  // Specifies the secret name containing AWS access key and AWS secret key
  // secret data:
  //  - access_key=<value>
  //  - secret_key=<value>
  // +optional
  optional string credentialSecret = 4;

  // Specifies the secret name containing AWS session token
  // secret data:
  //  - session_token:<value>
  // +optional
  optional string sessionTokenSecret = 5;

  // Specifies the maximum number of parallel operations to take place.
  // +optional
  optional int64 maxParallel = 6;

  // Specifies whether to use host bucket style domains with the configured endpoint.
  // +optional
  optional bool forcePathStyle = 7;

  // Specifies if SSL should be used for the endpoint connection
  // +optional
  optional bool disableSSL = 8;
}

// vault doc: https://www.vaultproject.io/docs/configuration/storage/swift.html
//
// SwiftSpec defines configuration to set up Swift Storage as backend storage in vault
message SwiftSpec {
  // Specifies the OpenStack authentication endpoint.
  optional string authURL = 1;

  // Specifies the name of the Swift container.
  optional string container = 2;

  // Specifies the name of the secret containing the OpenStack account/username and password
  // secret data:
  //  - username=<value>
  //  - password=<value>
  optional string credentialSecret = 3;

  // Specifies the name of the tenant. If left blank, this will default to the default tenant of the username.
  // +optional
  optional string tenant = 4;

  // Specifies the name of the region.
  // +optional
  optional string region = 5;

  // Specifies the id of the tenant.
  // +optional
  optional string tenantID = 6;

  // Specifies the name of the user domain.
  // +optional
  optional string domain = 7;

  // Specifies the name of the project's domain.
  // +optional
  optional string projectDomain = 8;

  // Specifies the id of the trust.
  // +optional
  optional string trustID = 9;

  // Specifies storage URL from alternate authentication.
  // +optional
  optional string storageURL = 10;

  // Specifies secret containing auth token from alternate authentication.
  // secret data:
  //  - auth_token=<value>
  // +optional
  optional string authTokenSecret = 11;

  //  Specifies the maximum number of concurrent requests to take place.
  // +optional
  optional int64 maxParallel = 12;
}

// TLSPolicy defines the TLS policy of the vault nodes
// If this is not set, operator will auto-gen TLS assets and secrets.
message TLSPolicy {
  // TLSSecret is the secret containing TLS certs used by each vault node
  // for the communication between the vault server and its clients.
  // The secret should contain three files:
  // 	- tls.crt
  // 	- tls.key
  //
  // The server certificate must allow the following wildcard domains:
  // 	- localhost
  // 	- *.<namespace>.pod
  // 	- <vaultServer-name>.<namespace>.svc
  optional string tlsSecret = 1;

  // CABundle is a PEM encoded CA bundle which will be used to validate the serving certificate.
  // +optional
  optional bytes caBundle = 2;
}

// UnsealerSpec contain the configuration for auto vault initialize/unseal
message UnsealerSpec {
  // Total count of secret shares that exist
  // +optional
  optional int64 secretShares = 1;

  // Minimum required secret shares to unseal
  // +optional
  optional int64 secretThreshold = 2;

  // How often to attempt to unseal the vault instance
  // +optional
  optional int64 retryPeriodSeconds = 3;

  // overwrite existing unseal keys and root tokens, possibly dangerous!
  // +optional
  optional bool overwriteExisting = 4;

  // should the root token be stored in the key store (default true)
  // +optional
  optional bool storeRootToken = 5;

  // mode contains unseal mechanism
  // +optional
  optional ModeSpec mode = 6;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=vaultservers,singular=vaultserver,shortName=vs,categories={vault,appscode,all}
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Replicas",type="string",JSONPath=".spec.replicas"
// +kubebuilder:printcolumn:name="Version",type="string",JSONPath=".spec.version"
// +kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.phase"
// +kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
message VaultServer {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional VaultServerSpec spec = 2;

  optional VaultServerStatus status = 3;
}

message VaultServerList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated VaultServer items = 2;
}

message VaultServerSpec {
  // Version of VaultServer to be deployed.
  optional string version = 1;

  // Number of instances to deploy for a VaultServer.
  optional int32 replicas = 2;

  // ConfigSecret is an optional field to provide extra configuration for vault.
  // This secret contain extra config for vault
  // File name should be 'vault.hcl'.
  // If specified, this file will be appended to the controller configuration file.
  // +optional
  optional k8s.io.api.core.v1.LocalObjectReference configSecret = 3;

  // DataSources is a list of Configmaps/Secrets in the same namespace as the VaultServer
  // object, which shall be mounted into the VaultServer Pods.
  // The data are mounted into /etc/vault/data/<name>.
  // The first data will be named as "data-0", second one will be named as "data-1" and so on.
  // +optional
  repeated k8s.io.api.core.v1.VolumeSource dataSources = 4;

  // TLS policy of vault nodes
  // +optional
  optional kmodules.xyz.client_go.api.v1.TLSConfig tls = 5;

  // backend storage configuration for vault
  optional BackendStorageSpec backend = 6;

  // Unsealer configuration for vault
  // +optional
  optional UnsealerSpec unsealer = 7;

  // Specifies the list of auth methods to enable
  // +optional
  repeated AuthMethod authMethods = 8;

  // Monitor is used monitor database instance
  // +optional
  optional kmodules.xyz.monitoring_agent_api.api.v1.AgentSpec monitor = 9;

  // PodTemplate is an optional configuration for pods used to run vault
  // +optional
  optional kmodules.xyz.offshoot_api.api.v1.PodTemplateSpec podTemplate = 10;

  // ServiceTemplates is an optional configuration for services used to expose database
  // +optional
  repeated NamedServiceTemplateSpec serviceTemplates = 11;

  // Indicates that the vault server is halted and all offshoot Kubernetes resources except PVCs are deleted.
  // +optional
  optional bool halted = 12;

  // TerminationPolicy controls the delete operation for vault server
  // +optional
  optional string terminationPolicy = 13;
}

message VaultServerStatus {
  // ObservedGeneration is the most recent generation observed for this resource. It corresponds to the
  // resource's generation, which is updated on mutation by the API Server.
  // +optional
  optional int64 observedGeneration = 1;

  // Phase indicates the state this Vault server jumps in.
  // +optional
  optional string phase = 2;

  // Initialized indicates if the Vault service is initialized.
  // +optional
  optional bool initialized = 3;

  // ServiceName is the LB service for accessing vault nodes.
  // +optional
  optional string serviceName = 4;

  // ClientPort is the port for vault client to access.
  // It's the same on client LB service and vault nodes.
  // +optional
  optional int64 clientPort = 5;

  // VaultStatus is the set of Vault node specific statuses: Active, Standby, and Sealed
  // +optional
  optional VaultStatus vaultStatus = 6;

  // PodNames of updated Vault nodes. Updated means the Vault container image version
  // matches the spec's version.
  // +optional
  repeated string updatedNodes = 7;

  // Represents the latest available observations of a VaultServer current state.
  // +optional
  repeated kmodules.xyz.client_go.api.v1.Condition conditions = 8;

  // Status of the vault auth methods
  // +optional
  repeated AuthMethodStatus authMethodStatus = 9;
}

message VaultStatus {
  // PodName of the active Vault node. Active node is unsealed.
  // Only active node can serve requests.
  // Vault service only points to the active node.
  // +optional
  optional string active = 1;

  // PodNames of the standby Vault nodes. Standby nodes are unsealed.
  // Standby nodes do not process requests, and instead redirect to the active Vault.
  // +optional
  repeated string standby = 2;

  // PodNames of Sealed Vault nodes. Sealed nodes MUST be unsealed to
  // become standby or leader.
  // +optional
  repeated string sealed = 3;

  // PodNames of Unsealed Vault nodes.
  // +optional
  repeated string unsealed = 4;
}

